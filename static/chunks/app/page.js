/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["app/page"],{

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Clolke%5C%5Cprojects%5C%5Capp%5C%5Cpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false!":
/*!********************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Clolke%5C%5Cprojects%5C%5Capp%5C%5Cpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false! ***!
  \********************************************************************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./app/page.tsx */ \"(app-pages-browser)/./app/page.tsx\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyQyUzQSU1QyU1Q1VzZXJzJTVDJTVDbG9sa2UlNUMlNUNwcm9qZWN0cyU1QyU1Q2FwcCU1QyU1Q3BhZ2UudHN4JTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJnNlcnZlcj1mYWxzZSEiLCJtYXBwaW5ncyI6IkFBQUEsc0pBQThFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8/NTczYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIkM6XFxcXFVzZXJzXFxcXGxvbGtlXFxcXHByb2plY3RzXFxcXGFwcFxcXFxwYWdlLnRzeFwiKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Clolke%5C%5Cprojects%5C%5Capp%5C%5Cpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@twa-dev/sdk/dist/index.js":
/*!*************************************************!*\
  !*** ./node_modules/@twa-dev/sdk/dist/index.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar sdk_1 = __webpack_require__(/*! ./sdk */ \"(app-pages-browser)/./node_modules/@twa-dev/sdk/dist/sdk.js\");\nexports[\"default\"] = sdk_1.WebApp;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AdHdhLWRldi9zZGsvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxZQUFZLG1CQUFPLENBQUMsMEVBQU87QUFDM0Isa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHR3YS1kZXYvc2RrL2Rpc3QvaW5kZXguanM/MzVlZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBzZGtfMSA9IHJlcXVpcmUoXCIuL3Nka1wiKTtcbmV4cG9ydHMuZGVmYXVsdCA9IHNka18xLldlYkFwcDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@twa-dev/sdk/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@twa-dev/sdk/dist/sdk.js":
/*!***********************************************!*\
  !*** ./node_modules/@twa-dev/sdk/dist/sdk.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WebApp = void 0;\n__webpack_require__(/*! ./telegram-web-apps */ \"(app-pages-browser)/./node_modules/@twa-dev/sdk/dist/telegram-web-apps.js\");\nvar telegramWindow = window;\nexports.WebApp = telegramWindow.Telegram.WebApp;\n//# sourceMappingURL=sdk.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AdHdhLWRldi9zZGsvZGlzdC9zZGsuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsY0FBYztBQUNkLG1CQUFPLENBQUMsc0dBQXFCO0FBQzdCO0FBQ0EsY0FBYztBQUNkIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AdHdhLWRldi9zZGsvZGlzdC9zZGsuanM/OTU4ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuV2ViQXBwID0gdm9pZCAwO1xucmVxdWlyZShcIi4vdGVsZWdyYW0td2ViLWFwcHNcIik7XG52YXIgdGVsZWdyYW1XaW5kb3cgPSB3aW5kb3c7XG5leHBvcnRzLldlYkFwcCA9IHRlbGVncmFtV2luZG93LlRlbGVncmFtLldlYkFwcDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNkay5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@twa-dev/sdk/dist/sdk.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@twa-dev/sdk/dist/telegram-web-apps.js":
/*!*************************************************************!*\
  !*** ./node_modules/@twa-dev/sdk/dist/telegram-web-apps.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n// WebView\n(function () {\n    var eventHandlers = {};\n    var locationHash = '';\n    try {\n        locationHash = location.hash.toString();\n    }\n    catch (e) { }\n    var initParams = urlParseHashParams(locationHash);\n    var storedParams = sessionStorageGet('initParams');\n    if (storedParams) {\n        for (var key in storedParams) {\n            if (typeof initParams[key] === 'undefined') {\n                initParams[key] = storedParams[key];\n            }\n        }\n    }\n    sessionStorageSet('initParams', initParams);\n    var isIframe = false, iFrameStyle;\n    try {\n        isIframe = (window.parent != null && window != window.parent);\n        if (isIframe) {\n            window.addEventListener('message', function (event) {\n                if (event.source !== window.parent)\n                    return;\n                try {\n                    var dataParsed = JSON.parse(event.data);\n                }\n                catch (e) {\n                    return;\n                }\n                if (!dataParsed || !dataParsed.eventType) {\n                    return;\n                }\n                if (dataParsed.eventType == 'set_custom_style') {\n                    if (event.origin === 'https://web.telegram.org') {\n                        iFrameStyle.innerHTML = dataParsed.eventData;\n                    }\n                }\n                else if (dataParsed.eventType == 'reload_iframe') {\n                    try {\n                        window.parent.postMessage(JSON.stringify({ eventType: 'iframe_will_reload' }), '*');\n                    }\n                    catch (e) { }\n                    location.reload();\n                }\n                else {\n                    receiveEvent(dataParsed.eventType, dataParsed.eventData);\n                }\n            });\n            iFrameStyle = document.createElement('style');\n            document.head.appendChild(iFrameStyle);\n            try {\n                window.parent.postMessage(JSON.stringify({ eventType: 'iframe_ready', eventData: { reload_supported: true } }), '*');\n            }\n            catch (e) { }\n        }\n    }\n    catch (e) { }\n    function urlSafeDecode(urlencoded) {\n        try {\n            urlencoded = urlencoded.replace(/\\+/g, '%20');\n            return decodeURIComponent(urlencoded);\n        }\n        catch (e) {\n            return urlencoded;\n        }\n    }\n    function urlParseHashParams(locationHash) {\n        locationHash = locationHash.replace(/^#/, '');\n        var params = {};\n        if (!locationHash.length) {\n            return params;\n        }\n        if (locationHash.indexOf('=') < 0 && locationHash.indexOf('?') < 0) {\n            params._path = urlSafeDecode(locationHash);\n            return params;\n        }\n        var qIndex = locationHash.indexOf('?');\n        if (qIndex >= 0) {\n            var pathParam = locationHash.substr(0, qIndex);\n            params._path = urlSafeDecode(pathParam);\n            locationHash = locationHash.substr(qIndex + 1);\n        }\n        var query_params = urlParseQueryString(locationHash);\n        for (var k in query_params) {\n            params[k] = query_params[k];\n        }\n        return params;\n    }\n    function urlParseQueryString(queryString) {\n        var params = {};\n        if (!queryString.length) {\n            return params;\n        }\n        var queryStringParams = queryString.split('&');\n        var i, param, paramName, paramValue;\n        for (i = 0; i < queryStringParams.length; i++) {\n            param = queryStringParams[i].split('=');\n            paramName = urlSafeDecode(param[0]);\n            paramValue = param[1] == null ? null : urlSafeDecode(param[1]);\n            params[paramName] = paramValue;\n        }\n        return params;\n    }\n    // Telegram apps will implement this logic to add service params (e.g. tgShareScoreUrl) to game URL\n    function urlAppendHashParams(url, addHash) {\n        // url looks like 'https://game.com/path?query=1#hash'\n        // addHash looks like 'tgShareScoreUrl=' + encodeURIComponent('tgb://share_game_score?hash=very_long_hash123')\n        var ind = url.indexOf('#');\n        if (ind < 0) {\n            // https://game.com/path -> https://game.com/path#tgShareScoreUrl=etc\n            return url + '#' + addHash;\n        }\n        var curHash = url.substr(ind + 1);\n        if (curHash.indexOf('=') >= 0 || curHash.indexOf('?') >= 0) {\n            // https://game.com/#hash=1 -> https://game.com/#hash=1&tgShareScoreUrl=etc\n            // https://game.com/#path?query -> https://game.com/#path?query&tgShareScoreUrl=etc\n            return url + '&' + addHash;\n        }\n        // https://game.com/#hash -> https://game.com/#hash?tgShareScoreUrl=etc\n        if (curHash.length > 0) {\n            return url + '?' + addHash;\n        }\n        // https://game.com/# -> https://game.com/#tgShareScoreUrl=etc\n        return url + addHash;\n    }\n    function postEvent(eventType, callback, eventData) {\n        if (!callback) {\n            callback = function () { };\n        }\n        if (eventData === undefined) {\n            eventData = '';\n        }\n        console.log('[Telegram.WebView] > postEvent', eventType, eventData);\n        if (window.TelegramWebviewProxy !== undefined) {\n            TelegramWebviewProxy.postEvent(eventType, JSON.stringify(eventData));\n            callback();\n        }\n        else if (window.external && 'notify' in window.external) {\n            window.external.notify(JSON.stringify({ eventType: eventType, eventData: eventData }));\n            callback();\n        }\n        else if (isIframe) {\n            try {\n                var trustedTarget = 'https://web.telegram.org';\n                // For now we don't restrict target, for testing purposes\n                trustedTarget = '*';\n                window.parent.postMessage(JSON.stringify({ eventType: eventType, eventData: eventData }), trustedTarget);\n                callback();\n            }\n            catch (e) {\n                callback(e);\n            }\n        }\n        else {\n            callback({ notAvailable: true });\n        }\n    }\n    ;\n    function receiveEvent(eventType, eventData) {\n        console.log('[Telegram.WebView] < receiveEvent', eventType, eventData);\n        callEventCallbacks(eventType, function (callback) {\n            callback(eventType, eventData);\n        });\n    }\n    function callEventCallbacks(eventType, func) {\n        var curEventHandlers = eventHandlers[eventType];\n        if (curEventHandlers === undefined ||\n            !curEventHandlers.length) {\n            return;\n        }\n        for (var i = 0; i < curEventHandlers.length; i++) {\n            try {\n                func(curEventHandlers[i]);\n            }\n            catch (e) { }\n        }\n    }\n    function onEvent(eventType, callback) {\n        if (eventHandlers[eventType] === undefined) {\n            eventHandlers[eventType] = [];\n        }\n        var index = eventHandlers[eventType].indexOf(callback);\n        if (index === -1) {\n            eventHandlers[eventType].push(callback);\n        }\n    }\n    ;\n    function offEvent(eventType, callback) {\n        if (eventHandlers[eventType] === undefined) {\n            return;\n        }\n        var index = eventHandlers[eventType].indexOf(callback);\n        if (index === -1) {\n            return;\n        }\n        eventHandlers[eventType].splice(index, 1);\n    }\n    ;\n    function openProtoUrl(url) {\n        if (!url.match(/^(web\\+)?tgb?:\\/\\/./)) {\n            return false;\n        }\n        var useIframe = navigator.userAgent.match(/iOS|iPhone OS|iPhone|iPod|iPad/i) ? true : false;\n        if (useIframe) {\n            var iframeContEl = document.getElementById('tgme_frame_cont') || document.body;\n            var iframeEl = document.createElement('iframe');\n            iframeContEl.appendChild(iframeEl);\n            var pageHidden = false;\n            var enableHidden = function () {\n                pageHidden = true;\n            };\n            window.addEventListener('pagehide', enableHidden, false);\n            window.addEventListener('blur', enableHidden, false);\n            if (iframeEl !== null) {\n                iframeEl.src = url;\n            }\n            setTimeout(function () {\n                if (!pageHidden) {\n                    window.location = url;\n                }\n                window.removeEventListener('pagehide', enableHidden, false);\n                window.removeEventListener('blur', enableHidden, false);\n            }, 2000);\n        }\n        else {\n            window.location = url;\n        }\n        return true;\n    }\n    function sessionStorageSet(key, value) {\n        try {\n            window.sessionStorage.setItem('__telegram__' + key, JSON.stringify(value));\n            return true;\n        }\n        catch (e) { }\n        return false;\n    }\n    function sessionStorageGet(key) {\n        try {\n            return JSON.parse(window.sessionStorage.getItem('__telegram__' + key));\n        }\n        catch (e) { }\n        return null;\n    }\n    if (!window.Telegram) {\n        window.Telegram = {};\n    }\n    window.Telegram.WebView = {\n        initParams: initParams,\n        isIframe: isIframe,\n        onEvent: onEvent,\n        offEvent: offEvent,\n        postEvent: postEvent,\n        receiveEvent: receiveEvent,\n        callEventCallbacks: callEventCallbacks\n    };\n    window.Telegram.Utils = {\n        urlSafeDecode: urlSafeDecode,\n        urlParseQueryString: urlParseQueryString,\n        urlParseHashParams: urlParseHashParams,\n        urlAppendHashParams: urlAppendHashParams,\n        sessionStorageSet: sessionStorageSet,\n        sessionStorageGet: sessionStorageGet\n    };\n    // For Windows Phone app\n    window.TelegramGameProxy_receiveEvent = receiveEvent;\n    // App backward compatibility\n    window.TelegramGameProxy = {\n        receiveEvent: receiveEvent\n    };\n})();\n// WebApp\n(function () {\n    var Utils = window.Telegram.Utils;\n    var WebView = window.Telegram.WebView;\n    var initParams = WebView.initParams;\n    var isIframe = WebView.isIframe;\n    var WebApp = {};\n    var webAppInitData = '', webAppInitDataUnsafe = {};\n    var themeParams = {}, colorScheme = 'light';\n    var webAppVersion = '6.0';\n    var webAppPlatform = 'unknown';\n    if (initParams.tgWebAppData && initParams.tgWebAppData.length) {\n        webAppInitData = initParams.tgWebAppData;\n        webAppInitDataUnsafe = Utils.urlParseQueryString(webAppInitData);\n        for (var key in webAppInitDataUnsafe) {\n            var val = webAppInitDataUnsafe[key];\n            try {\n                if (val.substr(0, 1) == '{' && val.substr(-1) == '}' ||\n                    val.substr(0, 1) == '[' && val.substr(-1) == ']') {\n                    webAppInitDataUnsafe[key] = JSON.parse(val);\n                }\n            }\n            catch (e) { }\n        }\n    }\n    if (initParams.tgWebAppThemeParams && initParams.tgWebAppThemeParams.length) {\n        var themeParamsRaw = initParams.tgWebAppThemeParams;\n        try {\n            var theme_params = JSON.parse(themeParamsRaw);\n            if (theme_params) {\n                setThemeParams(theme_params);\n            }\n        }\n        catch (e) { }\n    }\n    var theme_params = Utils.sessionStorageGet('themeParams');\n    if (theme_params) {\n        setThemeParams(theme_params);\n    }\n    if (initParams.tgWebAppVersion) {\n        webAppVersion = initParams.tgWebAppVersion;\n    }\n    if (initParams.tgWebAppPlatform) {\n        webAppPlatform = initParams.tgWebAppPlatform;\n    }\n    function onThemeChanged(eventType, eventData) {\n        if (eventData.theme_params) {\n            setThemeParams(eventData.theme_params);\n            window.Telegram.WebApp.MainButton.setParams({});\n            window.Telegram.WebApp.SecondaryButton.setParams({});\n            updateHeaderColor();\n            updateBackgroundColor();\n            updateBottomBarColor();\n            receiveWebViewEvent('themeChanged');\n        }\n    }\n    var lastWindowHeight = window.innerHeight;\n    function onViewportChanged(eventType, eventData) {\n        if (eventData.height) {\n            window.removeEventListener('resize', onWindowResize);\n            setViewportHeight(eventData);\n        }\n    }\n    function onWindowResize(e) {\n        if (lastWindowHeight != window.innerHeight) {\n            lastWindowHeight = window.innerHeight;\n            receiveWebViewEvent('viewportChanged', {\n                isStateStable: true\n            });\n        }\n    }\n    function linkHandler(e) {\n        if (e.metaKey || e.ctrlKey)\n            return;\n        var el = e.target;\n        while (el.tagName != 'A' && el.parentNode) {\n            el = el.parentNode;\n        }\n        if (el.tagName == 'A' &&\n            el.target != '_blank' &&\n            (el.protocol == 'http:' || el.protocol == 'https:') &&\n            el.hostname == 't.me') {\n            WebApp.openTgLink(el.href);\n            e.preventDefault();\n        }\n    }\n    function strTrim(str) {\n        return str.toString().replace(/^\\s+|\\s+$/g, '');\n    }\n    function receiveWebViewEvent(eventType) {\n        var args = Array.prototype.slice.call(arguments);\n        eventType = args.shift();\n        WebView.callEventCallbacks('webview:' + eventType, function (callback) {\n            callback.apply(WebApp, args);\n        });\n    }\n    function onWebViewEvent(eventType, callback) {\n        WebView.onEvent('webview:' + eventType, callback);\n    }\n    ;\n    function offWebViewEvent(eventType, callback) {\n        WebView.offEvent('webview:' + eventType, callback);\n    }\n    ;\n    function setCssProperty(name, value) {\n        var root = document.documentElement;\n        if (root && root.style && root.style.setProperty) {\n            root.style.setProperty('--tg-' + name, value);\n        }\n    }\n    function setThemeParams(theme_params) {\n        // temp iOS fix\n        if (theme_params.bg_color == '#1c1c1d' &&\n            theme_params.bg_color == theme_params.secondary_bg_color) {\n            theme_params.secondary_bg_color = '#2c2c2e';\n        }\n        var color;\n        for (var key in theme_params) {\n            if (color = parseColorToHex(theme_params[key])) {\n                themeParams[key] = color;\n                if (key == 'bg_color') {\n                    colorScheme = isColorDark(color) ? 'dark' : 'light';\n                    setCssProperty('color-scheme', colorScheme);\n                }\n                key = 'theme-' + key.split('_').join('-');\n                setCssProperty(key, color);\n            }\n        }\n        Utils.sessionStorageSet('themeParams', themeParams);\n    }\n    var webAppCallbacks = {};\n    function generateCallbackId(len) {\n        var tries = 100;\n        while (--tries) {\n            var id = '', chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', chars_len = chars.length;\n            for (var i = 0; i < len; i++) {\n                id += chars[Math.floor(Math.random() * chars_len)];\n            }\n            if (!webAppCallbacks[id]) {\n                webAppCallbacks[id] = {};\n                return id;\n            }\n        }\n        throw Error('WebAppCallbackIdGenerateFailed');\n    }\n    var viewportHeight = false, viewportStableHeight = false, isExpanded = true;\n    function setViewportHeight(data) {\n        if (typeof data !== 'undefined') {\n            isExpanded = !!data.is_expanded;\n            viewportHeight = data.height;\n            if (data.is_state_stable) {\n                viewportStableHeight = data.height;\n            }\n            receiveWebViewEvent('viewportChanged', {\n                isStateStable: !!data.is_state_stable\n            });\n        }\n        var height, stable_height;\n        if (viewportHeight !== false) {\n            height = (viewportHeight - bottomBarHeight) + 'px';\n        }\n        else {\n            height = bottomBarHeight ? 'calc(100vh - ' + bottomBarHeight + 'px)' : '100vh';\n        }\n        if (viewportStableHeight !== false) {\n            stable_height = (viewportStableHeight - bottomBarHeight) + 'px';\n        }\n        else {\n            stable_height = bottomBarHeight ? 'calc(100vh - ' + bottomBarHeight + 'px)' : '100vh';\n        }\n        setCssProperty('viewport-height', height);\n        setCssProperty('viewport-stable-height', stable_height);\n    }\n    var isClosingConfirmationEnabled = false;\n    function setClosingConfirmation(need_confirmation) {\n        if (!versionAtLeast('6.2')) {\n            console.warn('[Telegram.WebApp] Closing confirmation is not supported in version ' + webAppVersion);\n            return;\n        }\n        isClosingConfirmationEnabled = !!need_confirmation;\n        WebView.postEvent('web_app_setup_closing_behavior', false, { need_confirmation: isClosingConfirmationEnabled });\n    }\n    var isVerticalSwipesEnabled = true;\n    function toggleVerticalSwipes(enable_swipes) {\n        if (!versionAtLeast('7.7')) {\n            console.warn('[Telegram.WebApp] Changing swipes behavior is not supported in version ' + webAppVersion);\n            return;\n        }\n        isVerticalSwipesEnabled = !!enable_swipes;\n        WebView.postEvent('web_app_setup_swipe_behavior', false, { allow_vertical_swipe: isVerticalSwipesEnabled });\n    }\n    var headerColorKey = 'bg_color', headerColor = null;\n    function getHeaderColor() {\n        if (headerColorKey == 'secondary_bg_color') {\n            return themeParams.secondary_bg_color;\n        }\n        else if (headerColorKey == 'bg_color') {\n            return themeParams.bg_color;\n        }\n        return headerColor;\n    }\n    function setHeaderColor(color) {\n        if (!versionAtLeast('6.1')) {\n            console.warn('[Telegram.WebApp] Header color is not supported in version ' + webAppVersion);\n            return;\n        }\n        if (!versionAtLeast('6.9')) {\n            if (themeParams.bg_color &&\n                themeParams.bg_color == color) {\n                color = 'bg_color';\n            }\n            else if (themeParams.secondary_bg_color &&\n                themeParams.secondary_bg_color == color) {\n                color = 'secondary_bg_color';\n            }\n        }\n        var head_color = null, color_key = null;\n        if (color == 'bg_color' || color == 'secondary_bg_color') {\n            color_key = color;\n        }\n        else if (versionAtLeast('6.9')) {\n            head_color = parseColorToHex(color);\n            if (!head_color) {\n                console.error('[Telegram.WebApp] Header color format is invalid', color);\n                throw Error('WebAppHeaderColorInvalid');\n            }\n        }\n        if (!versionAtLeast('6.9') &&\n            color_key != 'bg_color' &&\n            color_key != 'secondary_bg_color') {\n            console.error('[Telegram.WebApp] Header color key should be one of Telegram.WebApp.themeParams.bg_color, Telegram.WebApp.themeParams.secondary_bg_color, \\'bg_color\\', \\'secondary_bg_color\\'', color);\n            throw Error('WebAppHeaderColorKeyInvalid');\n        }\n        headerColorKey = color_key;\n        headerColor = head_color;\n        updateHeaderColor();\n    }\n    var appHeaderColorKey = null, appHeaderColor = null;\n    function updateHeaderColor() {\n        if (appHeaderColorKey != headerColorKey ||\n            appHeaderColor != headerColor) {\n            appHeaderColorKey = headerColorKey;\n            appHeaderColor = headerColor;\n            if (appHeaderColor) {\n                WebView.postEvent('web_app_set_header_color', false, { color: headerColor });\n            }\n            else {\n                WebView.postEvent('web_app_set_header_color', false, { color_key: headerColorKey });\n            }\n        }\n    }\n    var backgroundColor = 'bg_color';\n    function getBackgroundColor() {\n        if (backgroundColor == 'secondary_bg_color') {\n            return themeParams.secondary_bg_color;\n        }\n        else if (backgroundColor == 'bg_color') {\n            return themeParams.bg_color;\n        }\n        return backgroundColor;\n    }\n    function setBackgroundColor(color) {\n        if (!versionAtLeast('6.1')) {\n            console.warn('[Telegram.WebApp] Background color is not supported in version ' + webAppVersion);\n            return;\n        }\n        var bg_color;\n        if (color == 'bg_color' || color == 'secondary_bg_color') {\n            bg_color = color;\n        }\n        else {\n            bg_color = parseColorToHex(color);\n            if (!bg_color) {\n                console.error('[Telegram.WebApp] Background color format is invalid', color);\n                throw Error('WebAppBackgroundColorInvalid');\n            }\n        }\n        backgroundColor = bg_color;\n        updateBackgroundColor();\n    }\n    var appBackgroundColor = null;\n    function updateBackgroundColor() {\n        var color = getBackgroundColor();\n        if (appBackgroundColor != color) {\n            appBackgroundColor = color;\n            WebView.postEvent('web_app_set_background_color', false, { color: color });\n        }\n    }\n    var bottomBarColor = 'bottom_bar_bg_color';\n    function getBottomBarColor() {\n        if (bottomBarColor == 'bottom_bar_bg_color') {\n            return themeParams.bottom_bar_bg_color || themeParams.secondary_bg_color || '#ffffff';\n        }\n        else if (bottomBarColor == 'secondary_bg_color') {\n            return themeParams.secondary_bg_color;\n        }\n        else if (bottomBarColor == 'bg_color') {\n            return themeParams.bg_color;\n        }\n        return bottomBarColor;\n    }\n    function setBottomBarColor(color) {\n        if (!versionAtLeast('7.10')) {\n            console.warn('[Telegram.WebApp] Bottom bar color is not supported in version ' + webAppVersion);\n            return;\n        }\n        var bg_color;\n        if (color == 'bg_color' || color == 'secondary_bg_color' || color == 'bottom_bar_bg_color') {\n            bg_color = color;\n        }\n        else {\n            bg_color = parseColorToHex(color);\n            if (!bg_color) {\n                console.error('[Telegram.WebApp] Bottom bar color format is invalid', color);\n                throw Error('WebAppBottomBarColorInvalid');\n            }\n        }\n        bottomBarColor = bg_color;\n        updateBottomBarColor();\n        window.Telegram.WebApp.SecondaryButton.setParams({});\n    }\n    var appBottomBarColor = null;\n    function updateBottomBarColor() {\n        var color = getBottomBarColor();\n        if (appBottomBarColor != color) {\n            appBottomBarColor = color;\n            WebView.postEvent('web_app_set_bottom_bar_color', false, { color: color });\n        }\n        if (initParams.tgWebAppDebug) {\n            updateDebugBottomBar();\n        }\n    }\n    function parseColorToHex(color) {\n        color += '';\n        var match;\n        if (match = /^\\s*#([0-9a-f]{6})\\s*$/i.exec(color)) {\n            return '#' + match[1].toLowerCase();\n        }\n        else if (match = /^\\s*#([0-9a-f])([0-9a-f])([0-9a-f])\\s*$/i.exec(color)) {\n            return ('#' + match[1] + match[1] + match[2] + match[2] + match[3] + match[3]).toLowerCase();\n        }\n        else if (match = /^\\s*rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+\\.{0,1}\\d*))?\\)\\s*$/.exec(color)) {\n            var r = parseInt(match[1]), g = parseInt(match[2]), b = parseInt(match[3]);\n            r = (r < 16 ? '0' : '') + r.toString(16);\n            g = (g < 16 ? '0' : '') + g.toString(16);\n            b = (b < 16 ? '0' : '') + b.toString(16);\n            return '#' + r + g + b;\n        }\n        return false;\n    }\n    function isColorDark(rgb) {\n        rgb = rgb.replace(/[\\s#]/g, '');\n        if (rgb.length == 3) {\n            rgb = rgb[0] + rgb[0] + rgb[1] + rgb[1] + rgb[2] + rgb[2];\n        }\n        var r = parseInt(rgb.substr(0, 2), 16);\n        var g = parseInt(rgb.substr(2, 2), 16);\n        var b = parseInt(rgb.substr(4, 2), 16);\n        var hsp = Math.sqrt(0.299 * (r * r) + 0.587 * (g * g) + 0.114 * (b * b));\n        return hsp < 120;\n    }\n    function versionCompare(v1, v2) {\n        if (typeof v1 !== 'string')\n            v1 = '';\n        if (typeof v2 !== 'string')\n            v2 = '';\n        v1 = v1.replace(/^\\s+|\\s+$/g, '').split('.');\n        v2 = v2.replace(/^\\s+|\\s+$/g, '').split('.');\n        var a = Math.max(v1.length, v2.length), i, p1, p2;\n        for (i = 0; i < a; i++) {\n            p1 = parseInt(v1[i]) || 0;\n            p2 = parseInt(v2[i]) || 0;\n            if (p1 == p2)\n                continue;\n            if (p1 > p2)\n                return 1;\n            return -1;\n        }\n        return 0;\n    }\n    function versionAtLeast(ver) {\n        return versionCompare(webAppVersion, ver) >= 0;\n    }\n    function byteLength(str) {\n        if (window.Blob) {\n            try {\n                return new Blob([str]).size;\n            }\n            catch (e) { }\n        }\n        var s = str.length;\n        for (var i = str.length - 1; i >= 0; i--) {\n            var code = str.charCodeAt(i);\n            if (code > 0x7f && code <= 0x7ff)\n                s++;\n            else if (code > 0x7ff && code <= 0xffff)\n                s += 2;\n            if (code >= 0xdc00 && code <= 0xdfff)\n                i--;\n        }\n        return s;\n    }\n    var BackButton = (function () {\n        var isVisible = false;\n        var backButton = {};\n        Object.defineProperty(backButton, 'isVisible', {\n            set: function (val) { setParams({ is_visible: val }); },\n            get: function () { return isVisible; },\n            enumerable: true\n        });\n        var curButtonState = null;\n        WebView.onEvent('back_button_pressed', onBackButtonPressed);\n        function onBackButtonPressed() {\n            receiveWebViewEvent('backButtonClicked');\n        }\n        function buttonParams() {\n            return { is_visible: isVisible };\n        }\n        function buttonState(btn_params) {\n            if (typeof btn_params === 'undefined') {\n                btn_params = buttonParams();\n            }\n            return JSON.stringify(btn_params);\n        }\n        function buttonCheckVersion() {\n            if (!versionAtLeast('6.1')) {\n                console.warn('[Telegram.WebApp] BackButton is not supported in version ' + webAppVersion);\n                return false;\n            }\n            return true;\n        }\n        function updateButton() {\n            var btn_params = buttonParams();\n            var btn_state = buttonState(btn_params);\n            if (curButtonState === btn_state) {\n                return;\n            }\n            curButtonState = btn_state;\n            WebView.postEvent('web_app_setup_back_button', false, btn_params);\n        }\n        function setParams(params) {\n            if (!buttonCheckVersion()) {\n                return backButton;\n            }\n            if (typeof params.is_visible !== 'undefined') {\n                isVisible = !!params.is_visible;\n            }\n            updateButton();\n            return backButton;\n        }\n        backButton.onClick = function (callback) {\n            if (buttonCheckVersion()) {\n                onWebViewEvent('backButtonClicked', callback);\n            }\n            return backButton;\n        };\n        backButton.offClick = function (callback) {\n            if (buttonCheckVersion()) {\n                offWebViewEvent('backButtonClicked', callback);\n            }\n            return backButton;\n        };\n        backButton.show = function () {\n            return setParams({ is_visible: true });\n        };\n        backButton.hide = function () {\n            return setParams({ is_visible: false });\n        };\n        return backButton;\n    })();\n    var debugBottomBar = null, debugBottomBarBtns = {}, bottomBarHeight = 0;\n    if (initParams.tgWebAppDebug) {\n        debugBottomBar = document.createElement('tg-bottom-bar');\n        var debugBottomBarStyle = {\n            display: 'flex',\n            gap: '7px',\n            font: '600 14px/18px sans-serif',\n            width: '100%',\n            background: getBottomBarColor(),\n            position: 'fixed',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            margin: '0',\n            padding: '7px',\n            textAlign: 'center',\n            boxSizing: 'border-box',\n            zIndex: '10000'\n        };\n        for (var k in debugBottomBarStyle) {\n            debugBottomBar.style[k] = debugBottomBarStyle[k];\n        }\n        document.addEventListener('DOMContentLoaded', function onDomLoaded(event) {\n            document.removeEventListener('DOMContentLoaded', onDomLoaded);\n            document.body.appendChild(debugBottomBar);\n        });\n        var animStyle = document.createElement('style');\n        animStyle.innerHTML = 'tg-bottom-button.shine { position: relative; overflow: hidden; } tg-bottom-button.shine:before { content:\"\"; position: absolute; top: 0; width: 100%; height: 100%; background: linear-gradient(120deg, transparent, rgba(255, 255, 255, .2), transparent); animation: tg-bottom-button-shine 5s ease-in-out infinite; } @-webkit-keyframes tg-bottom-button-shine { 0% {left: -100%;} 12%,100% {left: 100%}} @keyframes tg-bottom-button-shine { 0% {left: -100%;} 12%,100% {left: 100%}}';\n        debugBottomBar.appendChild(animStyle);\n    }\n    function updateDebugBottomBar() {\n        var mainBtn = debugBottomBarBtns.main._bottomButton;\n        var secondaryBtn = debugBottomBarBtns.secondary._bottomButton;\n        if (mainBtn.isVisible || secondaryBtn.isVisible) {\n            debugBottomBar.style.display = 'flex';\n            bottomBarHeight = 58;\n            if (mainBtn.isVisible && secondaryBtn.isVisible) {\n                if (secondaryBtn.position == 'top') {\n                    debugBottomBar.style.flexDirection = 'column-reverse';\n                    bottomBarHeight += 51;\n                }\n                else if (secondaryBtn.position == 'bottom') {\n                    debugBottomBar.style.flexDirection = 'column';\n                    bottomBarHeight += 51;\n                }\n                else if (secondaryBtn.position == 'left') {\n                    debugBottomBar.style.flexDirection = 'row-reverse';\n                }\n                else if (secondaryBtn.position == 'right') {\n                    debugBottomBar.style.flexDirection = 'row';\n                }\n            }\n        }\n        else {\n            debugBottomBar.style.display = 'none';\n            bottomBarHeight = 0;\n        }\n        debugBottomBar.style.background = getBottomBarColor();\n        if (document.documentElement) {\n            document.documentElement.style.boxSizing = 'border-box';\n            document.documentElement.style.paddingBottom = bottomBarHeight + 'px';\n        }\n        setViewportHeight();\n    }\n    var BottomButtonConstructor = function (type) {\n        var isMainButton = (type == 'main');\n        if (isMainButton) {\n            var setupFnName = 'web_app_setup_main_button';\n            var tgEventName = 'main_button_pressed';\n            var webViewEventName = 'mainButtonClicked';\n            var buttonTextDefault = 'Continue';\n            var buttonColorDefault = function () { return themeParams.button_color || '#2481cc'; };\n            var buttonTextColorDefault = function () { return themeParams.button_text_color || '#ffffff'; };\n        }\n        else {\n            var setupFnName = 'web_app_setup_secondary_button';\n            var tgEventName = 'secondary_button_pressed';\n            var webViewEventName = 'secondaryButtonClicked';\n            var buttonTextDefault = 'Cancel';\n            var buttonColorDefault = function () { return getBottomBarColor(); };\n            var buttonTextColorDefault = function () { return themeParams.button_color || '#2481cc'; };\n        }\n        var isVisible = false;\n        var isActive = true;\n        var hasShineEffect = false;\n        var isProgressVisible = false;\n        var buttonType = type;\n        var buttonText = buttonTextDefault;\n        var buttonColor = false;\n        var buttonTextColor = false;\n        var buttonPosition = 'left';\n        var bottomButton = {};\n        Object.defineProperty(bottomButton, 'type', {\n            get: function () { return buttonType; },\n            enumerable: true\n        });\n        Object.defineProperty(bottomButton, 'text', {\n            set: function (val) { bottomButton.setParams({ text: val }); },\n            get: function () { return buttonText; },\n            enumerable: true\n        });\n        Object.defineProperty(bottomButton, 'color', {\n            set: function (val) { bottomButton.setParams({ color: val }); },\n            get: function () { return buttonColor || buttonColorDefault(); },\n            enumerable: true\n        });\n        Object.defineProperty(bottomButton, 'textColor', {\n            set: function (val) { bottomButton.setParams({ text_color: val }); },\n            get: function () { return buttonTextColor || buttonTextColorDefault(); },\n            enumerable: true\n        });\n        Object.defineProperty(bottomButton, 'isVisible', {\n            set: function (val) { bottomButton.setParams({ is_visible: val }); },\n            get: function () { return isVisible; },\n            enumerable: true\n        });\n        Object.defineProperty(bottomButton, 'isProgressVisible', {\n            get: function () { return isProgressVisible; },\n            enumerable: true\n        });\n        Object.defineProperty(bottomButton, 'isActive', {\n            set: function (val) { bottomButton.setParams({ is_active: val }); },\n            get: function () { return isActive; },\n            enumerable: true\n        });\n        Object.defineProperty(bottomButton, 'hasShineEffect', {\n            set: function (val) { bottomButton.setParams({ has_shine_effect: val }); },\n            get: function () { return hasShineEffect; },\n            enumerable: true\n        });\n        if (!isMainButton) {\n            Object.defineProperty(bottomButton, 'position', {\n                set: function (val) { bottomButton.setParams({ position: val }); },\n                get: function () { return buttonPosition; },\n                enumerable: true\n            });\n        }\n        var curButtonState = null;\n        WebView.onEvent(tgEventName, onBottomButtonPressed);\n        var debugBtn = null;\n        if (initParams.tgWebAppDebug) {\n            debugBtn = document.createElement('tg-bottom-button');\n            var debugBtnStyle = {\n                display: 'none',\n                width: '100%',\n                height: '44px',\n                borderRadius: '0',\n                background: 'no-repeat right center',\n                padding: '13px 15px',\n                textAlign: 'center',\n                boxSizing: 'border-box'\n            };\n            for (var k in debugBtnStyle) {\n                debugBtn.style[k] = debugBtnStyle[k];\n            }\n            debugBottomBar.appendChild(debugBtn);\n            debugBtn.addEventListener('click', onBottomButtonPressed, false);\n            debugBtn._bottomButton = bottomButton;\n            debugBottomBarBtns[type] = debugBtn;\n        }\n        function onBottomButtonPressed() {\n            if (isActive) {\n                receiveWebViewEvent(webViewEventName);\n            }\n        }\n        function buttonParams() {\n            var color = bottomButton.color;\n            var text_color = bottomButton.textColor;\n            if (isVisible) {\n                var params = {\n                    is_visible: true,\n                    is_active: isActive,\n                    is_progress_visible: isProgressVisible,\n                    text: buttonText,\n                    color: color,\n                    text_color: text_color,\n                    has_shine_effect: hasShineEffect && isActive && !isProgressVisible\n                };\n                if (!isMainButton) {\n                    params.position = buttonPosition;\n                }\n            }\n            else {\n                var params = {\n                    is_visible: false\n                };\n            }\n            return params;\n        }\n        function buttonState(btn_params) {\n            if (typeof btn_params === 'undefined') {\n                btn_params = buttonParams();\n            }\n            return JSON.stringify(btn_params);\n        }\n        function updateButton() {\n            var btn_params = buttonParams();\n            var btn_state = buttonState(btn_params);\n            if (curButtonState === btn_state) {\n                return;\n            }\n            curButtonState = btn_state;\n            WebView.postEvent(setupFnName, false, btn_params);\n            if (initParams.tgWebAppDebug) {\n                updateDebugButton(btn_params);\n            }\n        }\n        function updateDebugButton(btn_params) {\n            if (btn_params.is_visible) {\n                debugBtn.style.display = 'block';\n                debugBtn.style.opacity = btn_params.is_active ? '1' : '0.8';\n                debugBtn.style.cursor = btn_params.is_active ? 'pointer' : 'auto';\n                debugBtn.disabled = !btn_params.is_active;\n                debugBtn.innerText = btn_params.text;\n                debugBtn.className = btn_params.has_shine_effect ? 'shine' : '';\n                debugBtn.style.backgroundImage = btn_params.is_progress_visible ? \"url('data:image/svg+xml,\" + encodeURIComponent('<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewport=\"0 0 48 48\" width=\"48px\" height=\"48px\"><circle cx=\"50%\" cy=\"50%\" stroke=\"' + btn_params.text_color + '\" stroke-width=\"2.25\" stroke-linecap=\"round\" fill=\"none\" stroke-dashoffset=\"106\" r=\"9\" stroke-dasharray=\"56.52\" rotate=\"-90\"><animate attributeName=\"stroke-dashoffset\" attributeType=\"XML\" dur=\"360s\" from=\"0\" to=\"12500\" repeatCount=\"indefinite\"></animate><animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" dur=\"1s\" from=\"-90 24 24\" to=\"630 24 24\" repeatCount=\"indefinite\"></animateTransform></circle></svg>') + \"')\" : 'none';\n                debugBtn.style.backgroundColor = btn_params.color;\n                debugBtn.style.color = btn_params.text_color;\n            }\n            else {\n                debugBtn.style.display = 'none';\n            }\n            updateDebugBottomBar();\n        }\n        function setParams(params) {\n            if (typeof params.text !== 'undefined') {\n                var text = strTrim(params.text);\n                if (!text.length) {\n                    console.error('[Telegram.WebApp] Bottom button text is required', params.text);\n                    throw Error('WebAppBottomButtonParamInvalid');\n                }\n                if (text.length > 64) {\n                    console.error('[Telegram.WebApp] Bottom button text is too long', text);\n                    throw Error('WebAppBottomButtonParamInvalid');\n                }\n                buttonText = text;\n            }\n            if (typeof params.color !== 'undefined') {\n                if (params.color === false ||\n                    params.color === null) {\n                    buttonColor = false;\n                }\n                else {\n                    var color = parseColorToHex(params.color);\n                    if (!color) {\n                        console.error('[Telegram.WebApp] Bottom button color format is invalid', params.color);\n                        throw Error('WebAppBottomButtonParamInvalid');\n                    }\n                    buttonColor = color;\n                }\n            }\n            if (typeof params.text_color !== 'undefined') {\n                if (params.text_color === false ||\n                    params.text_color === null) {\n                    buttonTextColor = false;\n                }\n                else {\n                    var text_color = parseColorToHex(params.text_color);\n                    if (!text_color) {\n                        console.error('[Telegram.WebApp] Bottom button text color format is invalid', params.text_color);\n                        throw Error('WebAppBottomButtonParamInvalid');\n                    }\n                    buttonTextColor = text_color;\n                }\n            }\n            if (typeof params.is_visible !== 'undefined') {\n                if (params.is_visible &&\n                    !bottomButton.text.length) {\n                    console.error('[Telegram.WebApp] Bottom button text is required');\n                    throw Error('WebAppBottomButtonParamInvalid');\n                }\n                isVisible = !!params.is_visible;\n            }\n            if (typeof params.has_shine_effect !== 'undefined') {\n                hasShineEffect = !!params.has_shine_effect;\n            }\n            if (!isMainButton && typeof params.position !== 'undefined') {\n                if (params.position != 'left' && params.position != 'right' &&\n                    params.position != 'top' && params.position != 'bottom') {\n                    console.error('[Telegram.WebApp] Bottom button posiition is invalid', params.position);\n                    throw Error('WebAppBottomButtonParamInvalid');\n                }\n                buttonPosition = params.position;\n            }\n            if (typeof params.is_active !== 'undefined') {\n                isActive = !!params.is_active;\n            }\n            updateButton();\n            return bottomButton;\n        }\n        bottomButton.setText = function (text) {\n            return bottomButton.setParams({ text: text });\n        };\n        bottomButton.onClick = function (callback) {\n            onWebViewEvent(webViewEventName, callback);\n            return bottomButton;\n        };\n        bottomButton.offClick = function (callback) {\n            offWebViewEvent(webViewEventName, callback);\n            return bottomButton;\n        };\n        bottomButton.show = function () {\n            return bottomButton.setParams({ is_visible: true });\n        };\n        bottomButton.hide = function () {\n            return bottomButton.setParams({ is_visible: false });\n        };\n        bottomButton.enable = function () {\n            return bottomButton.setParams({ is_active: true });\n        };\n        bottomButton.disable = function () {\n            return bottomButton.setParams({ is_active: false });\n        };\n        bottomButton.showProgress = function (leaveActive) {\n            isActive = !!leaveActive;\n            isProgressVisible = true;\n            updateButton();\n            return bottomButton;\n        };\n        bottomButton.hideProgress = function () {\n            if (!bottomButton.isActive) {\n                isActive = true;\n            }\n            isProgressVisible = false;\n            updateButton();\n            return bottomButton;\n        };\n        bottomButton.setParams = setParams;\n        return bottomButton;\n    };\n    var MainButton = BottomButtonConstructor('main');\n    var SecondaryButton = BottomButtonConstructor('secondary');\n    var SettingsButton = (function () {\n        var isVisible = false;\n        var settingsButton = {};\n        Object.defineProperty(settingsButton, 'isVisible', {\n            set: function (val) { setParams({ is_visible: val }); },\n            get: function () { return isVisible; },\n            enumerable: true\n        });\n        var curButtonState = null;\n        WebView.onEvent('settings_button_pressed', onSettingsButtonPressed);\n        function onSettingsButtonPressed() {\n            receiveWebViewEvent('settingsButtonClicked');\n        }\n        function buttonParams() {\n            return { is_visible: isVisible };\n        }\n        function buttonState(btn_params) {\n            if (typeof btn_params === 'undefined') {\n                btn_params = buttonParams();\n            }\n            return JSON.stringify(btn_params);\n        }\n        function buttonCheckVersion() {\n            if (!versionAtLeast('6.10')) {\n                console.warn('[Telegram.WebApp] SettingsButton is not supported in version ' + webAppVersion);\n                return false;\n            }\n            return true;\n        }\n        function updateButton() {\n            var btn_params = buttonParams();\n            var btn_state = buttonState(btn_params);\n            if (curButtonState === btn_state) {\n                return;\n            }\n            curButtonState = btn_state;\n            WebView.postEvent('web_app_setup_settings_button', false, btn_params);\n        }\n        function setParams(params) {\n            if (!buttonCheckVersion()) {\n                return settingsButton;\n            }\n            if (typeof params.is_visible !== 'undefined') {\n                isVisible = !!params.is_visible;\n            }\n            updateButton();\n            return settingsButton;\n        }\n        settingsButton.onClick = function (callback) {\n            if (buttonCheckVersion()) {\n                onWebViewEvent('settingsButtonClicked', callback);\n            }\n            return settingsButton;\n        };\n        settingsButton.offClick = function (callback) {\n            if (buttonCheckVersion()) {\n                offWebViewEvent('settingsButtonClicked', callback);\n            }\n            return settingsButton;\n        };\n        settingsButton.show = function () {\n            return setParams({ is_visible: true });\n        };\n        settingsButton.hide = function () {\n            return setParams({ is_visible: false });\n        };\n        return settingsButton;\n    })();\n    var HapticFeedback = (function () {\n        var hapticFeedback = {};\n        function triggerFeedback(params) {\n            if (!versionAtLeast('6.1')) {\n                console.warn('[Telegram.WebApp] HapticFeedback is not supported in version ' + webAppVersion);\n                return hapticFeedback;\n            }\n            if (params.type == 'impact') {\n                if (params.impact_style != 'light' &&\n                    params.impact_style != 'medium' &&\n                    params.impact_style != 'heavy' &&\n                    params.impact_style != 'rigid' &&\n                    params.impact_style != 'soft') {\n                    console.error('[Telegram.WebApp] Haptic impact style is invalid', params.impact_style);\n                    throw Error('WebAppHapticImpactStyleInvalid');\n                }\n            }\n            else if (params.type == 'notification') {\n                if (params.notification_type != 'error' &&\n                    params.notification_type != 'success' &&\n                    params.notification_type != 'warning') {\n                    console.error('[Telegram.WebApp] Haptic notification type is invalid', params.notification_type);\n                    throw Error('WebAppHapticNotificationTypeInvalid');\n                }\n            }\n            else if (params.type == 'selection_change') {\n                // no params needed\n            }\n            else {\n                console.error('[Telegram.WebApp] Haptic feedback type is invalid', params.type);\n                throw Error('WebAppHapticFeedbackTypeInvalid');\n            }\n            WebView.postEvent('web_app_trigger_haptic_feedback', false, params);\n            return hapticFeedback;\n        }\n        hapticFeedback.impactOccurred = function (style) {\n            return triggerFeedback({ type: 'impact', impact_style: style });\n        };\n        hapticFeedback.notificationOccurred = function (type) {\n            return triggerFeedback({ type: 'notification', notification_type: type });\n        };\n        hapticFeedback.selectionChanged = function () {\n            return triggerFeedback({ type: 'selection_change' });\n        };\n        return hapticFeedback;\n    })();\n    var CloudStorage = (function () {\n        var cloudStorage = {};\n        function invokeStorageMethod(method, params, callback) {\n            if (!versionAtLeast('6.9')) {\n                console.error('[Telegram.WebApp] CloudStorage is not supported in version ' + webAppVersion);\n                throw Error('WebAppMethodUnsupported');\n            }\n            invokeCustomMethod(method, params, callback);\n            return cloudStorage;\n        }\n        cloudStorage.setItem = function (key, value, callback) {\n            return invokeStorageMethod('saveStorageValue', { key: key, value: value }, callback);\n        };\n        cloudStorage.getItem = function (key, callback) {\n            return cloudStorage.getItems([key], callback ? function (err, res) {\n                if (err)\n                    callback(err);\n                else\n                    callback(null, res[key]);\n            } : null);\n        };\n        cloudStorage.getItems = function (keys, callback) {\n            return invokeStorageMethod('getStorageValues', { keys: keys }, callback);\n        };\n        cloudStorage.removeItem = function (key, callback) {\n            return cloudStorage.removeItems([key], callback);\n        };\n        cloudStorage.removeItems = function (keys, callback) {\n            return invokeStorageMethod('deleteStorageValues', { keys: keys }, callback);\n        };\n        cloudStorage.getKeys = function (callback) {\n            return invokeStorageMethod('getStorageKeys', {}, callback);\n        };\n        return cloudStorage;\n    })();\n    var BiometricManager = (function () {\n        var isInited = false;\n        var isBiometricAvailable = false;\n        var biometricType = 'unknown';\n        var isAccessRequested = false;\n        var isAccessGranted = false;\n        var isBiometricTokenSaved = false;\n        var deviceId = '';\n        var biometricManager = {};\n        Object.defineProperty(biometricManager, 'isInited', {\n            get: function () { return isInited; },\n            enumerable: true\n        });\n        Object.defineProperty(biometricManager, 'isBiometricAvailable', {\n            get: function () { return isInited && isBiometricAvailable; },\n            enumerable: true\n        });\n        Object.defineProperty(biometricManager, 'biometricType', {\n            get: function () { return biometricType || 'unknown'; },\n            enumerable: true\n        });\n        Object.defineProperty(biometricManager, 'isAccessRequested', {\n            get: function () { return isAccessRequested; },\n            enumerable: true\n        });\n        Object.defineProperty(biometricManager, 'isAccessGranted', {\n            get: function () { return isAccessRequested && isAccessGranted; },\n            enumerable: true\n        });\n        Object.defineProperty(biometricManager, 'isBiometricTokenSaved', {\n            get: function () { return isBiometricTokenSaved; },\n            enumerable: true\n        });\n        Object.defineProperty(biometricManager, 'deviceId', {\n            get: function () { return deviceId || ''; },\n            enumerable: true\n        });\n        var initRequestState = { callbacks: [] };\n        var accessRequestState = false;\n        var authRequestState = false;\n        var tokenRequestState = false;\n        WebView.onEvent('biometry_info_received', onBiometryInfoReceived);\n        WebView.onEvent('biometry_auth_requested', onBiometryAuthRequested);\n        WebView.onEvent('biometry_token_updated', onBiometryTokenUpdated);\n        function onBiometryInfoReceived(eventType, eventData) {\n            isInited = true;\n            if (eventData.available) {\n                isBiometricAvailable = true;\n                biometricType = eventData.type || 'unknown';\n                if (eventData.access_requested) {\n                    isAccessRequested = true;\n                    isAccessGranted = !!eventData.access_granted;\n                    isBiometricTokenSaved = !!eventData.token_saved;\n                }\n                else {\n                    isAccessRequested = false;\n                    isAccessGranted = false;\n                    isBiometricTokenSaved = false;\n                }\n            }\n            else {\n                isBiometricAvailable = false;\n                biometricType = 'unknown';\n                isAccessRequested = false;\n                isAccessGranted = false;\n                isBiometricTokenSaved = false;\n            }\n            deviceId = eventData.device_id || '';\n            if (initRequestState.callbacks.length > 0) {\n                for (var i = 0; i < initRequestState.callbacks.length; i++) {\n                    var callback = initRequestState.callbacks[i];\n                    callback();\n                }\n            }\n            if (accessRequestState) {\n                var state = accessRequestState;\n                accessRequestState = false;\n                if (state.callback) {\n                    state.callback(isAccessGranted);\n                }\n            }\n            receiveWebViewEvent('biometricManagerUpdated');\n        }\n        function onBiometryAuthRequested(eventType, eventData) {\n            var isAuthenticated = (eventData.status == 'authorized'), biometricToken = eventData.token || '';\n            if (authRequestState) {\n                var state = authRequestState;\n                authRequestState = false;\n                if (state.callback) {\n                    state.callback(isAuthenticated, isAuthenticated ? biometricToken : null);\n                }\n            }\n            receiveWebViewEvent('biometricAuthRequested', isAuthenticated ? {\n                isAuthenticated: true,\n                biometricToken: biometricToken\n            } : {\n                isAuthenticated: false\n            });\n        }\n        function onBiometryTokenUpdated(eventType, eventData) {\n            var applied = false;\n            if (isBiometricAvailable &&\n                isAccessRequested) {\n                if (eventData.status == 'updated') {\n                    isBiometricTokenSaved = true;\n                    applied = true;\n                }\n                else if (eventData.status == 'removed') {\n                    isBiometricTokenSaved = false;\n                    applied = true;\n                }\n            }\n            if (tokenRequestState) {\n                var state = tokenRequestState;\n                tokenRequestState = false;\n                if (state.callback) {\n                    state.callback(applied);\n                }\n            }\n            receiveWebViewEvent('biometricTokenUpdated', {\n                isUpdated: applied\n            });\n        }\n        function checkVersion() {\n            if (!versionAtLeast('7.2')) {\n                console.warn('[Telegram.WebApp] BiometricManager is not supported in version ' + webAppVersion);\n                return false;\n            }\n            return true;\n        }\n        function checkInit() {\n            if (!isInited) {\n                console.error('[Telegram.WebApp] BiometricManager should be inited before using.');\n                throw Error('WebAppBiometricManagerNotInited');\n            }\n            return true;\n        }\n        biometricManager.init = function (callback) {\n            if (!checkVersion()) {\n                return biometricManager;\n            }\n            if (isInited) {\n                return biometricManager;\n            }\n            if (callback) {\n                initRequestState.callbacks.push(callback);\n            }\n            WebView.postEvent('web_app_biometry_get_info', false);\n            return biometricManager;\n        };\n        biometricManager.requestAccess = function (params, callback) {\n            if (!checkVersion()) {\n                return biometricManager;\n            }\n            checkInit();\n            if (!isBiometricAvailable) {\n                console.error('[Telegram.WebApp] Biometrics is not available on this device.');\n                throw Error('WebAppBiometricManagerBiometricsNotAvailable');\n            }\n            if (accessRequestState) {\n                console.error('[Telegram.WebApp] Access is already requested');\n                throw Error('WebAppBiometricManagerAccessRequested');\n            }\n            var popup_params = {};\n            if (typeof params.reason !== 'undefined') {\n                var reason = strTrim(params.reason);\n                if (reason.length > 128) {\n                    console.error('[Telegram.WebApp] Biometric reason is too long', reason);\n                    throw Error('WebAppBiometricRequestAccessParamInvalid');\n                }\n                if (reason.length > 0) {\n                    popup_params.reason = reason;\n                }\n            }\n            accessRequestState = {\n                callback: callback\n            };\n            WebView.postEvent('web_app_biometry_request_access', false, popup_params);\n            return biometricManager;\n        };\n        biometricManager.authenticate = function (params, callback) {\n            if (!checkVersion()) {\n                return biometricManager;\n            }\n            checkInit();\n            if (!isBiometricAvailable) {\n                console.error('[Telegram.WebApp] Biometrics is not available on this device.');\n                throw Error('WebAppBiometricManagerBiometricsNotAvailable');\n            }\n            if (!isAccessGranted) {\n                console.error('[Telegram.WebApp] Biometric access was not granted by the user.');\n                throw Error('WebAppBiometricManagerBiometricAccessNotGranted');\n            }\n            if (authRequestState) {\n                console.error('[Telegram.WebApp] Authentication request is already in progress.');\n                throw Error('WebAppBiometricManagerAuthenticationRequested');\n            }\n            var popup_params = {};\n            if (typeof params.reason !== 'undefined') {\n                var reason = strTrim(params.reason);\n                if (reason.length > 128) {\n                    console.error('[Telegram.WebApp] Biometric reason is too long', reason);\n                    throw Error('WebAppBiometricRequestAccessParamInvalid');\n                }\n                if (reason.length > 0) {\n                    popup_params.reason = reason;\n                }\n            }\n            authRequestState = {\n                callback: callback\n            };\n            WebView.postEvent('web_app_biometry_request_auth', false, popup_params);\n            return biometricManager;\n        };\n        biometricManager.updateBiometricToken = function (token, callback) {\n            if (!checkVersion()) {\n                return biometricManager;\n            }\n            token = token || '';\n            if (token.length > 1024) {\n                console.error('[Telegram.WebApp] Token is too long', token);\n                throw Error('WebAppBiometricManagerTokenInvalid');\n            }\n            checkInit();\n            if (!isBiometricAvailable) {\n                console.error('[Telegram.WebApp] Biometrics is not available on this device.');\n                throw Error('WebAppBiometricManagerBiometricsNotAvailable');\n            }\n            if (!isAccessGranted) {\n                console.error('[Telegram.WebApp] Biometric access was not granted by the user.');\n                throw Error('WebAppBiometricManagerBiometricAccessNotGranted');\n            }\n            if (tokenRequestState) {\n                console.error('[Telegram.WebApp] Token request is already in progress.');\n                throw Error('WebAppBiometricManagerTokenUpdateRequested');\n            }\n            tokenRequestState = {\n                callback: callback\n            };\n            WebView.postEvent('web_app_biometry_update_token', false, { token: token });\n            return biometricManager;\n        };\n        biometricManager.openSettings = function () {\n            if (!checkVersion()) {\n                return biometricManager;\n            }\n            checkInit();\n            if (!isBiometricAvailable) {\n                console.error('[Telegram.WebApp] Biometrics is not available on this device.');\n                throw Error('WebAppBiometricManagerBiometricsNotAvailable');\n            }\n            if (!isAccessRequested) {\n                console.error('[Telegram.WebApp] Biometric access was not requested yet.');\n                throw Error('WebAppBiometricManagerBiometricsAccessNotRequested');\n            }\n            if (isAccessGranted) {\n                console.warn('[Telegram.WebApp] Biometric access was granted by the user, no need to go to settings.');\n                return biometricManager;\n            }\n            WebView.postEvent('web_app_biometry_open_settings', false);\n            return biometricManager;\n        };\n        return biometricManager;\n    })();\n    var webAppInvoices = {};\n    function onInvoiceClosed(eventType, eventData) {\n        if (eventData.slug && webAppInvoices[eventData.slug]) {\n            var invoiceData = webAppInvoices[eventData.slug];\n            delete webAppInvoices[eventData.slug];\n            if (invoiceData.callback) {\n                invoiceData.callback(eventData.status);\n            }\n            receiveWebViewEvent('invoiceClosed', {\n                url: invoiceData.url,\n                status: eventData.status\n            });\n        }\n    }\n    var webAppPopupOpened = false;\n    function onPopupClosed(eventType, eventData) {\n        if (webAppPopupOpened) {\n            var popupData = webAppPopupOpened;\n            webAppPopupOpened = false;\n            var button_id = null;\n            if (typeof eventData.button_id !== 'undefined') {\n                button_id = eventData.button_id;\n            }\n            if (popupData.callback) {\n                popupData.callback(button_id);\n            }\n            receiveWebViewEvent('popupClosed', {\n                button_id: button_id\n            });\n        }\n    }\n    var webAppScanQrPopupOpened = false;\n    function onQrTextReceived(eventType, eventData) {\n        if (webAppScanQrPopupOpened) {\n            var popupData = webAppScanQrPopupOpened;\n            var data = null;\n            if (typeof eventData.data !== 'undefined') {\n                data = eventData.data;\n            }\n            if (popupData.callback) {\n                if (popupData.callback(data)) {\n                    webAppScanQrPopupOpened = false;\n                    WebView.postEvent('web_app_close_scan_qr_popup', false);\n                }\n            }\n            receiveWebViewEvent('qrTextReceived', {\n                data: data\n            });\n        }\n    }\n    function onScanQrPopupClosed(eventType, eventData) {\n        webAppScanQrPopupOpened = false;\n        receiveWebViewEvent('scanQrPopupClosed');\n    }\n    function onClipboardTextReceived(eventType, eventData) {\n        if (eventData.req_id && webAppCallbacks[eventData.req_id]) {\n            var requestData = webAppCallbacks[eventData.req_id];\n            delete webAppCallbacks[eventData.req_id];\n            var data = null;\n            if (typeof eventData.data !== 'undefined') {\n                data = eventData.data;\n            }\n            if (requestData.callback) {\n                requestData.callback(data);\n            }\n            receiveWebViewEvent('clipboardTextReceived', {\n                data: data\n            });\n        }\n    }\n    var WebAppWriteAccessRequested = false;\n    function onWriteAccessRequested(eventType, eventData) {\n        if (WebAppWriteAccessRequested) {\n            var requestData = WebAppWriteAccessRequested;\n            WebAppWriteAccessRequested = false;\n            if (requestData.callback) {\n                requestData.callback(eventData.status == 'allowed');\n            }\n            receiveWebViewEvent('writeAccessRequested', {\n                status: eventData.status\n            });\n        }\n    }\n    function getRequestedContact(callback, timeout) {\n        var reqTo, fallbackTo, reqDelay = 0;\n        var reqInvoke = function () {\n            invokeCustomMethod('getRequestedContact', {}, function (err, res) {\n                if (res && res.length) {\n                    clearTimeout(fallbackTo);\n                    callback(res);\n                }\n                else {\n                    reqDelay += 50;\n                    reqTo = setTimeout(reqInvoke, reqDelay);\n                }\n            });\n        };\n        var fallbackInvoke = function () {\n            clearTimeout(reqTo);\n            callback('');\n        };\n        fallbackTo = setTimeout(fallbackInvoke, timeout);\n        reqInvoke();\n    }\n    var WebAppContactRequested = false;\n    function onPhoneRequested(eventType, eventData) {\n        if (WebAppContactRequested) {\n            var requestData = WebAppContactRequested;\n            WebAppContactRequested = false;\n            var requestSent = eventData.status == 'sent';\n            var webViewEvent = {\n                status: eventData.status\n            };\n            if (requestSent) {\n                getRequestedContact(function (res) {\n                    if (res && res.length) {\n                        webViewEvent.response = res;\n                        webViewEvent.responseUnsafe = Utils.urlParseQueryString(res);\n                        for (var key in webViewEvent.responseUnsafe) {\n                            var val = webViewEvent.responseUnsafe[key];\n                            try {\n                                if (val.substr(0, 1) == '{' && val.substr(-1) == '}' ||\n                                    val.substr(0, 1) == '[' && val.substr(-1) == ']') {\n                                    webViewEvent.responseUnsafe[key] = JSON.parse(val);\n                                }\n                            }\n                            catch (e) { }\n                        }\n                    }\n                    if (requestData.callback) {\n                        requestData.callback(requestSent, webViewEvent);\n                    }\n                    receiveWebViewEvent('contactRequested', webViewEvent);\n                }, 3000);\n            }\n            else {\n                if (requestData.callback) {\n                    requestData.callback(requestSent, webViewEvent);\n                }\n                receiveWebViewEvent('contactRequested', webViewEvent);\n            }\n        }\n    }\n    function onCustomMethodInvoked(eventType, eventData) {\n        if (eventData.req_id && webAppCallbacks[eventData.req_id]) {\n            var requestData = webAppCallbacks[eventData.req_id];\n            delete webAppCallbacks[eventData.req_id];\n            var res = null, err = null;\n            if (typeof eventData.result !== 'undefined') {\n                res = eventData.result;\n            }\n            if (typeof eventData.error !== 'undefined') {\n                err = eventData.error;\n            }\n            if (requestData.callback) {\n                requestData.callback(err, res);\n            }\n        }\n    }\n    function invokeCustomMethod(method, params, callback) {\n        if (!versionAtLeast('6.9')) {\n            console.error('[Telegram.WebApp] Method invokeCustomMethod is not supported in version ' + webAppVersion);\n            throw Error('WebAppMethodUnsupported');\n        }\n        var req_id = generateCallbackId(16);\n        var req_params = { req_id: req_id, method: method, params: params || {} };\n        webAppCallbacks[req_id] = {\n            callback: callback\n        };\n        WebView.postEvent('web_app_invoke_custom_method', false, req_params);\n    }\n    ;\n    if (!window.Telegram) {\n        window.Telegram = {};\n    }\n    Object.defineProperty(WebApp, 'initData', {\n        get: function () { return webAppInitData; },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'initDataUnsafe', {\n        get: function () { return webAppInitDataUnsafe; },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'version', {\n        get: function () { return webAppVersion; },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'platform', {\n        get: function () { return webAppPlatform; },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'colorScheme', {\n        get: function () { return colorScheme; },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'themeParams', {\n        get: function () { return themeParams; },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'isExpanded', {\n        get: function () { return isExpanded; },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'viewportHeight', {\n        get: function () { return (viewportHeight === false ? window.innerHeight : viewportHeight) - bottomBarHeight; },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'viewportStableHeight', {\n        get: function () { return (viewportStableHeight === false ? window.innerHeight : viewportStableHeight) - bottomBarHeight; },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'isClosingConfirmationEnabled', {\n        set: function (val) { setClosingConfirmation(val); },\n        get: function () { return isClosingConfirmationEnabled; },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'isVerticalSwipesEnabled', {\n        set: function (val) { toggleVerticalSwipes(val); },\n        get: function () { return isVerticalSwipesEnabled; },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'headerColor', {\n        set: function (val) { setHeaderColor(val); },\n        get: function () { return getHeaderColor(); },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'backgroundColor', {\n        set: function (val) { setBackgroundColor(val); },\n        get: function () { return getBackgroundColor(); },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'bottomBarColor', {\n        set: function (val) { setBottomBarColor(val); },\n        get: function () { return getBottomBarColor(); },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'BackButton', {\n        value: BackButton,\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'MainButton', {\n        value: MainButton,\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'SecondaryButton', {\n        value: SecondaryButton,\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'SettingsButton', {\n        value: SettingsButton,\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'HapticFeedback', {\n        value: HapticFeedback,\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'CloudStorage', {\n        value: CloudStorage,\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'BiometricManager', {\n        value: BiometricManager,\n        enumerable: true\n    });\n    WebApp.setHeaderColor = function (color_key) {\n        WebApp.headerColor = color_key;\n    };\n    WebApp.setBackgroundColor = function (color) {\n        WebApp.backgroundColor = color;\n    };\n    WebApp.setBottomBarColor = function (color) {\n        WebApp.bottomBarColor = color;\n    };\n    WebApp.enableClosingConfirmation = function () {\n        WebApp.isClosingConfirmationEnabled = true;\n    };\n    WebApp.disableClosingConfirmation = function () {\n        WebApp.isClosingConfirmationEnabled = false;\n    };\n    WebApp.enableVerticalSwipes = function () {\n        WebApp.isVerticalSwipesEnabled = true;\n    };\n    WebApp.disableVerticalSwipes = function () {\n        WebApp.isVerticalSwipesEnabled = false;\n    };\n    WebApp.isVersionAtLeast = function (ver) {\n        return versionAtLeast(ver);\n    };\n    WebApp.onEvent = function (eventType, callback) {\n        onWebViewEvent(eventType, callback);\n    };\n    WebApp.offEvent = function (eventType, callback) {\n        offWebViewEvent(eventType, callback);\n    };\n    WebApp.sendData = function (data) {\n        if (!data || !data.length) {\n            console.error('[Telegram.WebApp] Data is required', data);\n            throw Error('WebAppDataInvalid');\n        }\n        if (byteLength(data) > 4096) {\n            console.error('[Telegram.WebApp] Data is too long', data);\n            throw Error('WebAppDataInvalid');\n        }\n        WebView.postEvent('web_app_data_send', false, { data: data });\n    };\n    WebApp.switchInlineQuery = function (query, choose_chat_types) {\n        if (!versionAtLeast('6.6')) {\n            console.error('[Telegram.WebApp] Method switchInlineQuery is not supported in version ' + webAppVersion);\n            throw Error('WebAppMethodUnsupported');\n        }\n        if (!initParams.tgWebAppBotInline) {\n            console.error('[Telegram.WebApp] Inline mode is disabled for this bot. Read more about inline mode: https://core.telegram.org/bots/inline');\n            throw Error('WebAppInlineModeDisabled');\n        }\n        query = query || '';\n        if (query.length > 256) {\n            console.error('[Telegram.WebApp] Inline query is too long', query);\n            throw Error('WebAppInlineQueryInvalid');\n        }\n        var chat_types = [];\n        if (choose_chat_types) {\n            if (!Array.isArray(choose_chat_types)) {\n                console.error('[Telegram.WebApp] Choose chat types should be an array', choose_chat_types);\n                throw Error('WebAppInlineChooseChatTypesInvalid');\n            }\n            var good_types = { users: 1, bots: 1, groups: 1, channels: 1 };\n            for (var i = 0; i < choose_chat_types.length; i++) {\n                var chat_type = choose_chat_types[i];\n                if (!good_types[chat_type]) {\n                    console.error('[Telegram.WebApp] Choose chat type is invalid', chat_type);\n                    throw Error('WebAppInlineChooseChatTypeInvalid');\n                }\n                if (good_types[chat_type] != 2) {\n                    good_types[chat_type] = 2;\n                    chat_types.push(chat_type);\n                }\n            }\n        }\n        WebView.postEvent('web_app_switch_inline_query', false, { query: query, chat_types: chat_types });\n    };\n    WebApp.openLink = function (url, options) {\n        var a = document.createElement('A');\n        a.href = url;\n        if (a.protocol != 'http:' &&\n            a.protocol != 'https:') {\n            console.error('[Telegram.WebApp] Url protocol is not supported', url);\n            throw Error('WebAppTgUrlInvalid');\n        }\n        var url = a.href;\n        options = options || {};\n        if (versionAtLeast('6.1')) {\n            var req_params = { url: url };\n            if (versionAtLeast('6.4') && options.try_instant_view) {\n                req_params.try_instant_view = true;\n            }\n            if (versionAtLeast('7.6') && options.try_browser) {\n                req_params.try_browser = options.try_browser;\n            }\n            WebView.postEvent('web_app_open_link', false, req_params);\n        }\n        else {\n            window.open(url, '_blank');\n        }\n    };\n    WebApp.openTelegramLink = function (url) {\n        var a = document.createElement('A');\n        a.href = url;\n        if (a.protocol != 'http:' &&\n            a.protocol != 'https:') {\n            console.error('[Telegram.WebApp] Url protocol is not supported', url);\n            throw Error('WebAppTgUrlInvalid');\n        }\n        if (a.hostname != 't.me') {\n            console.error('[Telegram.WebApp] Url host is not supported', url);\n            throw Error('WebAppTgUrlInvalid');\n        }\n        var path_full = a.pathname + a.search;\n        if (isIframe || versionAtLeast('6.1')) {\n            WebView.postEvent('web_app_open_tg_link', false, { path_full: path_full });\n        }\n        else {\n            location.href = 'https://t.me' + path_full;\n        }\n    };\n    WebApp.openInvoice = function (url, callback) {\n        var a = document.createElement('A'), match, slug;\n        a.href = url;\n        if (a.protocol != 'http:' &&\n            a.protocol != 'https:' ||\n            a.hostname != 't.me' ||\n            !(match = a.pathname.match(/^\\/(\\$|invoice\\/)([A-Za-z0-9\\-_=]+)$/)) ||\n            !(slug = match[2])) {\n            console.error('[Telegram.WebApp] Invoice url is invalid', url);\n            throw Error('WebAppInvoiceUrlInvalid');\n        }\n        if (!versionAtLeast('6.1')) {\n            console.error('[Telegram.WebApp] Method openInvoice is not supported in version ' + webAppVersion);\n            throw Error('WebAppMethodUnsupported');\n        }\n        if (webAppInvoices[slug]) {\n            console.error('[Telegram.WebApp] Invoice is already opened');\n            throw Error('WebAppInvoiceOpened');\n        }\n        webAppInvoices[slug] = {\n            url: url,\n            callback: callback\n        };\n        WebView.postEvent('web_app_open_invoice', false, { slug: slug });\n    };\n    WebApp.showPopup = function (params, callback) {\n        if (!versionAtLeast('6.2')) {\n            console.error('[Telegram.WebApp] Method showPopup is not supported in version ' + webAppVersion);\n            throw Error('WebAppMethodUnsupported');\n        }\n        if (webAppPopupOpened) {\n            console.error('[Telegram.WebApp] Popup is already opened');\n            throw Error('WebAppPopupOpened');\n        }\n        var title = '';\n        var message = '';\n        var buttons = [];\n        var popup_buttons = {};\n        var popup_params = {};\n        if (typeof params.title !== 'undefined') {\n            title = strTrim(params.title);\n            if (title.length > 64) {\n                console.error('[Telegram.WebApp] Popup title is too long', title);\n                throw Error('WebAppPopupParamInvalid');\n            }\n            if (title.length > 0) {\n                popup_params.title = title;\n            }\n        }\n        if (typeof params.message !== 'undefined') {\n            message = strTrim(params.message);\n        }\n        if (!message.length) {\n            console.error('[Telegram.WebApp] Popup message is required', params.message);\n            throw Error('WebAppPopupParamInvalid');\n        }\n        if (message.length > 256) {\n            console.error('[Telegram.WebApp] Popup message is too long', message);\n            throw Error('WebAppPopupParamInvalid');\n        }\n        popup_params.message = message;\n        if (typeof params.buttons !== 'undefined') {\n            if (!Array.isArray(params.buttons)) {\n                console.error('[Telegram.WebApp] Popup buttons should be an array', params.buttons);\n                throw Error('WebAppPopupParamInvalid');\n            }\n            for (var i = 0; i < params.buttons.length; i++) {\n                var button = params.buttons[i];\n                var btn = {};\n                var id = '';\n                if (typeof button.id !== 'undefined') {\n                    id = button.id.toString();\n                    if (id.length > 64) {\n                        console.error('[Telegram.WebApp] Popup button id is too long', id);\n                        throw Error('WebAppPopupParamInvalid');\n                    }\n                }\n                btn.id = id;\n                var button_type = button.type;\n                if (typeof button_type === 'undefined') {\n                    button_type = 'default';\n                }\n                btn.type = button_type;\n                if (button_type == 'ok' ||\n                    button_type == 'close' ||\n                    button_type == 'cancel') {\n                    // no params needed\n                }\n                else if (button_type == 'default' ||\n                    button_type == 'destructive') {\n                    var text = '';\n                    if (typeof button.text !== 'undefined') {\n                        text = strTrim(button.text);\n                    }\n                    if (!text.length) {\n                        console.error('[Telegram.WebApp] Popup button text is required for type ' + button_type, button.text);\n                        throw Error('WebAppPopupParamInvalid');\n                    }\n                    if (text.length > 64) {\n                        console.error('[Telegram.WebApp] Popup button text is too long', text);\n                        throw Error('WebAppPopupParamInvalid');\n                    }\n                    btn.text = text;\n                }\n                else {\n                    console.error('[Telegram.WebApp] Popup button type is invalid', button_type);\n                    throw Error('WebAppPopupParamInvalid');\n                }\n                buttons.push(btn);\n            }\n        }\n        else {\n            buttons.push({ id: '', type: 'close' });\n        }\n        if (buttons.length < 1) {\n            console.error('[Telegram.WebApp] Popup should have at least one button');\n            throw Error('WebAppPopupParamInvalid');\n        }\n        if (buttons.length > 3) {\n            console.error('[Telegram.WebApp] Popup should not have more than 3 buttons');\n            throw Error('WebAppPopupParamInvalid');\n        }\n        popup_params.buttons = buttons;\n        webAppPopupOpened = {\n            callback: callback\n        };\n        WebView.postEvent('web_app_open_popup', false, popup_params);\n    };\n    WebApp.showAlert = function (message, callback) {\n        WebApp.showPopup({\n            message: message\n        }, callback ? function () { callback(); } : null);\n    };\n    WebApp.showConfirm = function (message, callback) {\n        WebApp.showPopup({\n            message: message,\n            buttons: [\n                { type: 'ok', id: 'ok' },\n                { type: 'cancel' }\n            ]\n        }, callback ? function (button_id) {\n            callback(button_id == 'ok');\n        } : null);\n    };\n    WebApp.showScanQrPopup = function (params, callback) {\n        if (!versionAtLeast('6.4')) {\n            console.error('[Telegram.WebApp] Method showScanQrPopup is not supported in version ' + webAppVersion);\n            throw Error('WebAppMethodUnsupported');\n        }\n        if (webAppScanQrPopupOpened) {\n            console.error('[Telegram.WebApp] Popup is already opened');\n            throw Error('WebAppScanQrPopupOpened');\n        }\n        var text = '';\n        var popup_params = {};\n        if (typeof params.text !== 'undefined') {\n            text = strTrim(params.text);\n            if (text.length > 64) {\n                console.error('[Telegram.WebApp] Scan QR popup text is too long', text);\n                throw Error('WebAppScanQrPopupParamInvalid');\n            }\n            if (text.length > 0) {\n                popup_params.text = text;\n            }\n        }\n        webAppScanQrPopupOpened = {\n            callback: callback\n        };\n        WebView.postEvent('web_app_open_scan_qr_popup', false, popup_params);\n    };\n    WebApp.closeScanQrPopup = function () {\n        if (!versionAtLeast('6.4')) {\n            console.error('[Telegram.WebApp] Method closeScanQrPopup is not supported in version ' + webAppVersion);\n            throw Error('WebAppMethodUnsupported');\n        }\n        webAppScanQrPopupOpened = false;\n        WebView.postEvent('web_app_close_scan_qr_popup', false);\n    };\n    WebApp.readTextFromClipboard = function (callback) {\n        if (!versionAtLeast('6.4')) {\n            console.error('[Telegram.WebApp] Method readTextFromClipboard is not supported in version ' + webAppVersion);\n            throw Error('WebAppMethodUnsupported');\n        }\n        var req_id = generateCallbackId(16);\n        var req_params = { req_id: req_id };\n        webAppCallbacks[req_id] = {\n            callback: callback\n        };\n        WebView.postEvent('web_app_read_text_from_clipboard', false, req_params);\n    };\n    WebApp.requestWriteAccess = function (callback) {\n        if (!versionAtLeast('6.9')) {\n            console.error('[Telegram.WebApp] Method requestWriteAccess is not supported in version ' + webAppVersion);\n            throw Error('WebAppMethodUnsupported');\n        }\n        if (WebAppWriteAccessRequested) {\n            console.error('[Telegram.WebApp] Write access is already requested');\n            throw Error('WebAppWriteAccessRequested');\n        }\n        WebAppWriteAccessRequested = {\n            callback: callback\n        };\n        WebView.postEvent('web_app_request_write_access');\n    };\n    WebApp.requestContact = function (callback) {\n        if (!versionAtLeast('6.9')) {\n            console.error('[Telegram.WebApp] Method requestContact is not supported in version ' + webAppVersion);\n            throw Error('WebAppMethodUnsupported');\n        }\n        if (WebAppContactRequested) {\n            console.error('[Telegram.WebApp] Contact is already requested');\n            throw Error('WebAppContactRequested');\n        }\n        WebAppContactRequested = {\n            callback: callback\n        };\n        WebView.postEvent('web_app_request_phone');\n    };\n    WebApp.shareToStory = function (media_url, params) {\n        params = params || {};\n        if (!versionAtLeast('7.8')) {\n            console.error('[Telegram.WebApp] Method shareToStory is not supported in version ' + webAppVersion);\n            throw Error('WebAppMethodUnsupported');\n        }\n        var a = document.createElement('A');\n        a.href = media_url;\n        if (a.protocol != 'http:' &&\n            a.protocol != 'https:') {\n            console.error('[Telegram.WebApp] Media url protocol is not supported', url);\n            throw Error('WebAppMediaUrlInvalid');\n        }\n        var share_params = {};\n        share_params.media_url = a.href;\n        if (typeof params.text !== 'undefined') {\n            var text = strTrim(params.text);\n            if (text.length > 2048) {\n                console.error('[Telegram.WebApp] Text is too long', text);\n                throw Error('WebAppShareToStoryParamInvalid');\n            }\n            if (text.length > 0) {\n                share_params.text = text;\n            }\n        }\n        if (typeof params.widget_link !== 'undefined') {\n            params.widget_link = params.widget_link || {};\n            a.href = params.widget_link.url;\n            if (a.protocol != 'http:' &&\n                a.protocol != 'https:') {\n                console.error('[Telegram.WebApp] Link protocol is not supported', url);\n                throw Error('WebAppShareToStoryParamInvalid');\n            }\n            var widget_link = {\n                url: a.href\n            };\n            if (typeof params.widget_link.name !== 'undefined') {\n                var link_name = strTrim(params.widget_link.name);\n                if (link_name.length > 48) {\n                    console.error('[Telegram.WebApp] Link name is too long', link_name);\n                    throw Error('WebAppShareToStoryParamInvalid');\n                }\n                if (link_name.length > 0) {\n                    widget_link.name = link_name;\n                }\n            }\n            share_params.widget_link = widget_link;\n        }\n        WebView.postEvent('web_app_share_to_story', false, share_params);\n    };\n    WebApp.invokeCustomMethod = function (method, params, callback) {\n        invokeCustomMethod(method, params, callback);\n    };\n    WebApp.ready = function () {\n        WebView.postEvent('web_app_ready');\n    };\n    WebApp.expand = function () {\n        WebView.postEvent('web_app_expand');\n    };\n    WebApp.close = function (options) {\n        options = options || {};\n        var req_params = {};\n        if (versionAtLeast('7.6') && options.return_back) {\n            req_params.return_back = true;\n        }\n        WebView.postEvent('web_app_close', false, req_params);\n    };\n    window.Telegram.WebApp = WebApp;\n    updateHeaderColor();\n    updateBackgroundColor();\n    updateBottomBarColor();\n    setViewportHeight();\n    if (initParams.tgWebAppShowSettings) {\n        SettingsButton.show();\n    }\n    window.addEventListener('resize', onWindowResize);\n    if (isIframe) {\n        document.addEventListener('click', linkHandler);\n    }\n    WebView.onEvent('theme_changed', onThemeChanged);\n    WebView.onEvent('viewport_changed', onViewportChanged);\n    WebView.onEvent('invoice_closed', onInvoiceClosed);\n    WebView.onEvent('popup_closed', onPopupClosed);\n    WebView.onEvent('qr_text_received', onQrTextReceived);\n    WebView.onEvent('scan_qr_popup_closed', onScanQrPopupClosed);\n    WebView.onEvent('clipboard_text_received', onClipboardTextReceived);\n    WebView.onEvent('write_access_requested', onWriteAccessRequested);\n    WebView.onEvent('phone_requested', onPhoneRequested);\n    WebView.onEvent('custom_method_invoked', onCustomMethodInvoked);\n    WebView.postEvent('web_app_request_theme');\n    WebView.postEvent('web_app_request_viewport');\n})();\n//# sourceMappingURL=telegram-web-apps.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AdHdhLWRldi9zZGsvZGlzdC90ZWxlZ3JhbS13ZWItYXBwcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtRUFBbUUsaUNBQWlDO0FBQ3BHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLDJEQUEyRCx3Q0FBd0MsMEJBQTBCO0FBQzdIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLDhCQUE4QjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0QsNENBQTRDO0FBQ2hHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJELDRDQUE0QztBQUN2RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixvQkFBb0I7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsNkJBQTZCO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyx5QkFBeUI7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMERBQTBEO0FBQzFELCtEQUErRDtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsU0FBUztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRUFBcUUsaURBQWlEO0FBQ3RIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtRUFBbUUsK0NBQStDO0FBQ2xIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVFQUF1RSxvQkFBb0I7QUFDM0Y7QUFDQTtBQUNBLHVFQUF1RSwyQkFBMkI7QUFDbEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1RUFBdUUsY0FBYztBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQ7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUVBQXVFLGNBQWM7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxFQUFFO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwRUFBMEUsSUFBSTtBQUM5RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsT0FBTztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsUUFBUTtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLFlBQVksaUJBQWlCLElBQUk7QUFDbkUsK0JBQStCLG1CQUFtQjtBQUNsRDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0Isa0JBQWtCO0FBQ2pEO0FBQ0E7QUFDQSwrQkFBK0IsbUJBQW1CO0FBQ2xEO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsc0RBQXNEO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLHdEQUF3RCxvQkFBb0Isb0JBQW9CLGdDQUFnQyxZQUFZLG9CQUFvQixRQUFRLGFBQWEsY0FBYyx3RkFBd0YsNkRBQTZELDRDQUE0QyxJQUFJLGNBQWMsVUFBVSxhQUFhLG9DQUFvQyxJQUFJLGNBQWMsVUFBVSxZQUFZO0FBQ3pmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1EO0FBQ25ELHVEQUF1RDtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQ7QUFDbkQsdURBQXVEO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixvQkFBb0I7QUFDbkQ7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxrQ0FBa0MseUJBQXlCLFdBQVcsSUFBSTtBQUMxRSwrQkFBK0Isb0JBQW9CO0FBQ25EO0FBQ0EsU0FBUztBQUNUO0FBQ0Esa0NBQWtDLHlCQUF5QixZQUFZLElBQUk7QUFDM0UsK0JBQStCLDZDQUE2QztBQUM1RTtBQUNBLFNBQVM7QUFDVDtBQUNBLGtDQUFrQyx5QkFBeUIsaUJBQWlCLElBQUk7QUFDaEYsK0JBQStCLHFEQUFxRDtBQUNwRjtBQUNBLFNBQVM7QUFDVDtBQUNBLGtDQUFrQyx5QkFBeUIsaUJBQWlCLElBQUk7QUFDaEYsK0JBQStCLG1CQUFtQjtBQUNsRDtBQUNBLFNBQVM7QUFDVDtBQUNBLCtCQUErQiwyQkFBMkI7QUFDMUQ7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxrQ0FBa0MseUJBQXlCLGdCQUFnQixJQUFJO0FBQy9FLCtCQUErQixrQkFBa0I7QUFDakQ7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxrQ0FBa0MseUJBQXlCLHVCQUF1QixJQUFJO0FBQ3RGLCtCQUErQix3QkFBd0I7QUFDdkQ7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLHNDQUFzQyx5QkFBeUIsZUFBZSxJQUFJO0FBQ2xGLG1DQUFtQyx3QkFBd0I7QUFDM0Q7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxZQUFZO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLGtCQUFrQjtBQUM5RDtBQUNBO0FBQ0EsNENBQTRDLG1CQUFtQjtBQUMvRDtBQUNBO0FBQ0EsNENBQTRDLGlCQUFpQjtBQUM3RDtBQUNBO0FBQ0EsNENBQTRDLGtCQUFrQjtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsWUFBWSxpQkFBaUIsSUFBSTtBQUNuRSwrQkFBK0IsbUJBQW1CO0FBQ2xEO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixrQkFBa0I7QUFDakQ7QUFDQTtBQUNBLCtCQUErQixtQkFBbUI7QUFDbEQ7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMscUNBQXFDO0FBQzFFO0FBQ0E7QUFDQSxxQ0FBcUMsK0NBQStDO0FBQ3BGO0FBQ0E7QUFDQSxxQ0FBcUMsMEJBQTBCO0FBQy9EO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZEQUE2RCx3QkFBd0I7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLDZEQUE2RCxZQUFZO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRUFBZ0UsWUFBWTtBQUM1RTtBQUNBO0FBQ0EsMkRBQTJEO0FBQzNEO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0Isa0JBQWtCO0FBQ2pEO0FBQ0EsU0FBUztBQUNUO0FBQ0EsK0JBQStCLDBDQUEwQztBQUN6RTtBQUNBLFNBQVM7QUFDVDtBQUNBLCtCQUErQixvQ0FBb0M7QUFDbkU7QUFDQSxTQUFTO0FBQ1Q7QUFDQSwrQkFBK0IsMkJBQTJCO0FBQzFEO0FBQ0EsU0FBUztBQUNUO0FBQ0EsK0JBQStCLDhDQUE4QztBQUM3RTtBQUNBLFNBQVM7QUFDVDtBQUNBLCtCQUErQiwrQkFBK0I7QUFDOUQ7QUFDQSxTQUFTO0FBQ1Q7QUFDQSwrQkFBK0Isd0JBQXdCO0FBQ3ZEO0FBQ0EsU0FBUztBQUNULGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyx1Q0FBdUM7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3RUFBd0UsY0FBYztBQUN0RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0RBQXdEO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwREFBMEQseUJBQXlCO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsd0JBQXdCO0FBQ25EO0FBQ0EsS0FBSztBQUNMO0FBQ0EsMkJBQTJCLDhCQUE4QjtBQUN6RDtBQUNBLEtBQUs7QUFDTDtBQUNBLDJCQUEyQix1QkFBdUI7QUFDbEQ7QUFDQSxLQUFLO0FBQ0w7QUFDQSwyQkFBMkIsd0JBQXdCO0FBQ25EO0FBQ0EsS0FBSztBQUNMO0FBQ0EsMkJBQTJCLHFCQUFxQjtBQUNoRDtBQUNBLEtBQUs7QUFDTDtBQUNBLDJCQUEyQixxQkFBcUI7QUFDaEQ7QUFDQSxLQUFLO0FBQ0w7QUFDQSwyQkFBMkIsb0JBQW9CO0FBQy9DO0FBQ0EsS0FBSztBQUNMO0FBQ0EsMkJBQTJCLDRGQUE0RjtBQUN2SDtBQUNBLEtBQUs7QUFDTDtBQUNBLDJCQUEyQix3R0FBd0c7QUFDbkk7QUFDQSxLQUFLO0FBQ0w7QUFDQSw4QkFBOEIsOEJBQThCO0FBQzVELDJCQUEyQixzQ0FBc0M7QUFDakU7QUFDQSxLQUFLO0FBQ0w7QUFDQSw4QkFBOEIsNEJBQTRCO0FBQzFELDJCQUEyQixpQ0FBaUM7QUFDNUQ7QUFDQSxLQUFLO0FBQ0w7QUFDQSw4QkFBOEIsc0JBQXNCO0FBQ3BELDJCQUEyQiwwQkFBMEI7QUFDckQ7QUFDQSxLQUFLO0FBQ0w7QUFDQSw4QkFBOEIsMEJBQTBCO0FBQ3hELDJCQUEyQiw4QkFBOEI7QUFDekQ7QUFDQSxLQUFLO0FBQ0w7QUFDQSw4QkFBOEIseUJBQXlCO0FBQ3ZELDJCQUEyQiw2QkFBNkI7QUFDeEQ7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdEQUF3RCxZQUFZO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQiw0QkFBNEIsOEJBQThCO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRUFBa0Usc0NBQXNDO0FBQ3hHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0RBQStELHNCQUFzQjtBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUEyRCxZQUFZO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QiwyQkFBMkI7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLHVCQUF1QjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLDJCQUEyQixjQUFjO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isc0JBQXNCO0FBQ3hDLGtCQUFrQjtBQUNsQjtBQUNBLFNBQVM7QUFDVDtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AdHdhLWRldi9zZGsvZGlzdC90ZWxlZ3JhbS13ZWItYXBwcy5qcz9iMTdmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gV2ViVmlld1xuKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXZlbnRIYW5kbGVycyA9IHt9O1xuICAgIHZhciBsb2NhdGlvbkhhc2ggPSAnJztcbiAgICB0cnkge1xuICAgICAgICBsb2NhdGlvbkhhc2ggPSBsb2NhdGlvbi5oYXNoLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7IH1cbiAgICB2YXIgaW5pdFBhcmFtcyA9IHVybFBhcnNlSGFzaFBhcmFtcyhsb2NhdGlvbkhhc2gpO1xuICAgIHZhciBzdG9yZWRQYXJhbXMgPSBzZXNzaW9uU3RvcmFnZUdldCgnaW5pdFBhcmFtcycpO1xuICAgIGlmIChzdG9yZWRQYXJhbXMpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHN0b3JlZFBhcmFtcykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBpbml0UGFyYW1zW2tleV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgaW5pdFBhcmFtc1trZXldID0gc3RvcmVkUGFyYW1zW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2Vzc2lvblN0b3JhZ2VTZXQoJ2luaXRQYXJhbXMnLCBpbml0UGFyYW1zKTtcbiAgICB2YXIgaXNJZnJhbWUgPSBmYWxzZSwgaUZyYW1lU3R5bGU7XG4gICAgdHJ5IHtcbiAgICAgICAgaXNJZnJhbWUgPSAod2luZG93LnBhcmVudCAhPSBudWxsICYmIHdpbmRvdyAhPSB3aW5kb3cucGFyZW50KTtcbiAgICAgICAgaWYgKGlzSWZyYW1lKSB7XG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgIGlmIChldmVudC5zb3VyY2UgIT09IHdpbmRvdy5wYXJlbnQpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YVBhcnNlZCA9IEpTT04ucGFyc2UoZXZlbnQuZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFkYXRhUGFyc2VkIHx8ICFkYXRhUGFyc2VkLmV2ZW50VHlwZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChkYXRhUGFyc2VkLmV2ZW50VHlwZSA9PSAnc2V0X2N1c3RvbV9zdHlsZScpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50Lm9yaWdpbiA9PT0gJ2h0dHBzOi8vd2ViLnRlbGVncmFtLm9yZycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlGcmFtZVN0eWxlLmlubmVySFRNTCA9IGRhdGFQYXJzZWQuZXZlbnREYXRhO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGRhdGFQYXJzZWQuZXZlbnRUeXBlID09ICdyZWxvYWRfaWZyYW1lJykge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnBhcmVudC5wb3N0TWVzc2FnZShKU09OLnN0cmluZ2lmeSh7IGV2ZW50VHlwZTogJ2lmcmFtZV93aWxsX3JlbG9hZCcgfSksICcqJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHsgfVxuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlY2VpdmVFdmVudChkYXRhUGFyc2VkLmV2ZW50VHlwZSwgZGF0YVBhcnNlZC5ldmVudERhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaUZyYW1lU3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgICAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChpRnJhbWVTdHlsZSk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5wYXJlbnQucG9zdE1lc3NhZ2UoSlNPTi5zdHJpbmdpZnkoeyBldmVudFR5cGU6ICdpZnJhbWVfcmVhZHknLCBldmVudERhdGE6IHsgcmVsb2FkX3N1cHBvcnRlZDogdHJ1ZSB9IH0pLCAnKicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHsgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlKSB7IH1cbiAgICBmdW5jdGlvbiB1cmxTYWZlRGVjb2RlKHVybGVuY29kZWQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHVybGVuY29kZWQgPSB1cmxlbmNvZGVkLnJlcGxhY2UoL1xcKy9nLCAnJTIwJyk7XG4gICAgICAgICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHVybGVuY29kZWQpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gdXJsZW5jb2RlZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB1cmxQYXJzZUhhc2hQYXJhbXMobG9jYXRpb25IYXNoKSB7XG4gICAgICAgIGxvY2F0aW9uSGFzaCA9IGxvY2F0aW9uSGFzaC5yZXBsYWNlKC9eIy8sICcnKTtcbiAgICAgICAgdmFyIHBhcmFtcyA9IHt9O1xuICAgICAgICBpZiAoIWxvY2F0aW9uSGFzaC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJhbXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxvY2F0aW9uSGFzaC5pbmRleE9mKCc9JykgPCAwICYmIGxvY2F0aW9uSGFzaC5pbmRleE9mKCc/JykgPCAwKSB7XG4gICAgICAgICAgICBwYXJhbXMuX3BhdGggPSB1cmxTYWZlRGVjb2RlKGxvY2F0aW9uSGFzaCk7XG4gICAgICAgICAgICByZXR1cm4gcGFyYW1zO1xuICAgICAgICB9XG4gICAgICAgIHZhciBxSW5kZXggPSBsb2NhdGlvbkhhc2guaW5kZXhPZignPycpO1xuICAgICAgICBpZiAocUluZGV4ID49IDApIHtcbiAgICAgICAgICAgIHZhciBwYXRoUGFyYW0gPSBsb2NhdGlvbkhhc2guc3Vic3RyKDAsIHFJbmRleCk7XG4gICAgICAgICAgICBwYXJhbXMuX3BhdGggPSB1cmxTYWZlRGVjb2RlKHBhdGhQYXJhbSk7XG4gICAgICAgICAgICBsb2NhdGlvbkhhc2ggPSBsb2NhdGlvbkhhc2guc3Vic3RyKHFJbmRleCArIDEpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBxdWVyeV9wYXJhbXMgPSB1cmxQYXJzZVF1ZXJ5U3RyaW5nKGxvY2F0aW9uSGFzaCk7XG4gICAgICAgIGZvciAodmFyIGsgaW4gcXVlcnlfcGFyYW1zKSB7XG4gICAgICAgICAgICBwYXJhbXNba10gPSBxdWVyeV9wYXJhbXNba107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhcmFtcztcbiAgICB9XG4gICAgZnVuY3Rpb24gdXJsUGFyc2VRdWVyeVN0cmluZyhxdWVyeVN0cmluZykge1xuICAgICAgICB2YXIgcGFyYW1zID0ge307XG4gICAgICAgIGlmICghcXVlcnlTdHJpbmcubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyYW1zO1xuICAgICAgICB9XG4gICAgICAgIHZhciBxdWVyeVN0cmluZ1BhcmFtcyA9IHF1ZXJ5U3RyaW5nLnNwbGl0KCcmJyk7XG4gICAgICAgIHZhciBpLCBwYXJhbSwgcGFyYW1OYW1lLCBwYXJhbVZhbHVlO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcXVlcnlTdHJpbmdQYXJhbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHBhcmFtID0gcXVlcnlTdHJpbmdQYXJhbXNbaV0uc3BsaXQoJz0nKTtcbiAgICAgICAgICAgIHBhcmFtTmFtZSA9IHVybFNhZmVEZWNvZGUocGFyYW1bMF0pO1xuICAgICAgICAgICAgcGFyYW1WYWx1ZSA9IHBhcmFtWzFdID09IG51bGwgPyBudWxsIDogdXJsU2FmZURlY29kZShwYXJhbVsxXSk7XG4gICAgICAgICAgICBwYXJhbXNbcGFyYW1OYW1lXSA9IHBhcmFtVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhcmFtcztcbiAgICB9XG4gICAgLy8gVGVsZWdyYW0gYXBwcyB3aWxsIGltcGxlbWVudCB0aGlzIGxvZ2ljIHRvIGFkZCBzZXJ2aWNlIHBhcmFtcyAoZS5nLiB0Z1NoYXJlU2NvcmVVcmwpIHRvIGdhbWUgVVJMXG4gICAgZnVuY3Rpb24gdXJsQXBwZW5kSGFzaFBhcmFtcyh1cmwsIGFkZEhhc2gpIHtcbiAgICAgICAgLy8gdXJsIGxvb2tzIGxpa2UgJ2h0dHBzOi8vZ2FtZS5jb20vcGF0aD9xdWVyeT0xI2hhc2gnXG4gICAgICAgIC8vIGFkZEhhc2ggbG9va3MgbGlrZSAndGdTaGFyZVNjb3JlVXJsPScgKyBlbmNvZGVVUklDb21wb25lbnQoJ3RnYjovL3NoYXJlX2dhbWVfc2NvcmU/aGFzaD12ZXJ5X2xvbmdfaGFzaDEyMycpXG4gICAgICAgIHZhciBpbmQgPSB1cmwuaW5kZXhPZignIycpO1xuICAgICAgICBpZiAoaW5kIDwgMCkge1xuICAgICAgICAgICAgLy8gaHR0cHM6Ly9nYW1lLmNvbS9wYXRoIC0+IGh0dHBzOi8vZ2FtZS5jb20vcGF0aCN0Z1NoYXJlU2NvcmVVcmw9ZXRjXG4gICAgICAgICAgICByZXR1cm4gdXJsICsgJyMnICsgYWRkSGFzaDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY3VySGFzaCA9IHVybC5zdWJzdHIoaW5kICsgMSk7XG4gICAgICAgIGlmIChjdXJIYXNoLmluZGV4T2YoJz0nKSA+PSAwIHx8IGN1ckhhc2guaW5kZXhPZignPycpID49IDApIHtcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2FtZS5jb20vI2hhc2g9MSAtPiBodHRwczovL2dhbWUuY29tLyNoYXNoPTEmdGdTaGFyZVNjb3JlVXJsPWV0Y1xuICAgICAgICAgICAgLy8gaHR0cHM6Ly9nYW1lLmNvbS8jcGF0aD9xdWVyeSAtPiBodHRwczovL2dhbWUuY29tLyNwYXRoP3F1ZXJ5JnRnU2hhcmVTY29yZVVybD1ldGNcbiAgICAgICAgICAgIHJldHVybiB1cmwgKyAnJicgKyBhZGRIYXNoO1xuICAgICAgICB9XG4gICAgICAgIC8vIGh0dHBzOi8vZ2FtZS5jb20vI2hhc2ggLT4gaHR0cHM6Ly9nYW1lLmNvbS8jaGFzaD90Z1NoYXJlU2NvcmVVcmw9ZXRjXG4gICAgICAgIGlmIChjdXJIYXNoLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiB1cmwgKyAnPycgKyBhZGRIYXNoO1xuICAgICAgICB9XG4gICAgICAgIC8vIGh0dHBzOi8vZ2FtZS5jb20vIyAtPiBodHRwczovL2dhbWUuY29tLyN0Z1NoYXJlU2NvcmVVcmw9ZXRjXG4gICAgICAgIHJldHVybiB1cmwgKyBhZGRIYXNoO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwb3N0RXZlbnQoZXZlbnRUeXBlLCBjYWxsYmFjaywgZXZlbnREYXRhKSB7XG4gICAgICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGNhbGxiYWNrID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChldmVudERhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZXZlbnREYXRhID0gJyc7XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2coJ1tUZWxlZ3JhbS5XZWJWaWV3XSA+IHBvc3RFdmVudCcsIGV2ZW50VHlwZSwgZXZlbnREYXRhKTtcbiAgICAgICAgaWYgKHdpbmRvdy5UZWxlZ3JhbVdlYnZpZXdQcm94eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBUZWxlZ3JhbVdlYnZpZXdQcm94eS5wb3N0RXZlbnQoZXZlbnRUeXBlLCBKU09OLnN0cmluZ2lmeShldmVudERhdGEpKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAod2luZG93LmV4dGVybmFsICYmICdub3RpZnknIGluIHdpbmRvdy5leHRlcm5hbCkge1xuICAgICAgICAgICAgd2luZG93LmV4dGVybmFsLm5vdGlmeShKU09OLnN0cmluZ2lmeSh7IGV2ZW50VHlwZTogZXZlbnRUeXBlLCBldmVudERhdGE6IGV2ZW50RGF0YSB9KSk7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzSWZyYW1lKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhciB0cnVzdGVkVGFyZ2V0ID0gJ2h0dHBzOi8vd2ViLnRlbGVncmFtLm9yZyc7XG4gICAgICAgICAgICAgICAgLy8gRm9yIG5vdyB3ZSBkb24ndCByZXN0cmljdCB0YXJnZXQsIGZvciB0ZXN0aW5nIHB1cnBvc2VzXG4gICAgICAgICAgICAgICAgdHJ1c3RlZFRhcmdldCA9ICcqJztcbiAgICAgICAgICAgICAgICB3aW5kb3cucGFyZW50LnBvc3RNZXNzYWdlKEpTT04uc3RyaW5naWZ5KHsgZXZlbnRUeXBlOiBldmVudFR5cGUsIGV2ZW50RGF0YTogZXZlbnREYXRhIH0pLCB0cnVzdGVkVGFyZ2V0KTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKHsgbm90QXZhaWxhYmxlOiB0cnVlIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIDtcbiAgICBmdW5jdGlvbiByZWNlaXZlRXZlbnQoZXZlbnRUeXBlLCBldmVudERhdGEpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ1tUZWxlZ3JhbS5XZWJWaWV3XSA8IHJlY2VpdmVFdmVudCcsIGV2ZW50VHlwZSwgZXZlbnREYXRhKTtcbiAgICAgICAgY2FsbEV2ZW50Q2FsbGJhY2tzKGV2ZW50VHlwZSwgZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhldmVudFR5cGUsIGV2ZW50RGF0YSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjYWxsRXZlbnRDYWxsYmFja3MoZXZlbnRUeXBlLCBmdW5jKSB7XG4gICAgICAgIHZhciBjdXJFdmVudEhhbmRsZXJzID0gZXZlbnRIYW5kbGVyc1tldmVudFR5cGVdO1xuICAgICAgICBpZiAoY3VyRXZlbnRIYW5kbGVycyA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICAhY3VyRXZlbnRIYW5kbGVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGN1ckV2ZW50SGFuZGxlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZnVuYyhjdXJFdmVudEhhbmRsZXJzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7IH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBvbkV2ZW50KGV2ZW50VHlwZSwgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKGV2ZW50SGFuZGxlcnNbZXZlbnRUeXBlXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBldmVudEhhbmRsZXJzW2V2ZW50VHlwZV0gPSBbXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaW5kZXggPSBldmVudEhhbmRsZXJzW2V2ZW50VHlwZV0uaW5kZXhPZihjYWxsYmFjayk7XG4gICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIGV2ZW50SGFuZGxlcnNbZXZlbnRUeXBlXS5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICA7XG4gICAgZnVuY3Rpb24gb2ZmRXZlbnQoZXZlbnRUeXBlLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAoZXZlbnRIYW5kbGVyc1tldmVudFR5cGVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaW5kZXggPSBldmVudEhhbmRsZXJzW2V2ZW50VHlwZV0uaW5kZXhPZihjYWxsYmFjayk7XG4gICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBldmVudEhhbmRsZXJzW2V2ZW50VHlwZV0uc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gICAgO1xuICAgIGZ1bmN0aW9uIG9wZW5Qcm90b1VybCh1cmwpIHtcbiAgICAgICAgaWYgKCF1cmwubWF0Y2goL14od2ViXFwrKT90Z2I/OlxcL1xcLy4vKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciB1c2VJZnJhbWUgPSBuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9pT1N8aVBob25lIE9TfGlQaG9uZXxpUG9kfGlQYWQvaSkgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgIGlmICh1c2VJZnJhbWUpIHtcbiAgICAgICAgICAgIHZhciBpZnJhbWVDb250RWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGdtZV9mcmFtZV9jb250JykgfHwgZG9jdW1lbnQuYm9keTtcbiAgICAgICAgICAgIHZhciBpZnJhbWVFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICAgICAgICAgICAgaWZyYW1lQ29udEVsLmFwcGVuZENoaWxkKGlmcmFtZUVsKTtcbiAgICAgICAgICAgIHZhciBwYWdlSGlkZGVuID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgZW5hYmxlSGlkZGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHBhZ2VIaWRkZW4gPSB0cnVlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwYWdlaGlkZScsIGVuYWJsZUhpZGRlbiwgZmFsc2UpO1xuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBlbmFibGVIaWRkZW4sIGZhbHNlKTtcbiAgICAgICAgICAgIGlmIChpZnJhbWVFbCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmcmFtZUVsLnNyYyA9IHVybDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmICghcGFnZUhpZGRlbikge1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSB1cmw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdwYWdlaGlkZScsIGVuYWJsZUhpZGRlbiwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdibHVyJywgZW5hYmxlSGlkZGVuLCBmYWxzZSk7XG4gICAgICAgICAgICB9LCAyMDAwKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9IHVybDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2Vzc2lvblN0b3JhZ2VTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgd2luZG93LnNlc3Npb25TdG9yYWdlLnNldEl0ZW0oJ19fdGVsZWdyYW1fXycgKyBrZXksIEpTT04uc3RyaW5naWZ5KHZhbHVlKSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkgeyB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2Vzc2lvblN0b3JhZ2VHZXQoa2V5KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh3aW5kb3cuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgnX190ZWxlZ3JhbV9fJyArIGtleSkpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7IH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmICghd2luZG93LlRlbGVncmFtKSB7XG4gICAgICAgIHdpbmRvdy5UZWxlZ3JhbSA9IHt9O1xuICAgIH1cbiAgICB3aW5kb3cuVGVsZWdyYW0uV2ViVmlldyA9IHtcbiAgICAgICAgaW5pdFBhcmFtczogaW5pdFBhcmFtcyxcbiAgICAgICAgaXNJZnJhbWU6IGlzSWZyYW1lLFxuICAgICAgICBvbkV2ZW50OiBvbkV2ZW50LFxuICAgICAgICBvZmZFdmVudDogb2ZmRXZlbnQsXG4gICAgICAgIHBvc3RFdmVudDogcG9zdEV2ZW50LFxuICAgICAgICByZWNlaXZlRXZlbnQ6IHJlY2VpdmVFdmVudCxcbiAgICAgICAgY2FsbEV2ZW50Q2FsbGJhY2tzOiBjYWxsRXZlbnRDYWxsYmFja3NcbiAgICB9O1xuICAgIHdpbmRvdy5UZWxlZ3JhbS5VdGlscyA9IHtcbiAgICAgICAgdXJsU2FmZURlY29kZTogdXJsU2FmZURlY29kZSxcbiAgICAgICAgdXJsUGFyc2VRdWVyeVN0cmluZzogdXJsUGFyc2VRdWVyeVN0cmluZyxcbiAgICAgICAgdXJsUGFyc2VIYXNoUGFyYW1zOiB1cmxQYXJzZUhhc2hQYXJhbXMsXG4gICAgICAgIHVybEFwcGVuZEhhc2hQYXJhbXM6IHVybEFwcGVuZEhhc2hQYXJhbXMsXG4gICAgICAgIHNlc3Npb25TdG9yYWdlU2V0OiBzZXNzaW9uU3RvcmFnZVNldCxcbiAgICAgICAgc2Vzc2lvblN0b3JhZ2VHZXQ6IHNlc3Npb25TdG9yYWdlR2V0XG4gICAgfTtcbiAgICAvLyBGb3IgV2luZG93cyBQaG9uZSBhcHBcbiAgICB3aW5kb3cuVGVsZWdyYW1HYW1lUHJveHlfcmVjZWl2ZUV2ZW50ID0gcmVjZWl2ZUV2ZW50O1xuICAgIC8vIEFwcCBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG4gICAgd2luZG93LlRlbGVncmFtR2FtZVByb3h5ID0ge1xuICAgICAgICByZWNlaXZlRXZlbnQ6IHJlY2VpdmVFdmVudFxuICAgIH07XG59KSgpO1xuLy8gV2ViQXBwXG4oZnVuY3Rpb24gKCkge1xuICAgIHZhciBVdGlscyA9IHdpbmRvdy5UZWxlZ3JhbS5VdGlscztcbiAgICB2YXIgV2ViVmlldyA9IHdpbmRvdy5UZWxlZ3JhbS5XZWJWaWV3O1xuICAgIHZhciBpbml0UGFyYW1zID0gV2ViVmlldy5pbml0UGFyYW1zO1xuICAgIHZhciBpc0lmcmFtZSA9IFdlYlZpZXcuaXNJZnJhbWU7XG4gICAgdmFyIFdlYkFwcCA9IHt9O1xuICAgIHZhciB3ZWJBcHBJbml0RGF0YSA9ICcnLCB3ZWJBcHBJbml0RGF0YVVuc2FmZSA9IHt9O1xuICAgIHZhciB0aGVtZVBhcmFtcyA9IHt9LCBjb2xvclNjaGVtZSA9ICdsaWdodCc7XG4gICAgdmFyIHdlYkFwcFZlcnNpb24gPSAnNi4wJztcbiAgICB2YXIgd2ViQXBwUGxhdGZvcm0gPSAndW5rbm93bic7XG4gICAgaWYgKGluaXRQYXJhbXMudGdXZWJBcHBEYXRhICYmIGluaXRQYXJhbXMudGdXZWJBcHBEYXRhLmxlbmd0aCkge1xuICAgICAgICB3ZWJBcHBJbml0RGF0YSA9IGluaXRQYXJhbXMudGdXZWJBcHBEYXRhO1xuICAgICAgICB3ZWJBcHBJbml0RGF0YVVuc2FmZSA9IFV0aWxzLnVybFBhcnNlUXVlcnlTdHJpbmcod2ViQXBwSW5pdERhdGEpO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gd2ViQXBwSW5pdERhdGFVbnNhZmUpIHtcbiAgICAgICAgICAgIHZhciB2YWwgPSB3ZWJBcHBJbml0RGF0YVVuc2FmZVtrZXldO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAodmFsLnN1YnN0cigwLCAxKSA9PSAneycgJiYgdmFsLnN1YnN0cigtMSkgPT0gJ30nIHx8XG4gICAgICAgICAgICAgICAgICAgIHZhbC5zdWJzdHIoMCwgMSkgPT0gJ1snICYmIHZhbC5zdWJzdHIoLTEpID09ICddJykge1xuICAgICAgICAgICAgICAgICAgICB3ZWJBcHBJbml0RGF0YVVuc2FmZVtrZXldID0gSlNPTi5wYXJzZSh2YWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7IH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoaW5pdFBhcmFtcy50Z1dlYkFwcFRoZW1lUGFyYW1zICYmIGluaXRQYXJhbXMudGdXZWJBcHBUaGVtZVBhcmFtcy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIHRoZW1lUGFyYW1zUmF3ID0gaW5pdFBhcmFtcy50Z1dlYkFwcFRoZW1lUGFyYW1zO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIHRoZW1lX3BhcmFtcyA9IEpTT04ucGFyc2UodGhlbWVQYXJhbXNSYXcpO1xuICAgICAgICAgICAgaWYgKHRoZW1lX3BhcmFtcykge1xuICAgICAgICAgICAgICAgIHNldFRoZW1lUGFyYW1zKHRoZW1lX3BhcmFtcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHsgfVxuICAgIH1cbiAgICB2YXIgdGhlbWVfcGFyYW1zID0gVXRpbHMuc2Vzc2lvblN0b3JhZ2VHZXQoJ3RoZW1lUGFyYW1zJyk7XG4gICAgaWYgKHRoZW1lX3BhcmFtcykge1xuICAgICAgICBzZXRUaGVtZVBhcmFtcyh0aGVtZV9wYXJhbXMpO1xuICAgIH1cbiAgICBpZiAoaW5pdFBhcmFtcy50Z1dlYkFwcFZlcnNpb24pIHtcbiAgICAgICAgd2ViQXBwVmVyc2lvbiA9IGluaXRQYXJhbXMudGdXZWJBcHBWZXJzaW9uO1xuICAgIH1cbiAgICBpZiAoaW5pdFBhcmFtcy50Z1dlYkFwcFBsYXRmb3JtKSB7XG4gICAgICAgIHdlYkFwcFBsYXRmb3JtID0gaW5pdFBhcmFtcy50Z1dlYkFwcFBsYXRmb3JtO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvblRoZW1lQ2hhbmdlZChldmVudFR5cGUsIGV2ZW50RGF0YSkge1xuICAgICAgICBpZiAoZXZlbnREYXRhLnRoZW1lX3BhcmFtcykge1xuICAgICAgICAgICAgc2V0VGhlbWVQYXJhbXMoZXZlbnREYXRhLnRoZW1lX3BhcmFtcyk7XG4gICAgICAgICAgICB3aW5kb3cuVGVsZWdyYW0uV2ViQXBwLk1haW5CdXR0b24uc2V0UGFyYW1zKHt9KTtcbiAgICAgICAgICAgIHdpbmRvdy5UZWxlZ3JhbS5XZWJBcHAuU2Vjb25kYXJ5QnV0dG9uLnNldFBhcmFtcyh7fSk7XG4gICAgICAgICAgICB1cGRhdGVIZWFkZXJDb2xvcigpO1xuICAgICAgICAgICAgdXBkYXRlQmFja2dyb3VuZENvbG9yKCk7XG4gICAgICAgICAgICB1cGRhdGVCb3R0b21CYXJDb2xvcigpO1xuICAgICAgICAgICAgcmVjZWl2ZVdlYlZpZXdFdmVudCgndGhlbWVDaGFuZ2VkJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIGxhc3RXaW5kb3dIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgZnVuY3Rpb24gb25WaWV3cG9ydENoYW5nZWQoZXZlbnRUeXBlLCBldmVudERhdGEpIHtcbiAgICAgICAgaWYgKGV2ZW50RGF0YS5oZWlnaHQpIHtcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBvbldpbmRvd1Jlc2l6ZSk7XG4gICAgICAgICAgICBzZXRWaWV3cG9ydEhlaWdodChldmVudERhdGEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uV2luZG93UmVzaXplKGUpIHtcbiAgICAgICAgaWYgKGxhc3RXaW5kb3dIZWlnaHQgIT0gd2luZG93LmlubmVySGVpZ2h0KSB7XG4gICAgICAgICAgICBsYXN0V2luZG93SGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgICAgICAgcmVjZWl2ZVdlYlZpZXdFdmVudCgndmlld3BvcnRDaGFuZ2VkJywge1xuICAgICAgICAgICAgICAgIGlzU3RhdGVTdGFibGU6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGxpbmtIYW5kbGVyKGUpIHtcbiAgICAgICAgaWYgKGUubWV0YUtleSB8fCBlLmN0cmxLZXkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciBlbCA9IGUudGFyZ2V0O1xuICAgICAgICB3aGlsZSAoZWwudGFnTmFtZSAhPSAnQScgJiYgZWwucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgZWwgPSBlbC5wYXJlbnROb2RlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbC50YWdOYW1lID09ICdBJyAmJlxuICAgICAgICAgICAgZWwudGFyZ2V0ICE9ICdfYmxhbmsnICYmXG4gICAgICAgICAgICAoZWwucHJvdG9jb2wgPT0gJ2h0dHA6JyB8fCBlbC5wcm90b2NvbCA9PSAnaHR0cHM6JykgJiZcbiAgICAgICAgICAgIGVsLmhvc3RuYW1lID09ICd0Lm1lJykge1xuICAgICAgICAgICAgV2ViQXBwLm9wZW5UZ0xpbmsoZWwuaHJlZik7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gc3RyVHJpbShzdHIpIHtcbiAgICAgICAgcmV0dXJuIHN0ci50b1N0cmluZygpLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVjZWl2ZVdlYlZpZXdFdmVudChldmVudFR5cGUpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgICAgICBldmVudFR5cGUgPSBhcmdzLnNoaWZ0KCk7XG4gICAgICAgIFdlYlZpZXcuY2FsbEV2ZW50Q2FsbGJhY2tzKCd3ZWJ2aWV3OicgKyBldmVudFR5cGUsIGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkoV2ViQXBwLCBhcmdzKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uV2ViVmlld0V2ZW50KGV2ZW50VHlwZSwgY2FsbGJhY2spIHtcbiAgICAgICAgV2ViVmlldy5vbkV2ZW50KCd3ZWJ2aWV3OicgKyBldmVudFR5cGUsIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgO1xuICAgIGZ1bmN0aW9uIG9mZldlYlZpZXdFdmVudChldmVudFR5cGUsIGNhbGxiYWNrKSB7XG4gICAgICAgIFdlYlZpZXcub2ZmRXZlbnQoJ3dlYnZpZXc6JyArIGV2ZW50VHlwZSwgY2FsbGJhY2spO1xuICAgIH1cbiAgICA7XG4gICAgZnVuY3Rpb24gc2V0Q3NzUHJvcGVydHkobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgdmFyIHJvb3QgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgIGlmIChyb290ICYmIHJvb3Quc3R5bGUgJiYgcm9vdC5zdHlsZS5zZXRQcm9wZXJ0eSkge1xuICAgICAgICAgICAgcm9vdC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS10Zy0nICsgbmFtZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNldFRoZW1lUGFyYW1zKHRoZW1lX3BhcmFtcykge1xuICAgICAgICAvLyB0ZW1wIGlPUyBmaXhcbiAgICAgICAgaWYgKHRoZW1lX3BhcmFtcy5iZ19jb2xvciA9PSAnIzFjMWMxZCcgJiZcbiAgICAgICAgICAgIHRoZW1lX3BhcmFtcy5iZ19jb2xvciA9PSB0aGVtZV9wYXJhbXMuc2Vjb25kYXJ5X2JnX2NvbG9yKSB7XG4gICAgICAgICAgICB0aGVtZV9wYXJhbXMuc2Vjb25kYXJ5X2JnX2NvbG9yID0gJyMyYzJjMmUnO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjb2xvcjtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHRoZW1lX3BhcmFtcykge1xuICAgICAgICAgICAgaWYgKGNvbG9yID0gcGFyc2VDb2xvclRvSGV4KHRoZW1lX3BhcmFtc1trZXldKSkge1xuICAgICAgICAgICAgICAgIHRoZW1lUGFyYW1zW2tleV0gPSBjb2xvcjtcbiAgICAgICAgICAgICAgICBpZiAoa2V5ID09ICdiZ19jb2xvcicpIHtcbiAgICAgICAgICAgICAgICAgICAgY29sb3JTY2hlbWUgPSBpc0NvbG9yRGFyayhjb2xvcikgPyAnZGFyaycgOiAnbGlnaHQnO1xuICAgICAgICAgICAgICAgICAgICBzZXRDc3NQcm9wZXJ0eSgnY29sb3Itc2NoZW1lJywgY29sb3JTY2hlbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBrZXkgPSAndGhlbWUtJyArIGtleS5zcGxpdCgnXycpLmpvaW4oJy0nKTtcbiAgICAgICAgICAgICAgICBzZXRDc3NQcm9wZXJ0eShrZXksIGNvbG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBVdGlscy5zZXNzaW9uU3RvcmFnZVNldCgndGhlbWVQYXJhbXMnLCB0aGVtZVBhcmFtcyk7XG4gICAgfVxuICAgIHZhciB3ZWJBcHBDYWxsYmFja3MgPSB7fTtcbiAgICBmdW5jdGlvbiBnZW5lcmF0ZUNhbGxiYWNrSWQobGVuKSB7XG4gICAgICAgIHZhciB0cmllcyA9IDEwMDtcbiAgICAgICAgd2hpbGUgKC0tdHJpZXMpIHtcbiAgICAgICAgICAgIHZhciBpZCA9ICcnLCBjaGFycyA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ekFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaMDEyMzQ1Njc4OScsIGNoYXJzX2xlbiA9IGNoYXJzLmxlbmd0aDtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZCArPSBjaGFyc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjaGFyc19sZW4pXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghd2ViQXBwQ2FsbGJhY2tzW2lkXSkge1xuICAgICAgICAgICAgICAgIHdlYkFwcENhbGxiYWNrc1tpZF0gPSB7fTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgRXJyb3IoJ1dlYkFwcENhbGxiYWNrSWRHZW5lcmF0ZUZhaWxlZCcpO1xuICAgIH1cbiAgICB2YXIgdmlld3BvcnRIZWlnaHQgPSBmYWxzZSwgdmlld3BvcnRTdGFibGVIZWlnaHQgPSBmYWxzZSwgaXNFeHBhbmRlZCA9IHRydWU7XG4gICAgZnVuY3Rpb24gc2V0Vmlld3BvcnRIZWlnaHQoZGF0YSkge1xuICAgICAgICBpZiAodHlwZW9mIGRhdGEgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBpc0V4cGFuZGVkID0gISFkYXRhLmlzX2V4cGFuZGVkO1xuICAgICAgICAgICAgdmlld3BvcnRIZWlnaHQgPSBkYXRhLmhlaWdodDtcbiAgICAgICAgICAgIGlmIChkYXRhLmlzX3N0YXRlX3N0YWJsZSkge1xuICAgICAgICAgICAgICAgIHZpZXdwb3J0U3RhYmxlSGVpZ2h0ID0gZGF0YS5oZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWNlaXZlV2ViVmlld0V2ZW50KCd2aWV3cG9ydENoYW5nZWQnLCB7XG4gICAgICAgICAgICAgICAgaXNTdGF0ZVN0YWJsZTogISFkYXRhLmlzX3N0YXRlX3N0YWJsZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGhlaWdodCwgc3RhYmxlX2hlaWdodDtcbiAgICAgICAgaWYgKHZpZXdwb3J0SGVpZ2h0ICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgaGVpZ2h0ID0gKHZpZXdwb3J0SGVpZ2h0IC0gYm90dG9tQmFySGVpZ2h0KSArICdweCc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBoZWlnaHQgPSBib3R0b21CYXJIZWlnaHQgPyAnY2FsYygxMDB2aCAtICcgKyBib3R0b21CYXJIZWlnaHQgKyAncHgpJyA6ICcxMDB2aCc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZpZXdwb3J0U3RhYmxlSGVpZ2h0ICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgc3RhYmxlX2hlaWdodCA9ICh2aWV3cG9ydFN0YWJsZUhlaWdodCAtIGJvdHRvbUJhckhlaWdodCkgKyAncHgnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3RhYmxlX2hlaWdodCA9IGJvdHRvbUJhckhlaWdodCA/ICdjYWxjKDEwMHZoIC0gJyArIGJvdHRvbUJhckhlaWdodCArICdweCknIDogJzEwMHZoJztcbiAgICAgICAgfVxuICAgICAgICBzZXRDc3NQcm9wZXJ0eSgndmlld3BvcnQtaGVpZ2h0JywgaGVpZ2h0KTtcbiAgICAgICAgc2V0Q3NzUHJvcGVydHkoJ3ZpZXdwb3J0LXN0YWJsZS1oZWlnaHQnLCBzdGFibGVfaGVpZ2h0KTtcbiAgICB9XG4gICAgdmFyIGlzQ2xvc2luZ0NvbmZpcm1hdGlvbkVuYWJsZWQgPSBmYWxzZTtcbiAgICBmdW5jdGlvbiBzZXRDbG9zaW5nQ29uZmlybWF0aW9uKG5lZWRfY29uZmlybWF0aW9uKSB7XG4gICAgICAgIGlmICghdmVyc2lvbkF0TGVhc3QoJzYuMicpKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ1tUZWxlZ3JhbS5XZWJBcHBdIENsb3NpbmcgY29uZmlybWF0aW9uIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdmVyc2lvbiAnICsgd2ViQXBwVmVyc2lvbik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaXNDbG9zaW5nQ29uZmlybWF0aW9uRW5hYmxlZCA9ICEhbmVlZF9jb25maXJtYXRpb247XG4gICAgICAgIFdlYlZpZXcucG9zdEV2ZW50KCd3ZWJfYXBwX3NldHVwX2Nsb3NpbmdfYmVoYXZpb3InLCBmYWxzZSwgeyBuZWVkX2NvbmZpcm1hdGlvbjogaXNDbG9zaW5nQ29uZmlybWF0aW9uRW5hYmxlZCB9KTtcbiAgICB9XG4gICAgdmFyIGlzVmVydGljYWxTd2lwZXNFbmFibGVkID0gdHJ1ZTtcbiAgICBmdW5jdGlvbiB0b2dnbGVWZXJ0aWNhbFN3aXBlcyhlbmFibGVfc3dpcGVzKSB7XG4gICAgICAgIGlmICghdmVyc2lvbkF0TGVhc3QoJzcuNycpKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ1tUZWxlZ3JhbS5XZWJBcHBdIENoYW5naW5nIHN3aXBlcyBiZWhhdmlvciBpcyBub3Qgc3VwcG9ydGVkIGluIHZlcnNpb24gJyArIHdlYkFwcFZlcnNpb24pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlzVmVydGljYWxTd2lwZXNFbmFibGVkID0gISFlbmFibGVfc3dpcGVzO1xuICAgICAgICBXZWJWaWV3LnBvc3RFdmVudCgnd2ViX2FwcF9zZXR1cF9zd2lwZV9iZWhhdmlvcicsIGZhbHNlLCB7IGFsbG93X3ZlcnRpY2FsX3N3aXBlOiBpc1ZlcnRpY2FsU3dpcGVzRW5hYmxlZCB9KTtcbiAgICB9XG4gICAgdmFyIGhlYWRlckNvbG9yS2V5ID0gJ2JnX2NvbG9yJywgaGVhZGVyQ29sb3IgPSBudWxsO1xuICAgIGZ1bmN0aW9uIGdldEhlYWRlckNvbG9yKCkge1xuICAgICAgICBpZiAoaGVhZGVyQ29sb3JLZXkgPT0gJ3NlY29uZGFyeV9iZ19jb2xvcicpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGVtZVBhcmFtcy5zZWNvbmRhcnlfYmdfY29sb3I7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaGVhZGVyQ29sb3JLZXkgPT0gJ2JnX2NvbG9yJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoZW1lUGFyYW1zLmJnX2NvbG9yO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoZWFkZXJDb2xvcjtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2V0SGVhZGVyQ29sb3IoY29sb3IpIHtcbiAgICAgICAgaWYgKCF2ZXJzaW9uQXRMZWFzdCgnNi4xJykpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignW1RlbGVncmFtLldlYkFwcF0gSGVhZGVyIGNvbG9yIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdmVyc2lvbiAnICsgd2ViQXBwVmVyc2lvbik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF2ZXJzaW9uQXRMZWFzdCgnNi45JykpIHtcbiAgICAgICAgICAgIGlmICh0aGVtZVBhcmFtcy5iZ19jb2xvciAmJlxuICAgICAgICAgICAgICAgIHRoZW1lUGFyYW1zLmJnX2NvbG9yID09IGNvbG9yKSB7XG4gICAgICAgICAgICAgICAgY29sb3IgPSAnYmdfY29sb3InO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhlbWVQYXJhbXMuc2Vjb25kYXJ5X2JnX2NvbG9yICYmXG4gICAgICAgICAgICAgICAgdGhlbWVQYXJhbXMuc2Vjb25kYXJ5X2JnX2NvbG9yID09IGNvbG9yKSB7XG4gICAgICAgICAgICAgICAgY29sb3IgPSAnc2Vjb25kYXJ5X2JnX2NvbG9yJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgaGVhZF9jb2xvciA9IG51bGwsIGNvbG9yX2tleSA9IG51bGw7XG4gICAgICAgIGlmIChjb2xvciA9PSAnYmdfY29sb3InIHx8IGNvbG9yID09ICdzZWNvbmRhcnlfYmdfY29sb3InKSB7XG4gICAgICAgICAgICBjb2xvcl9rZXkgPSBjb2xvcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2ZXJzaW9uQXRMZWFzdCgnNi45JykpIHtcbiAgICAgICAgICAgIGhlYWRfY29sb3IgPSBwYXJzZUNvbG9yVG9IZXgoY29sb3IpO1xuICAgICAgICAgICAgaWYgKCFoZWFkX2NvbG9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignW1RlbGVncmFtLldlYkFwcF0gSGVhZGVyIGNvbG9yIGZvcm1hdCBpcyBpbnZhbGlkJywgY29sb3IpO1xuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKCdXZWJBcHBIZWFkZXJDb2xvckludmFsaWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIXZlcnNpb25BdExlYXN0KCc2LjknKSAmJlxuICAgICAgICAgICAgY29sb3Jfa2V5ICE9ICdiZ19jb2xvcicgJiZcbiAgICAgICAgICAgIGNvbG9yX2tleSAhPSAnc2Vjb25kYXJ5X2JnX2NvbG9yJykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignW1RlbGVncmFtLldlYkFwcF0gSGVhZGVyIGNvbG9yIGtleSBzaG91bGQgYmUgb25lIG9mIFRlbGVncmFtLldlYkFwcC50aGVtZVBhcmFtcy5iZ19jb2xvciwgVGVsZWdyYW0uV2ViQXBwLnRoZW1lUGFyYW1zLnNlY29uZGFyeV9iZ19jb2xvciwgXFwnYmdfY29sb3JcXCcsIFxcJ3NlY29uZGFyeV9iZ19jb2xvclxcJycsIGNvbG9yKTtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdXZWJBcHBIZWFkZXJDb2xvcktleUludmFsaWQnKTtcbiAgICAgICAgfVxuICAgICAgICBoZWFkZXJDb2xvcktleSA9IGNvbG9yX2tleTtcbiAgICAgICAgaGVhZGVyQ29sb3IgPSBoZWFkX2NvbG9yO1xuICAgICAgICB1cGRhdGVIZWFkZXJDb2xvcigpO1xuICAgIH1cbiAgICB2YXIgYXBwSGVhZGVyQ29sb3JLZXkgPSBudWxsLCBhcHBIZWFkZXJDb2xvciA9IG51bGw7XG4gICAgZnVuY3Rpb24gdXBkYXRlSGVhZGVyQ29sb3IoKSB7XG4gICAgICAgIGlmIChhcHBIZWFkZXJDb2xvcktleSAhPSBoZWFkZXJDb2xvcktleSB8fFxuICAgICAgICAgICAgYXBwSGVhZGVyQ29sb3IgIT0gaGVhZGVyQ29sb3IpIHtcbiAgICAgICAgICAgIGFwcEhlYWRlckNvbG9yS2V5ID0gaGVhZGVyQ29sb3JLZXk7XG4gICAgICAgICAgICBhcHBIZWFkZXJDb2xvciA9IGhlYWRlckNvbG9yO1xuICAgICAgICAgICAgaWYgKGFwcEhlYWRlckNvbG9yKSB7XG4gICAgICAgICAgICAgICAgV2ViVmlldy5wb3N0RXZlbnQoJ3dlYl9hcHBfc2V0X2hlYWRlcl9jb2xvcicsIGZhbHNlLCB7IGNvbG9yOiBoZWFkZXJDb2xvciB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIFdlYlZpZXcucG9zdEV2ZW50KCd3ZWJfYXBwX3NldF9oZWFkZXJfY29sb3InLCBmYWxzZSwgeyBjb2xvcl9rZXk6IGhlYWRlckNvbG9yS2V5IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHZhciBiYWNrZ3JvdW5kQ29sb3IgPSAnYmdfY29sb3InO1xuICAgIGZ1bmN0aW9uIGdldEJhY2tncm91bmRDb2xvcigpIHtcbiAgICAgICAgaWYgKGJhY2tncm91bmRDb2xvciA9PSAnc2Vjb25kYXJ5X2JnX2NvbG9yJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoZW1lUGFyYW1zLnNlY29uZGFyeV9iZ19jb2xvcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChiYWNrZ3JvdW5kQ29sb3IgPT0gJ2JnX2NvbG9yJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoZW1lUGFyYW1zLmJnX2NvbG9yO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBiYWNrZ3JvdW5kQ29sb3I7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNldEJhY2tncm91bmRDb2xvcihjb2xvcikge1xuICAgICAgICBpZiAoIXZlcnNpb25BdExlYXN0KCc2LjEnKSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdbVGVsZWdyYW0uV2ViQXBwXSBCYWNrZ3JvdW5kIGNvbG9yIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdmVyc2lvbiAnICsgd2ViQXBwVmVyc2lvbik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGJnX2NvbG9yO1xuICAgICAgICBpZiAoY29sb3IgPT0gJ2JnX2NvbG9yJyB8fCBjb2xvciA9PSAnc2Vjb25kYXJ5X2JnX2NvbG9yJykge1xuICAgICAgICAgICAgYmdfY29sb3IgPSBjb2xvcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGJnX2NvbG9yID0gcGFyc2VDb2xvclRvSGV4KGNvbG9yKTtcbiAgICAgICAgICAgIGlmICghYmdfY29sb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbVGVsZWdyYW0uV2ViQXBwXSBCYWNrZ3JvdW5kIGNvbG9yIGZvcm1hdCBpcyBpbnZhbGlkJywgY29sb3IpO1xuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKCdXZWJBcHBCYWNrZ3JvdW5kQ29sb3JJbnZhbGlkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYmFja2dyb3VuZENvbG9yID0gYmdfY29sb3I7XG4gICAgICAgIHVwZGF0ZUJhY2tncm91bmRDb2xvcigpO1xuICAgIH1cbiAgICB2YXIgYXBwQmFja2dyb3VuZENvbG9yID0gbnVsbDtcbiAgICBmdW5jdGlvbiB1cGRhdGVCYWNrZ3JvdW5kQ29sb3IoKSB7XG4gICAgICAgIHZhciBjb2xvciA9IGdldEJhY2tncm91bmRDb2xvcigpO1xuICAgICAgICBpZiAoYXBwQmFja2dyb3VuZENvbG9yICE9IGNvbG9yKSB7XG4gICAgICAgICAgICBhcHBCYWNrZ3JvdW5kQ29sb3IgPSBjb2xvcjtcbiAgICAgICAgICAgIFdlYlZpZXcucG9zdEV2ZW50KCd3ZWJfYXBwX3NldF9iYWNrZ3JvdW5kX2NvbG9yJywgZmFsc2UsIHsgY29sb3I6IGNvbG9yIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHZhciBib3R0b21CYXJDb2xvciA9ICdib3R0b21fYmFyX2JnX2NvbG9yJztcbiAgICBmdW5jdGlvbiBnZXRCb3R0b21CYXJDb2xvcigpIHtcbiAgICAgICAgaWYgKGJvdHRvbUJhckNvbG9yID09ICdib3R0b21fYmFyX2JnX2NvbG9yJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoZW1lUGFyYW1zLmJvdHRvbV9iYXJfYmdfY29sb3IgfHwgdGhlbWVQYXJhbXMuc2Vjb25kYXJ5X2JnX2NvbG9yIHx8ICcjZmZmZmZmJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChib3R0b21CYXJDb2xvciA9PSAnc2Vjb25kYXJ5X2JnX2NvbG9yJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoZW1lUGFyYW1zLnNlY29uZGFyeV9iZ19jb2xvcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChib3R0b21CYXJDb2xvciA9PSAnYmdfY29sb3InKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhlbWVQYXJhbXMuYmdfY29sb3I7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJvdHRvbUJhckNvbG9yO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzZXRCb3R0b21CYXJDb2xvcihjb2xvcikge1xuICAgICAgICBpZiAoIXZlcnNpb25BdExlYXN0KCc3LjEwJykpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignW1RlbGVncmFtLldlYkFwcF0gQm90dG9tIGJhciBjb2xvciBpcyBub3Qgc3VwcG9ydGVkIGluIHZlcnNpb24gJyArIHdlYkFwcFZlcnNpb24pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBiZ19jb2xvcjtcbiAgICAgICAgaWYgKGNvbG9yID09ICdiZ19jb2xvcicgfHwgY29sb3IgPT0gJ3NlY29uZGFyeV9iZ19jb2xvcicgfHwgY29sb3IgPT0gJ2JvdHRvbV9iYXJfYmdfY29sb3InKSB7XG4gICAgICAgICAgICBiZ19jb2xvciA9IGNvbG9yO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYmdfY29sb3IgPSBwYXJzZUNvbG9yVG9IZXgoY29sb3IpO1xuICAgICAgICAgICAgaWYgKCFiZ19jb2xvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tUZWxlZ3JhbS5XZWJBcHBdIEJvdHRvbSBiYXIgY29sb3IgZm9ybWF0IGlzIGludmFsaWQnLCBjb2xvcik7XG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1dlYkFwcEJvdHRvbUJhckNvbG9ySW52YWxpZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJvdHRvbUJhckNvbG9yID0gYmdfY29sb3I7XG4gICAgICAgIHVwZGF0ZUJvdHRvbUJhckNvbG9yKCk7XG4gICAgICAgIHdpbmRvdy5UZWxlZ3JhbS5XZWJBcHAuU2Vjb25kYXJ5QnV0dG9uLnNldFBhcmFtcyh7fSk7XG4gICAgfVxuICAgIHZhciBhcHBCb3R0b21CYXJDb2xvciA9IG51bGw7XG4gICAgZnVuY3Rpb24gdXBkYXRlQm90dG9tQmFyQ29sb3IoKSB7XG4gICAgICAgIHZhciBjb2xvciA9IGdldEJvdHRvbUJhckNvbG9yKCk7XG4gICAgICAgIGlmIChhcHBCb3R0b21CYXJDb2xvciAhPSBjb2xvcikge1xuICAgICAgICAgICAgYXBwQm90dG9tQmFyQ29sb3IgPSBjb2xvcjtcbiAgICAgICAgICAgIFdlYlZpZXcucG9zdEV2ZW50KCd3ZWJfYXBwX3NldF9ib3R0b21fYmFyX2NvbG9yJywgZmFsc2UsIHsgY29sb3I6IGNvbG9yIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbml0UGFyYW1zLnRnV2ViQXBwRGVidWcpIHtcbiAgICAgICAgICAgIHVwZGF0ZURlYnVnQm90dG9tQmFyKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gcGFyc2VDb2xvclRvSGV4KGNvbG9yKSB7XG4gICAgICAgIGNvbG9yICs9ICcnO1xuICAgICAgICB2YXIgbWF0Y2g7XG4gICAgICAgIGlmIChtYXRjaCA9IC9eXFxzKiMoWzAtOWEtZl17Nn0pXFxzKiQvaS5leGVjKGNvbG9yKSkge1xuICAgICAgICAgICAgcmV0dXJuICcjJyArIG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobWF0Y2ggPSAvXlxccyojKFswLTlhLWZdKShbMC05YS1mXSkoWzAtOWEtZl0pXFxzKiQvaS5leGVjKGNvbG9yKSkge1xuICAgICAgICAgICAgcmV0dXJuICgnIycgKyBtYXRjaFsxXSArIG1hdGNoWzFdICsgbWF0Y2hbMl0gKyBtYXRjaFsyXSArIG1hdGNoWzNdICsgbWF0Y2hbM10pLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobWF0Y2ggPSAvXlxccypyZ2JhP1xcKChcXGQrKSxcXHMqKFxcZCspLFxccyooXFxkKykoPzosXFxzKihcXGQrXFwuezAsMX1cXGQqKSk/XFwpXFxzKiQvLmV4ZWMoY29sb3IpKSB7XG4gICAgICAgICAgICB2YXIgciA9IHBhcnNlSW50KG1hdGNoWzFdKSwgZyA9IHBhcnNlSW50KG1hdGNoWzJdKSwgYiA9IHBhcnNlSW50KG1hdGNoWzNdKTtcbiAgICAgICAgICAgIHIgPSAociA8IDE2ID8gJzAnIDogJycpICsgci50b1N0cmluZygxNik7XG4gICAgICAgICAgICBnID0gKGcgPCAxNiA/ICcwJyA6ICcnKSArIGcudG9TdHJpbmcoMTYpO1xuICAgICAgICAgICAgYiA9IChiIDwgMTYgPyAnMCcgOiAnJykgKyBiLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgICAgIHJldHVybiAnIycgKyByICsgZyArIGI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc0NvbG9yRGFyayhyZ2IpIHtcbiAgICAgICAgcmdiID0gcmdiLnJlcGxhY2UoL1tcXHMjXS9nLCAnJyk7XG4gICAgICAgIGlmIChyZ2IubGVuZ3RoID09IDMpIHtcbiAgICAgICAgICAgIHJnYiA9IHJnYlswXSArIHJnYlswXSArIHJnYlsxXSArIHJnYlsxXSArIHJnYlsyXSArIHJnYlsyXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgciA9IHBhcnNlSW50KHJnYi5zdWJzdHIoMCwgMiksIDE2KTtcbiAgICAgICAgdmFyIGcgPSBwYXJzZUludChyZ2Iuc3Vic3RyKDIsIDIpLCAxNik7XG4gICAgICAgIHZhciBiID0gcGFyc2VJbnQocmdiLnN1YnN0cig0LCAyKSwgMTYpO1xuICAgICAgICB2YXIgaHNwID0gTWF0aC5zcXJ0KDAuMjk5ICogKHIgKiByKSArIDAuNTg3ICogKGcgKiBnKSArIDAuMTE0ICogKGIgKiBiKSk7XG4gICAgICAgIHJldHVybiBoc3AgPCAxMjA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHZlcnNpb25Db21wYXJlKHYxLCB2Mikge1xuICAgICAgICBpZiAodHlwZW9mIHYxICE9PSAnc3RyaW5nJylcbiAgICAgICAgICAgIHYxID0gJyc7XG4gICAgICAgIGlmICh0eXBlb2YgdjIgIT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgdjIgPSAnJztcbiAgICAgICAgdjEgPSB2MS5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJykuc3BsaXQoJy4nKTtcbiAgICAgICAgdjIgPSB2Mi5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJykuc3BsaXQoJy4nKTtcbiAgICAgICAgdmFyIGEgPSBNYXRoLm1heCh2MS5sZW5ndGgsIHYyLmxlbmd0aCksIGksIHAxLCBwMjtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGE7IGkrKykge1xuICAgICAgICAgICAgcDEgPSBwYXJzZUludCh2MVtpXSkgfHwgMDtcbiAgICAgICAgICAgIHAyID0gcGFyc2VJbnQodjJbaV0pIHx8IDA7XG4gICAgICAgICAgICBpZiAocDEgPT0gcDIpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBpZiAocDEgPiBwMilcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gdmVyc2lvbkF0TGVhc3QodmVyKSB7XG4gICAgICAgIHJldHVybiB2ZXJzaW9uQ29tcGFyZSh3ZWJBcHBWZXJzaW9uLCB2ZXIpID49IDA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJ5dGVMZW5ndGgoc3RyKSB7XG4gICAgICAgIGlmICh3aW5kb3cuQmxvYikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEJsb2IoW3N0cl0pLnNpemU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkgeyB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHMgPSBzdHIubGVuZ3RoO1xuICAgICAgICBmb3IgKHZhciBpID0gc3RyLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICB2YXIgY29kZSA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAgICAgaWYgKGNvZGUgPiAweDdmICYmIGNvZGUgPD0gMHg3ZmYpXG4gICAgICAgICAgICAgICAgcysrO1xuICAgICAgICAgICAgZWxzZSBpZiAoY29kZSA+IDB4N2ZmICYmIGNvZGUgPD0gMHhmZmZmKVxuICAgICAgICAgICAgICAgIHMgKz0gMjtcbiAgICAgICAgICAgIGlmIChjb2RlID49IDB4ZGMwMCAmJiBjb2RlIDw9IDB4ZGZmZilcbiAgICAgICAgICAgICAgICBpLS07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHM7XG4gICAgfVxuICAgIHZhciBCYWNrQnV0dG9uID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGlzVmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICB2YXIgYmFja0J1dHRvbiA9IHt9O1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYmFja0J1dHRvbiwgJ2lzVmlzaWJsZScsIHtcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbCkgeyBzZXRQYXJhbXMoeyBpc192aXNpYmxlOiB2YWwgfSk7IH0sXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGlzVmlzaWJsZTsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBjdXJCdXR0b25TdGF0ZSA9IG51bGw7XG4gICAgICAgIFdlYlZpZXcub25FdmVudCgnYmFja19idXR0b25fcHJlc3NlZCcsIG9uQmFja0J1dHRvblByZXNzZWQpO1xuICAgICAgICBmdW5jdGlvbiBvbkJhY2tCdXR0b25QcmVzc2VkKCkge1xuICAgICAgICAgICAgcmVjZWl2ZVdlYlZpZXdFdmVudCgnYmFja0J1dHRvbkNsaWNrZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBidXR0b25QYXJhbXMoKSB7XG4gICAgICAgICAgICByZXR1cm4geyBpc192aXNpYmxlOiBpc1Zpc2libGUgfTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBidXR0b25TdGF0ZShidG5fcGFyYW1zKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGJ0bl9wYXJhbXMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgYnRuX3BhcmFtcyA9IGJ1dHRvblBhcmFtcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGJ0bl9wYXJhbXMpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGJ1dHRvbkNoZWNrVmVyc2lvbigpIHtcbiAgICAgICAgICAgIGlmICghdmVyc2lvbkF0TGVhc3QoJzYuMScpKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdbVGVsZWdyYW0uV2ViQXBwXSBCYWNrQnV0dG9uIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdmVyc2lvbiAnICsgd2ViQXBwVmVyc2lvbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlQnV0dG9uKCkge1xuICAgICAgICAgICAgdmFyIGJ0bl9wYXJhbXMgPSBidXR0b25QYXJhbXMoKTtcbiAgICAgICAgICAgIHZhciBidG5fc3RhdGUgPSBidXR0b25TdGF0ZShidG5fcGFyYW1zKTtcbiAgICAgICAgICAgIGlmIChjdXJCdXR0b25TdGF0ZSA9PT0gYnRuX3N0YXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VyQnV0dG9uU3RhdGUgPSBidG5fc3RhdGU7XG4gICAgICAgICAgICBXZWJWaWV3LnBvc3RFdmVudCgnd2ViX2FwcF9zZXR1cF9iYWNrX2J1dHRvbicsIGZhbHNlLCBidG5fcGFyYW1zKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBzZXRQYXJhbXMocGFyYW1zKSB7XG4gICAgICAgICAgICBpZiAoIWJ1dHRvbkNoZWNrVmVyc2lvbigpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJhY2tCdXR0b247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIHBhcmFtcy5pc192aXNpYmxlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIGlzVmlzaWJsZSA9ICEhcGFyYW1zLmlzX3Zpc2libGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB1cGRhdGVCdXR0b24oKTtcbiAgICAgICAgICAgIHJldHVybiBiYWNrQnV0dG9uO1xuICAgICAgICB9XG4gICAgICAgIGJhY2tCdXR0b24ub25DbGljayA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAgICAgaWYgKGJ1dHRvbkNoZWNrVmVyc2lvbigpKSB7XG4gICAgICAgICAgICAgICAgb25XZWJWaWV3RXZlbnQoJ2JhY2tCdXR0b25DbGlja2VkJywgY2FsbGJhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGJhY2tCdXR0b247XG4gICAgICAgIH07XG4gICAgICAgIGJhY2tCdXR0b24ub2ZmQ2xpY2sgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGlmIChidXR0b25DaGVja1ZlcnNpb24oKSkge1xuICAgICAgICAgICAgICAgIG9mZldlYlZpZXdFdmVudCgnYmFja0J1dHRvbkNsaWNrZWQnLCBjYWxsYmFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYmFja0J1dHRvbjtcbiAgICAgICAgfTtcbiAgICAgICAgYmFja0J1dHRvbi5zaG93ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHNldFBhcmFtcyh7IGlzX3Zpc2libGU6IHRydWUgfSk7XG4gICAgICAgIH07XG4gICAgICAgIGJhY2tCdXR0b24uaGlkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBzZXRQYXJhbXMoeyBpc192aXNpYmxlOiBmYWxzZSB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGJhY2tCdXR0b247XG4gICAgfSkoKTtcbiAgICB2YXIgZGVidWdCb3R0b21CYXIgPSBudWxsLCBkZWJ1Z0JvdHRvbUJhckJ0bnMgPSB7fSwgYm90dG9tQmFySGVpZ2h0ID0gMDtcbiAgICBpZiAoaW5pdFBhcmFtcy50Z1dlYkFwcERlYnVnKSB7XG4gICAgICAgIGRlYnVnQm90dG9tQmFyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGctYm90dG9tLWJhcicpO1xuICAgICAgICB2YXIgZGVidWdCb3R0b21CYXJTdHlsZSA9IHtcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGdhcDogJzdweCcsXG4gICAgICAgICAgICBmb250OiAnNjAwIDE0cHgvMThweCBzYW5zLXNlcmlmJyxcbiAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiBnZXRCb3R0b21CYXJDb2xvcigpLFxuICAgICAgICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICAgICAgICBsZWZ0OiAnMCcsXG4gICAgICAgICAgICByaWdodDogJzAnLFxuICAgICAgICAgICAgYm90dG9tOiAnMCcsXG4gICAgICAgICAgICBtYXJnaW46ICcwJyxcbiAgICAgICAgICAgIHBhZGRpbmc6ICc3cHgnLFxuICAgICAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgICAgICAgekluZGV4OiAnMTAwMDAnXG4gICAgICAgIH07XG4gICAgICAgIGZvciAodmFyIGsgaW4gZGVidWdCb3R0b21CYXJTdHlsZSkge1xuICAgICAgICAgICAgZGVidWdCb3R0b21CYXIuc3R5bGVba10gPSBkZWJ1Z0JvdHRvbUJhclN0eWxlW2tdO1xuICAgICAgICB9XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbiBvbkRvbUxvYWRlZChldmVudCkge1xuICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIG9uRG9tTG9hZGVkKTtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZGVidWdCb3R0b21CYXIpO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGFuaW1TdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgICAgIGFuaW1TdHlsZS5pbm5lckhUTUwgPSAndGctYm90dG9tLWJ1dHRvbi5zaGluZSB7IHBvc2l0aW9uOiByZWxhdGl2ZTsgb3ZlcmZsb3c6IGhpZGRlbjsgfSB0Zy1ib3R0b20tYnV0dG9uLnNoaW5lOmJlZm9yZSB7IGNvbnRlbnQ6XCJcIjsgcG9zaXRpb246IGFic29sdXRlOyB0b3A6IDA7IHdpZHRoOiAxMDAlOyBoZWlnaHQ6IDEwMCU7IGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgxMjBkZWcsIHRyYW5zcGFyZW50LCByZ2JhKDI1NSwgMjU1LCAyNTUsIC4yKSwgdHJhbnNwYXJlbnQpOyBhbmltYXRpb246IHRnLWJvdHRvbS1idXR0b24tc2hpbmUgNXMgZWFzZS1pbi1vdXQgaW5maW5pdGU7IH0gQC13ZWJraXQta2V5ZnJhbWVzIHRnLWJvdHRvbS1idXR0b24tc2hpbmUgeyAwJSB7bGVmdDogLTEwMCU7fSAxMiUsMTAwJSB7bGVmdDogMTAwJX19IEBrZXlmcmFtZXMgdGctYm90dG9tLWJ1dHRvbi1zaGluZSB7IDAlIHtsZWZ0OiAtMTAwJTt9IDEyJSwxMDAlIHtsZWZ0OiAxMDAlfX0nO1xuICAgICAgICBkZWJ1Z0JvdHRvbUJhci5hcHBlbmRDaGlsZChhbmltU3R5bGUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB1cGRhdGVEZWJ1Z0JvdHRvbUJhcigpIHtcbiAgICAgICAgdmFyIG1haW5CdG4gPSBkZWJ1Z0JvdHRvbUJhckJ0bnMubWFpbi5fYm90dG9tQnV0dG9uO1xuICAgICAgICB2YXIgc2Vjb25kYXJ5QnRuID0gZGVidWdCb3R0b21CYXJCdG5zLnNlY29uZGFyeS5fYm90dG9tQnV0dG9uO1xuICAgICAgICBpZiAobWFpbkJ0bi5pc1Zpc2libGUgfHwgc2Vjb25kYXJ5QnRuLmlzVmlzaWJsZSkge1xuICAgICAgICAgICAgZGVidWdCb3R0b21CYXIuc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcbiAgICAgICAgICAgIGJvdHRvbUJhckhlaWdodCA9IDU4O1xuICAgICAgICAgICAgaWYgKG1haW5CdG4uaXNWaXNpYmxlICYmIHNlY29uZGFyeUJ0bi5pc1Zpc2libGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2Vjb25kYXJ5QnRuLnBvc2l0aW9uID09ICd0b3AnKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlYnVnQm90dG9tQmFyLnN0eWxlLmZsZXhEaXJlY3Rpb24gPSAnY29sdW1uLXJldmVyc2UnO1xuICAgICAgICAgICAgICAgICAgICBib3R0b21CYXJIZWlnaHQgKz0gNTE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNlY29uZGFyeUJ0bi5wb3NpdGlvbiA9PSAnYm90dG9tJykge1xuICAgICAgICAgICAgICAgICAgICBkZWJ1Z0JvdHRvbUJhci5zdHlsZS5mbGV4RGlyZWN0aW9uID0gJ2NvbHVtbic7XG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbUJhckhlaWdodCArPSA1MTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc2Vjb25kYXJ5QnRuLnBvc2l0aW9uID09ICdsZWZ0Jykge1xuICAgICAgICAgICAgICAgICAgICBkZWJ1Z0JvdHRvbUJhci5zdHlsZS5mbGV4RGlyZWN0aW9uID0gJ3Jvdy1yZXZlcnNlJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc2Vjb25kYXJ5QnRuLnBvc2l0aW9uID09ICdyaWdodCcpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVidWdCb3R0b21CYXIuc3R5bGUuZmxleERpcmVjdGlvbiA9ICdyb3cnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRlYnVnQm90dG9tQmFyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICBib3R0b21CYXJIZWlnaHQgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGRlYnVnQm90dG9tQmFyLnN0eWxlLmJhY2tncm91bmQgPSBnZXRCb3R0b21CYXJDb2xvcigpO1xuICAgICAgICBpZiAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuYm94U2l6aW5nID0gJ2JvcmRlci1ib3gnO1xuICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLnBhZGRpbmdCb3R0b20gPSBib3R0b21CYXJIZWlnaHQgKyAncHgnO1xuICAgICAgICB9XG4gICAgICAgIHNldFZpZXdwb3J0SGVpZ2h0KCk7XG4gICAgfVxuICAgIHZhciBCb3R0b21CdXR0b25Db25zdHJ1Y3RvciA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICAgIHZhciBpc01haW5CdXR0b24gPSAodHlwZSA9PSAnbWFpbicpO1xuICAgICAgICBpZiAoaXNNYWluQnV0dG9uKSB7XG4gICAgICAgICAgICB2YXIgc2V0dXBGbk5hbWUgPSAnd2ViX2FwcF9zZXR1cF9tYWluX2J1dHRvbic7XG4gICAgICAgICAgICB2YXIgdGdFdmVudE5hbWUgPSAnbWFpbl9idXR0b25fcHJlc3NlZCc7XG4gICAgICAgICAgICB2YXIgd2ViVmlld0V2ZW50TmFtZSA9ICdtYWluQnV0dG9uQ2xpY2tlZCc7XG4gICAgICAgICAgICB2YXIgYnV0dG9uVGV4dERlZmF1bHQgPSAnQ29udGludWUnO1xuICAgICAgICAgICAgdmFyIGJ1dHRvbkNvbG9yRGVmYXVsdCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoZW1lUGFyYW1zLmJ1dHRvbl9jb2xvciB8fCAnIzI0ODFjYyc7IH07XG4gICAgICAgICAgICB2YXIgYnV0dG9uVGV4dENvbG9yRGVmYXVsdCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoZW1lUGFyYW1zLmJ1dHRvbl90ZXh0X2NvbG9yIHx8ICcjZmZmZmZmJzsgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBzZXR1cEZuTmFtZSA9ICd3ZWJfYXBwX3NldHVwX3NlY29uZGFyeV9idXR0b24nO1xuICAgICAgICAgICAgdmFyIHRnRXZlbnROYW1lID0gJ3NlY29uZGFyeV9idXR0b25fcHJlc3NlZCc7XG4gICAgICAgICAgICB2YXIgd2ViVmlld0V2ZW50TmFtZSA9ICdzZWNvbmRhcnlCdXR0b25DbGlja2VkJztcbiAgICAgICAgICAgIHZhciBidXR0b25UZXh0RGVmYXVsdCA9ICdDYW5jZWwnO1xuICAgICAgICAgICAgdmFyIGJ1dHRvbkNvbG9yRGVmYXVsdCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdldEJvdHRvbUJhckNvbG9yKCk7IH07XG4gICAgICAgICAgICB2YXIgYnV0dG9uVGV4dENvbG9yRGVmYXVsdCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoZW1lUGFyYW1zLmJ1dHRvbl9jb2xvciB8fCAnIzI0ODFjYyc7IH07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGlzVmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICB2YXIgaXNBY3RpdmUgPSB0cnVlO1xuICAgICAgICB2YXIgaGFzU2hpbmVFZmZlY3QgPSBmYWxzZTtcbiAgICAgICAgdmFyIGlzUHJvZ3Jlc3NWaXNpYmxlID0gZmFsc2U7XG4gICAgICAgIHZhciBidXR0b25UeXBlID0gdHlwZTtcbiAgICAgICAgdmFyIGJ1dHRvblRleHQgPSBidXR0b25UZXh0RGVmYXVsdDtcbiAgICAgICAgdmFyIGJ1dHRvbkNvbG9yID0gZmFsc2U7XG4gICAgICAgIHZhciBidXR0b25UZXh0Q29sb3IgPSBmYWxzZTtcbiAgICAgICAgdmFyIGJ1dHRvblBvc2l0aW9uID0gJ2xlZnQnO1xuICAgICAgICB2YXIgYm90dG9tQnV0dG9uID0ge307XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShib3R0b21CdXR0b24sICd0eXBlJywge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBidXR0b25UeXBlOyB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGJvdHRvbUJ1dHRvbiwgJ3RleHQnLCB7XG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWwpIHsgYm90dG9tQnV0dG9uLnNldFBhcmFtcyh7IHRleHQ6IHZhbCB9KTsgfSxcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYnV0dG9uVGV4dDsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShib3R0b21CdXR0b24sICdjb2xvcicsIHtcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbCkgeyBib3R0b21CdXR0b24uc2V0UGFyYW1zKHsgY29sb3I6IHZhbCB9KTsgfSxcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYnV0dG9uQ29sb3IgfHwgYnV0dG9uQ29sb3JEZWZhdWx0KCk7IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYm90dG9tQnV0dG9uLCAndGV4dENvbG9yJywge1xuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsKSB7IGJvdHRvbUJ1dHRvbi5zZXRQYXJhbXMoeyB0ZXh0X2NvbG9yOiB2YWwgfSk7IH0sXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJ1dHRvblRleHRDb2xvciB8fCBidXR0b25UZXh0Q29sb3JEZWZhdWx0KCk7IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYm90dG9tQnV0dG9uLCAnaXNWaXNpYmxlJywge1xuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsKSB7IGJvdHRvbUJ1dHRvbi5zZXRQYXJhbXMoeyBpc192aXNpYmxlOiB2YWwgfSk7IH0sXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGlzVmlzaWJsZTsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShib3R0b21CdXR0b24sICdpc1Byb2dyZXNzVmlzaWJsZScsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaXNQcm9ncmVzc1Zpc2libGU7IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYm90dG9tQnV0dG9uLCAnaXNBY3RpdmUnLCB7XG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWwpIHsgYm90dG9tQnV0dG9uLnNldFBhcmFtcyh7IGlzX2FjdGl2ZTogdmFsIH0pOyB9LFxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpc0FjdGl2ZTsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShib3R0b21CdXR0b24sICdoYXNTaGluZUVmZmVjdCcsIHtcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbCkgeyBib3R0b21CdXR0b24uc2V0UGFyYW1zKHsgaGFzX3NoaW5lX2VmZmVjdDogdmFsIH0pOyB9LFxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBoYXNTaGluZUVmZmVjdDsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghaXNNYWluQnV0dG9uKSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYm90dG9tQnV0dG9uLCAncG9zaXRpb24nLCB7XG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsKSB7IGJvdHRvbUJ1dHRvbi5zZXRQYXJhbXMoeyBwb3NpdGlvbjogdmFsIH0pOyB9LFxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYnV0dG9uUG9zaXRpb247IH0sXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGN1ckJ1dHRvblN0YXRlID0gbnVsbDtcbiAgICAgICAgV2ViVmlldy5vbkV2ZW50KHRnRXZlbnROYW1lLCBvbkJvdHRvbUJ1dHRvblByZXNzZWQpO1xuICAgICAgICB2YXIgZGVidWdCdG4gPSBudWxsO1xuICAgICAgICBpZiAoaW5pdFBhcmFtcy50Z1dlYkFwcERlYnVnKSB7XG4gICAgICAgICAgICBkZWJ1Z0J0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RnLWJvdHRvbS1idXR0b24nKTtcbiAgICAgICAgICAgIHZhciBkZWJ1Z0J0blN0eWxlID0ge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdub25lJyxcbiAgICAgICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICAgIGhlaWdodDogJzQ0cHgnLFxuICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogJzAnLFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICduby1yZXBlYXQgcmlnaHQgY2VudGVyJyxcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAnMTNweCAxNXB4JyxcbiAgICAgICAgICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZm9yICh2YXIgayBpbiBkZWJ1Z0J0blN0eWxlKSB7XG4gICAgICAgICAgICAgICAgZGVidWdCdG4uc3R5bGVba10gPSBkZWJ1Z0J0blN0eWxlW2tdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVidWdCb3R0b21CYXIuYXBwZW5kQ2hpbGQoZGVidWdCdG4pO1xuICAgICAgICAgICAgZGVidWdCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkJvdHRvbUJ1dHRvblByZXNzZWQsIGZhbHNlKTtcbiAgICAgICAgICAgIGRlYnVnQnRuLl9ib3R0b21CdXR0b24gPSBib3R0b21CdXR0b247XG4gICAgICAgICAgICBkZWJ1Z0JvdHRvbUJhckJ0bnNbdHlwZV0gPSBkZWJ1Z0J0bjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBvbkJvdHRvbUJ1dHRvblByZXNzZWQoKSB7XG4gICAgICAgICAgICBpZiAoaXNBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICByZWNlaXZlV2ViVmlld0V2ZW50KHdlYlZpZXdFdmVudE5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGJ1dHRvblBhcmFtcygpIHtcbiAgICAgICAgICAgIHZhciBjb2xvciA9IGJvdHRvbUJ1dHRvbi5jb2xvcjtcbiAgICAgICAgICAgIHZhciB0ZXh0X2NvbG9yID0gYm90dG9tQnV0dG9uLnRleHRDb2xvcjtcbiAgICAgICAgICAgIGlmIChpc1Zpc2libGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgICAgICAgICAgICAgICBpc192aXNpYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBpc19hY3RpdmU6IGlzQWN0aXZlLFxuICAgICAgICAgICAgICAgICAgICBpc19wcm9ncmVzc192aXNpYmxlOiBpc1Byb2dyZXNzVmlzaWJsZSxcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogYnV0dG9uVGV4dCxcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IGNvbG9yLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0X2NvbG9yOiB0ZXh0X2NvbG9yLFxuICAgICAgICAgICAgICAgICAgICBoYXNfc2hpbmVfZWZmZWN0OiBoYXNTaGluZUVmZmVjdCAmJiBpc0FjdGl2ZSAmJiAhaXNQcm9ncmVzc1Zpc2libGVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlmICghaXNNYWluQnV0dG9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmFtcy5wb3NpdGlvbiA9IGJ1dHRvblBvc2l0aW9uO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgICAgIGlzX3Zpc2libGU6IGZhbHNlXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwYXJhbXM7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYnV0dG9uU3RhdGUoYnRuX3BhcmFtcykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBidG5fcGFyYW1zID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIGJ0bl9wYXJhbXMgPSBidXR0b25QYXJhbXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShidG5fcGFyYW1zKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVCdXR0b24oKSB7XG4gICAgICAgICAgICB2YXIgYnRuX3BhcmFtcyA9IGJ1dHRvblBhcmFtcygpO1xuICAgICAgICAgICAgdmFyIGJ0bl9zdGF0ZSA9IGJ1dHRvblN0YXRlKGJ0bl9wYXJhbXMpO1xuICAgICAgICAgICAgaWYgKGN1ckJ1dHRvblN0YXRlID09PSBidG5fc3RhdGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJCdXR0b25TdGF0ZSA9IGJ0bl9zdGF0ZTtcbiAgICAgICAgICAgIFdlYlZpZXcucG9zdEV2ZW50KHNldHVwRm5OYW1lLCBmYWxzZSwgYnRuX3BhcmFtcyk7XG4gICAgICAgICAgICBpZiAoaW5pdFBhcmFtcy50Z1dlYkFwcERlYnVnKSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlRGVidWdCdXR0b24oYnRuX3BhcmFtcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlRGVidWdCdXR0b24oYnRuX3BhcmFtcykge1xuICAgICAgICAgICAgaWYgKGJ0bl9wYXJhbXMuaXNfdmlzaWJsZSkge1xuICAgICAgICAgICAgICAgIGRlYnVnQnRuLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICAgICAgICAgIGRlYnVnQnRuLnN0eWxlLm9wYWNpdHkgPSBidG5fcGFyYW1zLmlzX2FjdGl2ZSA/ICcxJyA6ICcwLjgnO1xuICAgICAgICAgICAgICAgIGRlYnVnQnRuLnN0eWxlLmN1cnNvciA9IGJ0bl9wYXJhbXMuaXNfYWN0aXZlID8gJ3BvaW50ZXInIDogJ2F1dG8nO1xuICAgICAgICAgICAgICAgIGRlYnVnQnRuLmRpc2FibGVkID0gIWJ0bl9wYXJhbXMuaXNfYWN0aXZlO1xuICAgICAgICAgICAgICAgIGRlYnVnQnRuLmlubmVyVGV4dCA9IGJ0bl9wYXJhbXMudGV4dDtcbiAgICAgICAgICAgICAgICBkZWJ1Z0J0bi5jbGFzc05hbWUgPSBidG5fcGFyYW1zLmhhc19zaGluZV9lZmZlY3QgPyAnc2hpbmUnIDogJyc7XG4gICAgICAgICAgICAgICAgZGVidWdCdG4uc3R5bGUuYmFja2dyb3VuZEltYWdlID0gYnRuX3BhcmFtcy5pc19wcm9ncmVzc192aXNpYmxlID8gXCJ1cmwoJ2RhdGE6aW1hZ2Uvc3ZnK3htbCxcIiArIGVuY29kZVVSSUNvbXBvbmVudCgnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgdmlld3BvcnQ9XCIwIDAgNDggNDhcIiB3aWR0aD1cIjQ4cHhcIiBoZWlnaHQ9XCI0OHB4XCI+PGNpcmNsZSBjeD1cIjUwJVwiIGN5PVwiNTAlXCIgc3Ryb2tlPVwiJyArIGJ0bl9wYXJhbXMudGV4dF9jb2xvciArICdcIiBzdHJva2Utd2lkdGg9XCIyLjI1XCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIGZpbGw9XCJub25lXCIgc3Ryb2tlLWRhc2hvZmZzZXQ9XCIxMDZcIiByPVwiOVwiIHN0cm9rZS1kYXNoYXJyYXk9XCI1Ni41MlwiIHJvdGF0ZT1cIi05MFwiPjxhbmltYXRlIGF0dHJpYnV0ZU5hbWU9XCJzdHJva2UtZGFzaG9mZnNldFwiIGF0dHJpYnV0ZVR5cGU9XCJYTUxcIiBkdXI9XCIzNjBzXCIgZnJvbT1cIjBcIiB0bz1cIjEyNTAwXCIgcmVwZWF0Q291bnQ9XCJpbmRlZmluaXRlXCI+PC9hbmltYXRlPjxhbmltYXRlVHJhbnNmb3JtIGF0dHJpYnV0ZU5hbWU9XCJ0cmFuc2Zvcm1cIiBhdHRyaWJ1dGVUeXBlPVwiWE1MXCIgdHlwZT1cInJvdGF0ZVwiIGR1cj1cIjFzXCIgZnJvbT1cIi05MCAyNCAyNFwiIHRvPVwiNjMwIDI0IDI0XCIgcmVwZWF0Q291bnQ9XCJpbmRlZmluaXRlXCI+PC9hbmltYXRlVHJhbnNmb3JtPjwvY2lyY2xlPjwvc3ZnPicpICsgXCInKVwiIDogJ25vbmUnO1xuICAgICAgICAgICAgICAgIGRlYnVnQnRuLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGJ0bl9wYXJhbXMuY29sb3I7XG4gICAgICAgICAgICAgICAgZGVidWdCdG4uc3R5bGUuY29sb3IgPSBidG5fcGFyYW1zLnRleHRfY29sb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZWJ1Z0J0bi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdXBkYXRlRGVidWdCb3R0b21CYXIoKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBzZXRQYXJhbXMocGFyYW1zKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHBhcmFtcy50ZXh0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHZhciB0ZXh0ID0gc3RyVHJpbShwYXJhbXMudGV4dCk7XG4gICAgICAgICAgICAgICAgaWYgKCF0ZXh0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbVGVsZWdyYW0uV2ViQXBwXSBCb3R0b20gYnV0dG9uIHRleHQgaXMgcmVxdWlyZWQnLCBwYXJhbXMudGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKCdXZWJBcHBCb3R0b21CdXR0b25QYXJhbUludmFsaWQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRleHQubGVuZ3RoID4gNjQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignW1RlbGVncmFtLldlYkFwcF0gQm90dG9tIGJ1dHRvbiB0ZXh0IGlzIHRvbyBsb25nJywgdGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKCdXZWJBcHBCb3R0b21CdXR0b25QYXJhbUludmFsaWQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnV0dG9uVGV4dCA9IHRleHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIHBhcmFtcy5jb2xvciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBpZiAocGFyYW1zLmNvbG9yID09PSBmYWxzZSB8fFxuICAgICAgICAgICAgICAgICAgICBwYXJhbXMuY29sb3IgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uQ29sb3IgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb2xvciA9IHBhcnNlQ29sb3JUb0hleChwYXJhbXMuY29sb3IpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbVGVsZWdyYW0uV2ViQXBwXSBCb3R0b20gYnV0dG9uIGNvbG9yIGZvcm1hdCBpcyBpbnZhbGlkJywgcGFyYW1zLmNvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKCdXZWJBcHBCb3R0b21CdXR0b25QYXJhbUludmFsaWQnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBidXR0b25Db2xvciA9IGNvbG9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgcGFyYW1zLnRleHRfY29sb3IgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcmFtcy50ZXh0X2NvbG9yID09PSBmYWxzZSB8fFxuICAgICAgICAgICAgICAgICAgICBwYXJhbXMudGV4dF9jb2xvciA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBidXR0b25UZXh0Q29sb3IgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0X2NvbG9yID0gcGFyc2VDb2xvclRvSGV4KHBhcmFtcy50ZXh0X2NvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0ZXh0X2NvbG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbVGVsZWdyYW0uV2ViQXBwXSBCb3R0b20gYnV0dG9uIHRleHQgY29sb3IgZm9ybWF0IGlzIGludmFsaWQnLCBwYXJhbXMudGV4dF9jb2xvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcignV2ViQXBwQm90dG9tQnV0dG9uUGFyYW1JbnZhbGlkJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uVGV4dENvbG9yID0gdGV4dF9jb2xvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIHBhcmFtcy5pc192aXNpYmxlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIGlmIChwYXJhbXMuaXNfdmlzaWJsZSAmJlxuICAgICAgICAgICAgICAgICAgICAhYm90dG9tQnV0dG9uLnRleHQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tUZWxlZ3JhbS5XZWJBcHBdIEJvdHRvbSBidXR0b24gdGV4dCBpcyByZXF1aXJlZCcpO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcignV2ViQXBwQm90dG9tQnV0dG9uUGFyYW1JbnZhbGlkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlzVmlzaWJsZSA9ICEhcGFyYW1zLmlzX3Zpc2libGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIHBhcmFtcy5oYXNfc2hpbmVfZWZmZWN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIGhhc1NoaW5lRWZmZWN0ID0gISFwYXJhbXMuaGFzX3NoaW5lX2VmZmVjdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaXNNYWluQnV0dG9uICYmIHR5cGVvZiBwYXJhbXMucG9zaXRpb24gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcmFtcy5wb3NpdGlvbiAhPSAnbGVmdCcgJiYgcGFyYW1zLnBvc2l0aW9uICE9ICdyaWdodCcgJiZcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zLnBvc2l0aW9uICE9ICd0b3AnICYmIHBhcmFtcy5wb3NpdGlvbiAhPSAnYm90dG9tJykge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbVGVsZWdyYW0uV2ViQXBwXSBCb3R0b20gYnV0dG9uIHBvc2lpdGlvbiBpcyBpbnZhbGlkJywgcGFyYW1zLnBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1dlYkFwcEJvdHRvbUJ1dHRvblBhcmFtSW52YWxpZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBidXR0b25Qb3NpdGlvbiA9IHBhcmFtcy5wb3NpdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgcGFyYW1zLmlzX2FjdGl2ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBpc0FjdGl2ZSA9ICEhcGFyYW1zLmlzX2FjdGl2ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHVwZGF0ZUJ1dHRvbigpO1xuICAgICAgICAgICAgcmV0dXJuIGJvdHRvbUJ1dHRvbjtcbiAgICAgICAgfVxuICAgICAgICBib3R0b21CdXR0b24uc2V0VGV4dCA9IGZ1bmN0aW9uICh0ZXh0KSB7XG4gICAgICAgICAgICByZXR1cm4gYm90dG9tQnV0dG9uLnNldFBhcmFtcyh7IHRleHQ6IHRleHQgfSk7XG4gICAgICAgIH07XG4gICAgICAgIGJvdHRvbUJ1dHRvbi5vbkNsaWNrID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBvbldlYlZpZXdFdmVudCh3ZWJWaWV3RXZlbnROYW1lLCBjYWxsYmFjayk7XG4gICAgICAgICAgICByZXR1cm4gYm90dG9tQnV0dG9uO1xuICAgICAgICB9O1xuICAgICAgICBib3R0b21CdXR0b24ub2ZmQ2xpY2sgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIG9mZldlYlZpZXdFdmVudCh3ZWJWaWV3RXZlbnROYW1lLCBjYWxsYmFjayk7XG4gICAgICAgICAgICByZXR1cm4gYm90dG9tQnV0dG9uO1xuICAgICAgICB9O1xuICAgICAgICBib3R0b21CdXR0b24uc2hvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBib3R0b21CdXR0b24uc2V0UGFyYW1zKHsgaXNfdmlzaWJsZTogdHJ1ZSB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgYm90dG9tQnV0dG9uLmhpZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gYm90dG9tQnV0dG9uLnNldFBhcmFtcyh7IGlzX3Zpc2libGU6IGZhbHNlIH0pO1xuICAgICAgICB9O1xuICAgICAgICBib3R0b21CdXR0b24uZW5hYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGJvdHRvbUJ1dHRvbi5zZXRQYXJhbXMoeyBpc19hY3RpdmU6IHRydWUgfSk7XG4gICAgICAgIH07XG4gICAgICAgIGJvdHRvbUJ1dHRvbi5kaXNhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGJvdHRvbUJ1dHRvbi5zZXRQYXJhbXMoeyBpc19hY3RpdmU6IGZhbHNlIH0pO1xuICAgICAgICB9O1xuICAgICAgICBib3R0b21CdXR0b24uc2hvd1Byb2dyZXNzID0gZnVuY3Rpb24gKGxlYXZlQWN0aXZlKSB7XG4gICAgICAgICAgICBpc0FjdGl2ZSA9ICEhbGVhdmVBY3RpdmU7XG4gICAgICAgICAgICBpc1Byb2dyZXNzVmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICB1cGRhdGVCdXR0b24oKTtcbiAgICAgICAgICAgIHJldHVybiBib3R0b21CdXR0b247XG4gICAgICAgIH07XG4gICAgICAgIGJvdHRvbUJ1dHRvbi5oaWRlUHJvZ3Jlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIWJvdHRvbUJ1dHRvbi5pc0FjdGl2ZSkge1xuICAgICAgICAgICAgICAgIGlzQWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlzUHJvZ3Jlc3NWaXNpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICB1cGRhdGVCdXR0b24oKTtcbiAgICAgICAgICAgIHJldHVybiBib3R0b21CdXR0b247XG4gICAgICAgIH07XG4gICAgICAgIGJvdHRvbUJ1dHRvbi5zZXRQYXJhbXMgPSBzZXRQYXJhbXM7XG4gICAgICAgIHJldHVybiBib3R0b21CdXR0b247XG4gICAgfTtcbiAgICB2YXIgTWFpbkJ1dHRvbiA9IEJvdHRvbUJ1dHRvbkNvbnN0cnVjdG9yKCdtYWluJyk7XG4gICAgdmFyIFNlY29uZGFyeUJ1dHRvbiA9IEJvdHRvbUJ1dHRvbkNvbnN0cnVjdG9yKCdzZWNvbmRhcnknKTtcbiAgICB2YXIgU2V0dGluZ3NCdXR0b24gPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaXNWaXNpYmxlID0gZmFsc2U7XG4gICAgICAgIHZhciBzZXR0aW5nc0J1dHRvbiA9IHt9O1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc2V0dGluZ3NCdXR0b24sICdpc1Zpc2libGUnLCB7XG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWwpIHsgc2V0UGFyYW1zKHsgaXNfdmlzaWJsZTogdmFsIH0pOyB9LFxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpc1Zpc2libGU7IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgY3VyQnV0dG9uU3RhdGUgPSBudWxsO1xuICAgICAgICBXZWJWaWV3Lm9uRXZlbnQoJ3NldHRpbmdzX2J1dHRvbl9wcmVzc2VkJywgb25TZXR0aW5nc0J1dHRvblByZXNzZWQpO1xuICAgICAgICBmdW5jdGlvbiBvblNldHRpbmdzQnV0dG9uUHJlc3NlZCgpIHtcbiAgICAgICAgICAgIHJlY2VpdmVXZWJWaWV3RXZlbnQoJ3NldHRpbmdzQnV0dG9uQ2xpY2tlZCcpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGJ1dHRvblBhcmFtcygpIHtcbiAgICAgICAgICAgIHJldHVybiB7IGlzX3Zpc2libGU6IGlzVmlzaWJsZSB9O1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGJ1dHRvblN0YXRlKGJ0bl9wYXJhbXMpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYnRuX3BhcmFtcyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBidG5fcGFyYW1zID0gYnV0dG9uUGFyYW1zKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYnRuX3BhcmFtcyk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYnV0dG9uQ2hlY2tWZXJzaW9uKCkge1xuICAgICAgICAgICAgaWYgKCF2ZXJzaW9uQXRMZWFzdCgnNi4xMCcpKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdbVGVsZWdyYW0uV2ViQXBwXSBTZXR0aW5nc0J1dHRvbiBpcyBub3Qgc3VwcG9ydGVkIGluIHZlcnNpb24gJyArIHdlYkFwcFZlcnNpb24pO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUJ1dHRvbigpIHtcbiAgICAgICAgICAgIHZhciBidG5fcGFyYW1zID0gYnV0dG9uUGFyYW1zKCk7XG4gICAgICAgICAgICB2YXIgYnRuX3N0YXRlID0gYnV0dG9uU3RhdGUoYnRuX3BhcmFtcyk7XG4gICAgICAgICAgICBpZiAoY3VyQnV0dG9uU3RhdGUgPT09IGJ0bl9zdGF0ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN1ckJ1dHRvblN0YXRlID0gYnRuX3N0YXRlO1xuICAgICAgICAgICAgV2ViVmlldy5wb3N0RXZlbnQoJ3dlYl9hcHBfc2V0dXBfc2V0dGluZ3NfYnV0dG9uJywgZmFsc2UsIGJ0bl9wYXJhbXMpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHNldFBhcmFtcyhwYXJhbXMpIHtcbiAgICAgICAgICAgIGlmICghYnV0dG9uQ2hlY2tWZXJzaW9uKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2V0dGluZ3NCdXR0b247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIHBhcmFtcy5pc192aXNpYmxlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIGlzVmlzaWJsZSA9ICEhcGFyYW1zLmlzX3Zpc2libGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB1cGRhdGVCdXR0b24oKTtcbiAgICAgICAgICAgIHJldHVybiBzZXR0aW5nc0J1dHRvbjtcbiAgICAgICAgfVxuICAgICAgICBzZXR0aW5nc0J1dHRvbi5vbkNsaWNrID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBpZiAoYnV0dG9uQ2hlY2tWZXJzaW9uKCkpIHtcbiAgICAgICAgICAgICAgICBvbldlYlZpZXdFdmVudCgnc2V0dGluZ3NCdXR0b25DbGlja2VkJywgY2FsbGJhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHNldHRpbmdzQnV0dG9uO1xuICAgICAgICB9O1xuICAgICAgICBzZXR0aW5nc0J1dHRvbi5vZmZDbGljayA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAgICAgaWYgKGJ1dHRvbkNoZWNrVmVyc2lvbigpKSB7XG4gICAgICAgICAgICAgICAgb2ZmV2ViVmlld0V2ZW50KCdzZXR0aW5nc0J1dHRvbkNsaWNrZWQnLCBjYWxsYmFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc2V0dGluZ3NCdXR0b247XG4gICAgICAgIH07XG4gICAgICAgIHNldHRpbmdzQnV0dG9uLnNob3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gc2V0UGFyYW1zKHsgaXNfdmlzaWJsZTogdHJ1ZSB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgc2V0dGluZ3NCdXR0b24uaGlkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBzZXRQYXJhbXMoeyBpc192aXNpYmxlOiBmYWxzZSB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHNldHRpbmdzQnV0dG9uO1xuICAgIH0pKCk7XG4gICAgdmFyIEhhcHRpY0ZlZWRiYWNrID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGhhcHRpY0ZlZWRiYWNrID0ge307XG4gICAgICAgIGZ1bmN0aW9uIHRyaWdnZXJGZWVkYmFjayhwYXJhbXMpIHtcbiAgICAgICAgICAgIGlmICghdmVyc2lvbkF0TGVhc3QoJzYuMScpKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdbVGVsZWdyYW0uV2ViQXBwXSBIYXB0aWNGZWVkYmFjayBpcyBub3Qgc3VwcG9ydGVkIGluIHZlcnNpb24gJyArIHdlYkFwcFZlcnNpb24pO1xuICAgICAgICAgICAgICAgIHJldHVybiBoYXB0aWNGZWVkYmFjaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwYXJhbXMudHlwZSA9PSAnaW1wYWN0Jykge1xuICAgICAgICAgICAgICAgIGlmIChwYXJhbXMuaW1wYWN0X3N0eWxlICE9ICdsaWdodCcgJiZcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zLmltcGFjdF9zdHlsZSAhPSAnbWVkaXVtJyAmJlxuICAgICAgICAgICAgICAgICAgICBwYXJhbXMuaW1wYWN0X3N0eWxlICE9ICdoZWF2eScgJiZcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zLmltcGFjdF9zdHlsZSAhPSAncmlnaWQnICYmXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtcy5pbXBhY3Rfc3R5bGUgIT0gJ3NvZnQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tUZWxlZ3JhbS5XZWJBcHBdIEhhcHRpYyBpbXBhY3Qgc3R5bGUgaXMgaW52YWxpZCcsIHBhcmFtcy5pbXBhY3Rfc3R5bGUpO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcignV2ViQXBwSGFwdGljSW1wYWN0U3R5bGVJbnZhbGlkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocGFyYW1zLnR5cGUgPT0gJ25vdGlmaWNhdGlvbicpIHtcbiAgICAgICAgICAgICAgICBpZiAocGFyYW1zLm5vdGlmaWNhdGlvbl90eXBlICE9ICdlcnJvcicgJiZcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zLm5vdGlmaWNhdGlvbl90eXBlICE9ICdzdWNjZXNzJyAmJlxuICAgICAgICAgICAgICAgICAgICBwYXJhbXMubm90aWZpY2F0aW9uX3R5cGUgIT0gJ3dhcm5pbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tUZWxlZ3JhbS5XZWJBcHBdIEhhcHRpYyBub3RpZmljYXRpb24gdHlwZSBpcyBpbnZhbGlkJywgcGFyYW1zLm5vdGlmaWNhdGlvbl90eXBlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1dlYkFwcEhhcHRpY05vdGlmaWNhdGlvblR5cGVJbnZhbGlkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocGFyYW1zLnR5cGUgPT0gJ3NlbGVjdGlvbl9jaGFuZ2UnKSB7XG4gICAgICAgICAgICAgICAgLy8gbm8gcGFyYW1zIG5lZWRlZFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignW1RlbGVncmFtLldlYkFwcF0gSGFwdGljIGZlZWRiYWNrIHR5cGUgaXMgaW52YWxpZCcsIHBhcmFtcy50eXBlKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcignV2ViQXBwSGFwdGljRmVlZGJhY2tUeXBlSW52YWxpZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgV2ViVmlldy5wb3N0RXZlbnQoJ3dlYl9hcHBfdHJpZ2dlcl9oYXB0aWNfZmVlZGJhY2snLCBmYWxzZSwgcGFyYW1zKTtcbiAgICAgICAgICAgIHJldHVybiBoYXB0aWNGZWVkYmFjaztcbiAgICAgICAgfVxuICAgICAgICBoYXB0aWNGZWVkYmFjay5pbXBhY3RPY2N1cnJlZCA9IGZ1bmN0aW9uIChzdHlsZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRyaWdnZXJGZWVkYmFjayh7IHR5cGU6ICdpbXBhY3QnLCBpbXBhY3Rfc3R5bGU6IHN0eWxlIH0pO1xuICAgICAgICB9O1xuICAgICAgICBoYXB0aWNGZWVkYmFjay5ub3RpZmljYXRpb25PY2N1cnJlZCA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJpZ2dlckZlZWRiYWNrKHsgdHlwZTogJ25vdGlmaWNhdGlvbicsIG5vdGlmaWNhdGlvbl90eXBlOiB0eXBlIH0pO1xuICAgICAgICB9O1xuICAgICAgICBoYXB0aWNGZWVkYmFjay5zZWxlY3Rpb25DaGFuZ2VkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRyaWdnZXJGZWVkYmFjayh7IHR5cGU6ICdzZWxlY3Rpb25fY2hhbmdlJyB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGhhcHRpY0ZlZWRiYWNrO1xuICAgIH0pKCk7XG4gICAgdmFyIENsb3VkU3RvcmFnZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjbG91ZFN0b3JhZ2UgPSB7fTtcbiAgICAgICAgZnVuY3Rpb24gaW52b2tlU3RvcmFnZU1ldGhvZChtZXRob2QsIHBhcmFtcywgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGlmICghdmVyc2lvbkF0TGVhc3QoJzYuOScpKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignW1RlbGVncmFtLldlYkFwcF0gQ2xvdWRTdG9yYWdlIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdmVyc2lvbiAnICsgd2ViQXBwVmVyc2lvbik7XG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1dlYkFwcE1ldGhvZFVuc3VwcG9ydGVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbnZva2VDdXN0b21NZXRob2QobWV0aG9kLCBwYXJhbXMsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIHJldHVybiBjbG91ZFN0b3JhZ2U7XG4gICAgICAgIH1cbiAgICAgICAgY2xvdWRTdG9yYWdlLnNldEl0ZW0gPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHJldHVybiBpbnZva2VTdG9yYWdlTWV0aG9kKCdzYXZlU3RvcmFnZVZhbHVlJywgeyBrZXk6IGtleSwgdmFsdWU6IHZhbHVlIH0sIGNhbGxiYWNrKTtcbiAgICAgICAgfTtcbiAgICAgICAgY2xvdWRTdG9yYWdlLmdldEl0ZW0gPSBmdW5jdGlvbiAoa2V5LCBjYWxsYmFjaykge1xuICAgICAgICAgICAgcmV0dXJuIGNsb3VkU3RvcmFnZS5nZXRJdGVtcyhba2V5XSwgY2FsbGJhY2sgPyBmdW5jdGlvbiAoZXJyLCByZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKVxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzW2tleV0pO1xuICAgICAgICAgICAgfSA6IG51bGwpO1xuICAgICAgICB9O1xuICAgICAgICBjbG91ZFN0b3JhZ2UuZ2V0SXRlbXMgPSBmdW5jdGlvbiAoa2V5cywgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHJldHVybiBpbnZva2VTdG9yYWdlTWV0aG9kKCdnZXRTdG9yYWdlVmFsdWVzJywgeyBrZXlzOiBrZXlzIH0sIGNhbGxiYWNrKTtcbiAgICAgICAgfTtcbiAgICAgICAgY2xvdWRTdG9yYWdlLnJlbW92ZUl0ZW0gPSBmdW5jdGlvbiAoa2V5LCBjYWxsYmFjaykge1xuICAgICAgICAgICAgcmV0dXJuIGNsb3VkU3RvcmFnZS5yZW1vdmVJdGVtcyhba2V5XSwgY2FsbGJhY2spO1xuICAgICAgICB9O1xuICAgICAgICBjbG91ZFN0b3JhZ2UucmVtb3ZlSXRlbXMgPSBmdW5jdGlvbiAoa2V5cywgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHJldHVybiBpbnZva2VTdG9yYWdlTWV0aG9kKCdkZWxldGVTdG9yYWdlVmFsdWVzJywgeyBrZXlzOiBrZXlzIH0sIGNhbGxiYWNrKTtcbiAgICAgICAgfTtcbiAgICAgICAgY2xvdWRTdG9yYWdlLmdldEtleXMgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHJldHVybiBpbnZva2VTdG9yYWdlTWV0aG9kKCdnZXRTdG9yYWdlS2V5cycsIHt9LCBjYWxsYmFjayk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBjbG91ZFN0b3JhZ2U7XG4gICAgfSkoKTtcbiAgICB2YXIgQmlvbWV0cmljTWFuYWdlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpc0luaXRlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgaXNCaW9tZXRyaWNBdmFpbGFibGUgPSBmYWxzZTtcbiAgICAgICAgdmFyIGJpb21ldHJpY1R5cGUgPSAndW5rbm93bic7XG4gICAgICAgIHZhciBpc0FjY2Vzc1JlcXVlc3RlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgaXNBY2Nlc3NHcmFudGVkID0gZmFsc2U7XG4gICAgICAgIHZhciBpc0Jpb21ldHJpY1Rva2VuU2F2ZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIGRldmljZUlkID0gJyc7XG4gICAgICAgIHZhciBiaW9tZXRyaWNNYW5hZ2VyID0ge307XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShiaW9tZXRyaWNNYW5hZ2VyLCAnaXNJbml0ZWQnLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGlzSW5pdGVkOyB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGJpb21ldHJpY01hbmFnZXIsICdpc0Jpb21ldHJpY0F2YWlsYWJsZScsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaXNJbml0ZWQgJiYgaXNCaW9tZXRyaWNBdmFpbGFibGU7IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYmlvbWV0cmljTWFuYWdlciwgJ2Jpb21ldHJpY1R5cGUnLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJpb21ldHJpY1R5cGUgfHwgJ3Vua25vd24nOyB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGJpb21ldHJpY01hbmFnZXIsICdpc0FjY2Vzc1JlcXVlc3RlZCcsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaXNBY2Nlc3NSZXF1ZXN0ZWQ7IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYmlvbWV0cmljTWFuYWdlciwgJ2lzQWNjZXNzR3JhbnRlZCcsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaXNBY2Nlc3NSZXF1ZXN0ZWQgJiYgaXNBY2Nlc3NHcmFudGVkOyB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGJpb21ldHJpY01hbmFnZXIsICdpc0Jpb21ldHJpY1Rva2VuU2F2ZWQnLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGlzQmlvbWV0cmljVG9rZW5TYXZlZDsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShiaW9tZXRyaWNNYW5hZ2VyLCAnZGV2aWNlSWQnLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRldmljZUlkIHx8ICcnOyB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGluaXRSZXF1ZXN0U3RhdGUgPSB7IGNhbGxiYWNrczogW10gfTtcbiAgICAgICAgdmFyIGFjY2Vzc1JlcXVlc3RTdGF0ZSA9IGZhbHNlO1xuICAgICAgICB2YXIgYXV0aFJlcXVlc3RTdGF0ZSA9IGZhbHNlO1xuICAgICAgICB2YXIgdG9rZW5SZXF1ZXN0U3RhdGUgPSBmYWxzZTtcbiAgICAgICAgV2ViVmlldy5vbkV2ZW50KCdiaW9tZXRyeV9pbmZvX3JlY2VpdmVkJywgb25CaW9tZXRyeUluZm9SZWNlaXZlZCk7XG4gICAgICAgIFdlYlZpZXcub25FdmVudCgnYmlvbWV0cnlfYXV0aF9yZXF1ZXN0ZWQnLCBvbkJpb21ldHJ5QXV0aFJlcXVlc3RlZCk7XG4gICAgICAgIFdlYlZpZXcub25FdmVudCgnYmlvbWV0cnlfdG9rZW5fdXBkYXRlZCcsIG9uQmlvbWV0cnlUb2tlblVwZGF0ZWQpO1xuICAgICAgICBmdW5jdGlvbiBvbkJpb21ldHJ5SW5mb1JlY2VpdmVkKGV2ZW50VHlwZSwgZXZlbnREYXRhKSB7XG4gICAgICAgICAgICBpc0luaXRlZCA9IHRydWU7XG4gICAgICAgICAgICBpZiAoZXZlbnREYXRhLmF2YWlsYWJsZSkge1xuICAgICAgICAgICAgICAgIGlzQmlvbWV0cmljQXZhaWxhYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBiaW9tZXRyaWNUeXBlID0gZXZlbnREYXRhLnR5cGUgfHwgJ3Vua25vd24nO1xuICAgICAgICAgICAgICAgIGlmIChldmVudERhdGEuYWNjZXNzX3JlcXVlc3RlZCkge1xuICAgICAgICAgICAgICAgICAgICBpc0FjY2Vzc1JlcXVlc3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGlzQWNjZXNzR3JhbnRlZCA9ICEhZXZlbnREYXRhLmFjY2Vzc19ncmFudGVkO1xuICAgICAgICAgICAgICAgICAgICBpc0Jpb21ldHJpY1Rva2VuU2F2ZWQgPSAhIWV2ZW50RGF0YS50b2tlbl9zYXZlZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlzQWNjZXNzUmVxdWVzdGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGlzQWNjZXNzR3JhbnRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBpc0Jpb21ldHJpY1Rva2VuU2F2ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpc0Jpb21ldHJpY0F2YWlsYWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJpb21ldHJpY1R5cGUgPSAndW5rbm93bic7XG4gICAgICAgICAgICAgICAgaXNBY2Nlc3NSZXF1ZXN0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpc0FjY2Vzc0dyYW50ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpc0Jpb21ldHJpY1Rva2VuU2F2ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRldmljZUlkID0gZXZlbnREYXRhLmRldmljZV9pZCB8fCAnJztcbiAgICAgICAgICAgIGlmIChpbml0UmVxdWVzdFN0YXRlLmNhbGxiYWNrcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbml0UmVxdWVzdFN0YXRlLmNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2FsbGJhY2sgPSBpbml0UmVxdWVzdFN0YXRlLmNhbGxiYWNrc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYWNjZXNzUmVxdWVzdFN0YXRlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0YXRlID0gYWNjZXNzUmVxdWVzdFN0YXRlO1xuICAgICAgICAgICAgICAgIGFjY2Vzc1JlcXVlc3RTdGF0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5jYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5jYWxsYmFjayhpc0FjY2Vzc0dyYW50ZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlY2VpdmVXZWJWaWV3RXZlbnQoJ2Jpb21ldHJpY01hbmFnZXJVcGRhdGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gb25CaW9tZXRyeUF1dGhSZXF1ZXN0ZWQoZXZlbnRUeXBlLCBldmVudERhdGEpIHtcbiAgICAgICAgICAgIHZhciBpc0F1dGhlbnRpY2F0ZWQgPSAoZXZlbnREYXRhLnN0YXR1cyA9PSAnYXV0aG9yaXplZCcpLCBiaW9tZXRyaWNUb2tlbiA9IGV2ZW50RGF0YS50b2tlbiB8fCAnJztcbiAgICAgICAgICAgIGlmIChhdXRoUmVxdWVzdFN0YXRlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0YXRlID0gYXV0aFJlcXVlc3RTdGF0ZTtcbiAgICAgICAgICAgICAgICBhdXRoUmVxdWVzdFN0YXRlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLmNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLmNhbGxiYWNrKGlzQXV0aGVudGljYXRlZCwgaXNBdXRoZW50aWNhdGVkID8gYmlvbWV0cmljVG9rZW4gOiBudWxsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWNlaXZlV2ViVmlld0V2ZW50KCdiaW9tZXRyaWNBdXRoUmVxdWVzdGVkJywgaXNBdXRoZW50aWNhdGVkID8ge1xuICAgICAgICAgICAgICAgIGlzQXV0aGVudGljYXRlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBiaW9tZXRyaWNUb2tlbjogYmlvbWV0cmljVG9rZW5cbiAgICAgICAgICAgIH0gOiB7XG4gICAgICAgICAgICAgICAgaXNBdXRoZW50aWNhdGVkOiBmYWxzZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gb25CaW9tZXRyeVRva2VuVXBkYXRlZChldmVudFR5cGUsIGV2ZW50RGF0YSkge1xuICAgICAgICAgICAgdmFyIGFwcGxpZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChpc0Jpb21ldHJpY0F2YWlsYWJsZSAmJlxuICAgICAgICAgICAgICAgIGlzQWNjZXNzUmVxdWVzdGVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50RGF0YS5zdGF0dXMgPT0gJ3VwZGF0ZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzQmlvbWV0cmljVG9rZW5TYXZlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGFwcGxpZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChldmVudERhdGEuc3RhdHVzID09ICdyZW1vdmVkJykge1xuICAgICAgICAgICAgICAgICAgICBpc0Jpb21ldHJpY1Rva2VuU2F2ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgYXBwbGllZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRva2VuUmVxdWVzdFN0YXRlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0YXRlID0gdG9rZW5SZXF1ZXN0U3RhdGU7XG4gICAgICAgICAgICAgICAgdG9rZW5SZXF1ZXN0U3RhdGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuY2FsbGJhY2soYXBwbGllZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVjZWl2ZVdlYlZpZXdFdmVudCgnYmlvbWV0cmljVG9rZW5VcGRhdGVkJywge1xuICAgICAgICAgICAgICAgIGlzVXBkYXRlZDogYXBwbGllZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gY2hlY2tWZXJzaW9uKCkge1xuICAgICAgICAgICAgaWYgKCF2ZXJzaW9uQXRMZWFzdCgnNy4yJykpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1tUZWxlZ3JhbS5XZWJBcHBdIEJpb21ldHJpY01hbmFnZXIgaXMgbm90IHN1cHBvcnRlZCBpbiB2ZXJzaW9uICcgKyB3ZWJBcHBWZXJzaW9uKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjaGVja0luaXQoKSB7XG4gICAgICAgICAgICBpZiAoIWlzSW5pdGVkKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignW1RlbGVncmFtLldlYkFwcF0gQmlvbWV0cmljTWFuYWdlciBzaG91bGQgYmUgaW5pdGVkIGJlZm9yZSB1c2luZy4nKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcignV2ViQXBwQmlvbWV0cmljTWFuYWdlck5vdEluaXRlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgYmlvbWV0cmljTWFuYWdlci5pbml0ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBpZiAoIWNoZWNrVmVyc2lvbigpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJpb21ldHJpY01hbmFnZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNJbml0ZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYmlvbWV0cmljTWFuYWdlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGluaXRSZXF1ZXN0U3RhdGUuY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgV2ViVmlldy5wb3N0RXZlbnQoJ3dlYl9hcHBfYmlvbWV0cnlfZ2V0X2luZm8nLCBmYWxzZSk7XG4gICAgICAgICAgICByZXR1cm4gYmlvbWV0cmljTWFuYWdlcjtcbiAgICAgICAgfTtcbiAgICAgICAgYmlvbWV0cmljTWFuYWdlci5yZXF1ZXN0QWNjZXNzID0gZnVuY3Rpb24gKHBhcmFtcywgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGlmICghY2hlY2tWZXJzaW9uKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYmlvbWV0cmljTWFuYWdlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNoZWNrSW5pdCgpO1xuICAgICAgICAgICAgaWYgKCFpc0Jpb21ldHJpY0F2YWlsYWJsZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tUZWxlZ3JhbS5XZWJBcHBdIEJpb21ldHJpY3MgaXMgbm90IGF2YWlsYWJsZSBvbiB0aGlzIGRldmljZS4nKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcignV2ViQXBwQmlvbWV0cmljTWFuYWdlckJpb21ldHJpY3NOb3RBdmFpbGFibGUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhY2Nlc3NSZXF1ZXN0U3RhdGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbVGVsZWdyYW0uV2ViQXBwXSBBY2Nlc3MgaXMgYWxyZWFkeSByZXF1ZXN0ZWQnKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcignV2ViQXBwQmlvbWV0cmljTWFuYWdlckFjY2Vzc1JlcXVlc3RlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHBvcHVwX3BhcmFtcyA9IHt9O1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXJhbXMucmVhc29uICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHZhciByZWFzb24gPSBzdHJUcmltKHBhcmFtcy5yZWFzb24pO1xuICAgICAgICAgICAgICAgIGlmIChyZWFzb24ubGVuZ3RoID4gMTI4KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tUZWxlZ3JhbS5XZWJBcHBdIEJpb21ldHJpYyByZWFzb24gaXMgdG9vIGxvbmcnLCByZWFzb24pO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcignV2ViQXBwQmlvbWV0cmljUmVxdWVzdEFjY2Vzc1BhcmFtSW52YWxpZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocmVhc29uLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcG9wdXBfcGFyYW1zLnJlYXNvbiA9IHJlYXNvbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhY2Nlc3NSZXF1ZXN0U3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgV2ViVmlldy5wb3N0RXZlbnQoJ3dlYl9hcHBfYmlvbWV0cnlfcmVxdWVzdF9hY2Nlc3MnLCBmYWxzZSwgcG9wdXBfcGFyYW1zKTtcbiAgICAgICAgICAgIHJldHVybiBiaW9tZXRyaWNNYW5hZ2VyO1xuICAgICAgICB9O1xuICAgICAgICBiaW9tZXRyaWNNYW5hZ2VyLmF1dGhlbnRpY2F0ZSA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBpZiAoIWNoZWNrVmVyc2lvbigpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJpb21ldHJpY01hbmFnZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjaGVja0luaXQoKTtcbiAgICAgICAgICAgIGlmICghaXNCaW9tZXRyaWNBdmFpbGFibGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbVGVsZWdyYW0uV2ViQXBwXSBCaW9tZXRyaWNzIGlzIG5vdCBhdmFpbGFibGUgb24gdGhpcyBkZXZpY2UuJyk7XG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1dlYkFwcEJpb21ldHJpY01hbmFnZXJCaW9tZXRyaWNzTm90QXZhaWxhYmxlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWlzQWNjZXNzR3JhbnRlZCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tUZWxlZ3JhbS5XZWJBcHBdIEJpb21ldHJpYyBhY2Nlc3Mgd2FzIG5vdCBncmFudGVkIGJ5IHRoZSB1c2VyLicpO1xuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKCdXZWJBcHBCaW9tZXRyaWNNYW5hZ2VyQmlvbWV0cmljQWNjZXNzTm90R3JhbnRlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGF1dGhSZXF1ZXN0U3RhdGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbVGVsZWdyYW0uV2ViQXBwXSBBdXRoZW50aWNhdGlvbiByZXF1ZXN0IGlzIGFscmVhZHkgaW4gcHJvZ3Jlc3MuJyk7XG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1dlYkFwcEJpb21ldHJpY01hbmFnZXJBdXRoZW50aWNhdGlvblJlcXVlc3RlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHBvcHVwX3BhcmFtcyA9IHt9O1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXJhbXMucmVhc29uICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHZhciByZWFzb24gPSBzdHJUcmltKHBhcmFtcy5yZWFzb24pO1xuICAgICAgICAgICAgICAgIGlmIChyZWFzb24ubGVuZ3RoID4gMTI4KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tUZWxlZ3JhbS5XZWJBcHBdIEJpb21ldHJpYyByZWFzb24gaXMgdG9vIGxvbmcnLCByZWFzb24pO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcignV2ViQXBwQmlvbWV0cmljUmVxdWVzdEFjY2Vzc1BhcmFtSW52YWxpZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocmVhc29uLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcG9wdXBfcGFyYW1zLnJlYXNvbiA9IHJlYXNvbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhdXRoUmVxdWVzdFN0YXRlID0ge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBjYWxsYmFja1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFdlYlZpZXcucG9zdEV2ZW50KCd3ZWJfYXBwX2Jpb21ldHJ5X3JlcXVlc3RfYXV0aCcsIGZhbHNlLCBwb3B1cF9wYXJhbXMpO1xuICAgICAgICAgICAgcmV0dXJuIGJpb21ldHJpY01hbmFnZXI7XG4gICAgICAgIH07XG4gICAgICAgIGJpb21ldHJpY01hbmFnZXIudXBkYXRlQmlvbWV0cmljVG9rZW4gPSBmdW5jdGlvbiAodG9rZW4sIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBpZiAoIWNoZWNrVmVyc2lvbigpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJpb21ldHJpY01hbmFnZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0b2tlbiA9IHRva2VuIHx8ICcnO1xuICAgICAgICAgICAgaWYgKHRva2VuLmxlbmd0aCA+IDEwMjQpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbVGVsZWdyYW0uV2ViQXBwXSBUb2tlbiBpcyB0b28gbG9uZycsIHRva2VuKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcignV2ViQXBwQmlvbWV0cmljTWFuYWdlclRva2VuSW52YWxpZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2hlY2tJbml0KCk7XG4gICAgICAgICAgICBpZiAoIWlzQmlvbWV0cmljQXZhaWxhYmxlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignW1RlbGVncmFtLldlYkFwcF0gQmlvbWV0cmljcyBpcyBub3QgYXZhaWxhYmxlIG9uIHRoaXMgZGV2aWNlLicpO1xuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKCdXZWJBcHBCaW9tZXRyaWNNYW5hZ2VyQmlvbWV0cmljc05vdEF2YWlsYWJsZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpc0FjY2Vzc0dyYW50ZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbVGVsZWdyYW0uV2ViQXBwXSBCaW9tZXRyaWMgYWNjZXNzIHdhcyBub3QgZ3JhbnRlZCBieSB0aGUgdXNlci4nKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcignV2ViQXBwQmlvbWV0cmljTWFuYWdlckJpb21ldHJpY0FjY2Vzc05vdEdyYW50ZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0b2tlblJlcXVlc3RTdGF0ZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tUZWxlZ3JhbS5XZWJBcHBdIFRva2VuIHJlcXVlc3QgaXMgYWxyZWFkeSBpbiBwcm9ncmVzcy4nKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcignV2ViQXBwQmlvbWV0cmljTWFuYWdlclRva2VuVXBkYXRlUmVxdWVzdGVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0b2tlblJlcXVlc3RTdGF0ZSA9IHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjazogY2FsbGJhY2tcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBXZWJWaWV3LnBvc3RFdmVudCgnd2ViX2FwcF9iaW9tZXRyeV91cGRhdGVfdG9rZW4nLCBmYWxzZSwgeyB0b2tlbjogdG9rZW4gfSk7XG4gICAgICAgICAgICByZXR1cm4gYmlvbWV0cmljTWFuYWdlcjtcbiAgICAgICAgfTtcbiAgICAgICAgYmlvbWV0cmljTWFuYWdlci5vcGVuU2V0dGluZ3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIWNoZWNrVmVyc2lvbigpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJpb21ldHJpY01hbmFnZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjaGVja0luaXQoKTtcbiAgICAgICAgICAgIGlmICghaXNCaW9tZXRyaWNBdmFpbGFibGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbVGVsZWdyYW0uV2ViQXBwXSBCaW9tZXRyaWNzIGlzIG5vdCBhdmFpbGFibGUgb24gdGhpcyBkZXZpY2UuJyk7XG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1dlYkFwcEJpb21ldHJpY01hbmFnZXJCaW9tZXRyaWNzTm90QXZhaWxhYmxlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWlzQWNjZXNzUmVxdWVzdGVkKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignW1RlbGVncmFtLldlYkFwcF0gQmlvbWV0cmljIGFjY2VzcyB3YXMgbm90IHJlcXVlc3RlZCB5ZXQuJyk7XG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1dlYkFwcEJpb21ldHJpY01hbmFnZXJCaW9tZXRyaWNzQWNjZXNzTm90UmVxdWVzdGVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNBY2Nlc3NHcmFudGVkKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdbVGVsZWdyYW0uV2ViQXBwXSBCaW9tZXRyaWMgYWNjZXNzIHdhcyBncmFudGVkIGJ5IHRoZSB1c2VyLCBubyBuZWVkIHRvIGdvIHRvIHNldHRpbmdzLicpO1xuICAgICAgICAgICAgICAgIHJldHVybiBiaW9tZXRyaWNNYW5hZ2VyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgV2ViVmlldy5wb3N0RXZlbnQoJ3dlYl9hcHBfYmlvbWV0cnlfb3Blbl9zZXR0aW5ncycsIGZhbHNlKTtcbiAgICAgICAgICAgIHJldHVybiBiaW9tZXRyaWNNYW5hZ2VyO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gYmlvbWV0cmljTWFuYWdlcjtcbiAgICB9KSgpO1xuICAgIHZhciB3ZWJBcHBJbnZvaWNlcyA9IHt9O1xuICAgIGZ1bmN0aW9uIG9uSW52b2ljZUNsb3NlZChldmVudFR5cGUsIGV2ZW50RGF0YSkge1xuICAgICAgICBpZiAoZXZlbnREYXRhLnNsdWcgJiYgd2ViQXBwSW52b2ljZXNbZXZlbnREYXRhLnNsdWddKSB7XG4gICAgICAgICAgICB2YXIgaW52b2ljZURhdGEgPSB3ZWJBcHBJbnZvaWNlc1tldmVudERhdGEuc2x1Z107XG4gICAgICAgICAgICBkZWxldGUgd2ViQXBwSW52b2ljZXNbZXZlbnREYXRhLnNsdWddO1xuICAgICAgICAgICAgaWYgKGludm9pY2VEYXRhLmNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgaW52b2ljZURhdGEuY2FsbGJhY2soZXZlbnREYXRhLnN0YXR1cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWNlaXZlV2ViVmlld0V2ZW50KCdpbnZvaWNlQ2xvc2VkJywge1xuICAgICAgICAgICAgICAgIHVybDogaW52b2ljZURhdGEudXJsLFxuICAgICAgICAgICAgICAgIHN0YXR1czogZXZlbnREYXRhLnN0YXR1c1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIHdlYkFwcFBvcHVwT3BlbmVkID0gZmFsc2U7XG4gICAgZnVuY3Rpb24gb25Qb3B1cENsb3NlZChldmVudFR5cGUsIGV2ZW50RGF0YSkge1xuICAgICAgICBpZiAod2ViQXBwUG9wdXBPcGVuZWQpIHtcbiAgICAgICAgICAgIHZhciBwb3B1cERhdGEgPSB3ZWJBcHBQb3B1cE9wZW5lZDtcbiAgICAgICAgICAgIHdlYkFwcFBvcHVwT3BlbmVkID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgYnV0dG9uX2lkID0gbnVsbDtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZXZlbnREYXRhLmJ1dHRvbl9pZCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBidXR0b25faWQgPSBldmVudERhdGEuYnV0dG9uX2lkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBvcHVwRGF0YS5jYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHBvcHVwRGF0YS5jYWxsYmFjayhidXR0b25faWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVjZWl2ZVdlYlZpZXdFdmVudCgncG9wdXBDbG9zZWQnLCB7XG4gICAgICAgICAgICAgICAgYnV0dG9uX2lkOiBidXR0b25faWRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHZhciB3ZWJBcHBTY2FuUXJQb3B1cE9wZW5lZCA9IGZhbHNlO1xuICAgIGZ1bmN0aW9uIG9uUXJUZXh0UmVjZWl2ZWQoZXZlbnRUeXBlLCBldmVudERhdGEpIHtcbiAgICAgICAgaWYgKHdlYkFwcFNjYW5RclBvcHVwT3BlbmVkKSB7XG4gICAgICAgICAgICB2YXIgcG9wdXBEYXRhID0gd2ViQXBwU2NhblFyUG9wdXBPcGVuZWQ7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IG51bGw7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGV2ZW50RGF0YS5kYXRhICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIGRhdGEgPSBldmVudERhdGEuZGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwb3B1cERhdGEuY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBpZiAocG9wdXBEYXRhLmNhbGxiYWNrKGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIHdlYkFwcFNjYW5RclBvcHVwT3BlbmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIFdlYlZpZXcucG9zdEV2ZW50KCd3ZWJfYXBwX2Nsb3NlX3NjYW5fcXJfcG9wdXAnLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVjZWl2ZVdlYlZpZXdFdmVudCgncXJUZXh0UmVjZWl2ZWQnLCB7XG4gICAgICAgICAgICAgICAgZGF0YTogZGF0YVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gb25TY2FuUXJQb3B1cENsb3NlZChldmVudFR5cGUsIGV2ZW50RGF0YSkge1xuICAgICAgICB3ZWJBcHBTY2FuUXJQb3B1cE9wZW5lZCA9IGZhbHNlO1xuICAgICAgICByZWNlaXZlV2ViVmlld0V2ZW50KCdzY2FuUXJQb3B1cENsb3NlZCcpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvbkNsaXBib2FyZFRleHRSZWNlaXZlZChldmVudFR5cGUsIGV2ZW50RGF0YSkge1xuICAgICAgICBpZiAoZXZlbnREYXRhLnJlcV9pZCAmJiB3ZWJBcHBDYWxsYmFja3NbZXZlbnREYXRhLnJlcV9pZF0pIHtcbiAgICAgICAgICAgIHZhciByZXF1ZXN0RGF0YSA9IHdlYkFwcENhbGxiYWNrc1tldmVudERhdGEucmVxX2lkXTtcbiAgICAgICAgICAgIGRlbGV0ZSB3ZWJBcHBDYWxsYmFja3NbZXZlbnREYXRhLnJlcV9pZF07XG4gICAgICAgICAgICB2YXIgZGF0YSA9IG51bGw7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGV2ZW50RGF0YS5kYXRhICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIGRhdGEgPSBldmVudERhdGEuZGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXF1ZXN0RGF0YS5jYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHJlcXVlc3REYXRhLmNhbGxiYWNrKGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVjZWl2ZVdlYlZpZXdFdmVudCgnY2xpcGJvYXJkVGV4dFJlY2VpdmVkJywge1xuICAgICAgICAgICAgICAgIGRhdGE6IGRhdGFcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHZhciBXZWJBcHBXcml0ZUFjY2Vzc1JlcXVlc3RlZCA9IGZhbHNlO1xuICAgIGZ1bmN0aW9uIG9uV3JpdGVBY2Nlc3NSZXF1ZXN0ZWQoZXZlbnRUeXBlLCBldmVudERhdGEpIHtcbiAgICAgICAgaWYgKFdlYkFwcFdyaXRlQWNjZXNzUmVxdWVzdGVkKSB7XG4gICAgICAgICAgICB2YXIgcmVxdWVzdERhdGEgPSBXZWJBcHBXcml0ZUFjY2Vzc1JlcXVlc3RlZDtcbiAgICAgICAgICAgIFdlYkFwcFdyaXRlQWNjZXNzUmVxdWVzdGVkID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAocmVxdWVzdERhdGEuY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0RGF0YS5jYWxsYmFjayhldmVudERhdGEuc3RhdHVzID09ICdhbGxvd2VkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWNlaXZlV2ViVmlld0V2ZW50KCd3cml0ZUFjY2Vzc1JlcXVlc3RlZCcsIHtcbiAgICAgICAgICAgICAgICBzdGF0dXM6IGV2ZW50RGF0YS5zdGF0dXNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldFJlcXVlc3RlZENvbnRhY3QoY2FsbGJhY2ssIHRpbWVvdXQpIHtcbiAgICAgICAgdmFyIHJlcVRvLCBmYWxsYmFja1RvLCByZXFEZWxheSA9IDA7XG4gICAgICAgIHZhciByZXFJbnZva2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpbnZva2VDdXN0b21NZXRob2QoJ2dldFJlcXVlc3RlZENvbnRhY3QnLCB7fSwgZnVuY3Rpb24gKGVyciwgcmVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlcyAmJiByZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChmYWxsYmFja1RvKTtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2socmVzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcURlbGF5ICs9IDUwO1xuICAgICAgICAgICAgICAgICAgICByZXFUbyA9IHNldFRpbWVvdXQocmVxSW52b2tlLCByZXFEZWxheSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBmYWxsYmFja0ludm9rZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChyZXFUbyk7XG4gICAgICAgICAgICBjYWxsYmFjaygnJyk7XG4gICAgICAgIH07XG4gICAgICAgIGZhbGxiYWNrVG8gPSBzZXRUaW1lb3V0KGZhbGxiYWNrSW52b2tlLCB0aW1lb3V0KTtcbiAgICAgICAgcmVxSW52b2tlKCk7XG4gICAgfVxuICAgIHZhciBXZWJBcHBDb250YWN0UmVxdWVzdGVkID0gZmFsc2U7XG4gICAgZnVuY3Rpb24gb25QaG9uZVJlcXVlc3RlZChldmVudFR5cGUsIGV2ZW50RGF0YSkge1xuICAgICAgICBpZiAoV2ViQXBwQ29udGFjdFJlcXVlc3RlZCkge1xuICAgICAgICAgICAgdmFyIHJlcXVlc3REYXRhID0gV2ViQXBwQ29udGFjdFJlcXVlc3RlZDtcbiAgICAgICAgICAgIFdlYkFwcENvbnRhY3RSZXF1ZXN0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciByZXF1ZXN0U2VudCA9IGV2ZW50RGF0YS5zdGF0dXMgPT0gJ3NlbnQnO1xuICAgICAgICAgICAgdmFyIHdlYlZpZXdFdmVudCA9IHtcbiAgICAgICAgICAgICAgICBzdGF0dXM6IGV2ZW50RGF0YS5zdGF0dXNcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAocmVxdWVzdFNlbnQpIHtcbiAgICAgICAgICAgICAgICBnZXRSZXF1ZXN0ZWRDb250YWN0KGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlcyAmJiByZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3ZWJWaWV3RXZlbnQucmVzcG9uc2UgPSByZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICB3ZWJWaWV3RXZlbnQucmVzcG9uc2VVbnNhZmUgPSBVdGlscy51cmxQYXJzZVF1ZXJ5U3RyaW5nKHJlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gd2ViVmlld0V2ZW50LnJlc3BvbnNlVW5zYWZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbCA9IHdlYlZpZXdFdmVudC5yZXNwb25zZVVuc2FmZVtrZXldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWwuc3Vic3RyKDAsIDEpID09ICd7JyAmJiB2YWwuc3Vic3RyKC0xKSA9PSAnfScgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbC5zdWJzdHIoMCwgMSkgPT0gJ1snICYmIHZhbC5zdWJzdHIoLTEpID09ICddJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2ViVmlld0V2ZW50LnJlc3BvbnNlVW5zYWZlW2tleV0gPSBKU09OLnBhcnNlKHZhbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0RGF0YS5jYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdERhdGEuY2FsbGJhY2socmVxdWVzdFNlbnQsIHdlYlZpZXdFdmVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZVdlYlZpZXdFdmVudCgnY29udGFjdFJlcXVlc3RlZCcsIHdlYlZpZXdFdmVudCk7XG4gICAgICAgICAgICAgICAgfSwgMzAwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAocmVxdWVzdERhdGEuY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdERhdGEuY2FsbGJhY2socmVxdWVzdFNlbnQsIHdlYlZpZXdFdmVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlY2VpdmVXZWJWaWV3RXZlbnQoJ2NvbnRhY3RSZXF1ZXN0ZWQnLCB3ZWJWaWV3RXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uQ3VzdG9tTWV0aG9kSW52b2tlZChldmVudFR5cGUsIGV2ZW50RGF0YSkge1xuICAgICAgICBpZiAoZXZlbnREYXRhLnJlcV9pZCAmJiB3ZWJBcHBDYWxsYmFja3NbZXZlbnREYXRhLnJlcV9pZF0pIHtcbiAgICAgICAgICAgIHZhciByZXF1ZXN0RGF0YSA9IHdlYkFwcENhbGxiYWNrc1tldmVudERhdGEucmVxX2lkXTtcbiAgICAgICAgICAgIGRlbGV0ZSB3ZWJBcHBDYWxsYmFja3NbZXZlbnREYXRhLnJlcV9pZF07XG4gICAgICAgICAgICB2YXIgcmVzID0gbnVsbCwgZXJyID0gbnVsbDtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZXZlbnREYXRhLnJlc3VsdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICByZXMgPSBldmVudERhdGEucmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBldmVudERhdGEuZXJyb3IgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgZXJyID0gZXZlbnREYXRhLmVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlcXVlc3REYXRhLmNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdERhdGEuY2FsbGJhY2soZXJyLCByZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGludm9rZUN1c3RvbU1ldGhvZChtZXRob2QsIHBhcmFtcywgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKCF2ZXJzaW9uQXRMZWFzdCgnNi45JykpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tUZWxlZ3JhbS5XZWJBcHBdIE1ldGhvZCBpbnZva2VDdXN0b21NZXRob2QgaXMgbm90IHN1cHBvcnRlZCBpbiB2ZXJzaW9uICcgKyB3ZWJBcHBWZXJzaW9uKTtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdXZWJBcHBNZXRob2RVbnN1cHBvcnRlZCcpO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXFfaWQgPSBnZW5lcmF0ZUNhbGxiYWNrSWQoMTYpO1xuICAgICAgICB2YXIgcmVxX3BhcmFtcyA9IHsgcmVxX2lkOiByZXFfaWQsIG1ldGhvZDogbWV0aG9kLCBwYXJhbXM6IHBhcmFtcyB8fCB7fSB9O1xuICAgICAgICB3ZWJBcHBDYWxsYmFja3NbcmVxX2lkXSA9IHtcbiAgICAgICAgICAgIGNhbGxiYWNrOiBjYWxsYmFja1xuICAgICAgICB9O1xuICAgICAgICBXZWJWaWV3LnBvc3RFdmVudCgnd2ViX2FwcF9pbnZva2VfY3VzdG9tX21ldGhvZCcsIGZhbHNlLCByZXFfcGFyYW1zKTtcbiAgICB9XG4gICAgO1xuICAgIGlmICghd2luZG93LlRlbGVncmFtKSB7XG4gICAgICAgIHdpbmRvdy5UZWxlZ3JhbSA9IHt9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV2ViQXBwLCAnaW5pdERhdGEnLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gd2ViQXBwSW5pdERhdGE7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV2ViQXBwLCAnaW5pdERhdGFVbnNhZmUnLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gd2ViQXBwSW5pdERhdGFVbnNhZmU7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV2ViQXBwLCAndmVyc2lvbicsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB3ZWJBcHBWZXJzaW9uOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdlYkFwcCwgJ3BsYXRmb3JtJywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHdlYkFwcFBsYXRmb3JtOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdlYkFwcCwgJ2NvbG9yU2NoZW1lJywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbG9yU2NoZW1lOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdlYkFwcCwgJ3RoZW1lUGFyYW1zJywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoZW1lUGFyYW1zOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdlYkFwcCwgJ2lzRXhwYW5kZWQnLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaXNFeHBhbmRlZDsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXZWJBcHAsICd2aWV3cG9ydEhlaWdodCcsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiAodmlld3BvcnRIZWlnaHQgPT09IGZhbHNlID8gd2luZG93LmlubmVySGVpZ2h0IDogdmlld3BvcnRIZWlnaHQpIC0gYm90dG9tQmFySGVpZ2h0OyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdlYkFwcCwgJ3ZpZXdwb3J0U3RhYmxlSGVpZ2h0Jywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICh2aWV3cG9ydFN0YWJsZUhlaWdodCA9PT0gZmFsc2UgPyB3aW5kb3cuaW5uZXJIZWlnaHQgOiB2aWV3cG9ydFN0YWJsZUhlaWdodCkgLSBib3R0b21CYXJIZWlnaHQ7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV2ViQXBwLCAnaXNDbG9zaW5nQ29uZmlybWF0aW9uRW5hYmxlZCcsIHtcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsKSB7IHNldENsb3NpbmdDb25maXJtYXRpb24odmFsKTsgfSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpc0Nsb3NpbmdDb25maXJtYXRpb25FbmFibGVkOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdlYkFwcCwgJ2lzVmVydGljYWxTd2lwZXNFbmFibGVkJywge1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWwpIHsgdG9nZ2xlVmVydGljYWxTd2lwZXModmFsKTsgfSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpc1ZlcnRpY2FsU3dpcGVzRW5hYmxlZDsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXZWJBcHAsICdoZWFkZXJDb2xvcicsIHtcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsKSB7IHNldEhlYWRlckNvbG9yKHZhbCk7IH0sXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2V0SGVhZGVyQ29sb3IoKTsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXZWJBcHAsICdiYWNrZ3JvdW5kQ29sb3InLCB7XG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbCkgeyBzZXRCYWNrZ3JvdW5kQ29sb3IodmFsKTsgfSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBnZXRCYWNrZ3JvdW5kQ29sb3IoKTsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXZWJBcHAsICdib3R0b21CYXJDb2xvcicsIHtcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsKSB7IHNldEJvdHRvbUJhckNvbG9yKHZhbCk7IH0sXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2V0Qm90dG9tQmFyQ29sb3IoKTsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXZWJBcHAsICdCYWNrQnV0dG9uJywge1xuICAgICAgICB2YWx1ZTogQmFja0J1dHRvbixcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXZWJBcHAsICdNYWluQnV0dG9uJywge1xuICAgICAgICB2YWx1ZTogTWFpbkJ1dHRvbixcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXZWJBcHAsICdTZWNvbmRhcnlCdXR0b24nLCB7XG4gICAgICAgIHZhbHVlOiBTZWNvbmRhcnlCdXR0b24sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV2ViQXBwLCAnU2V0dGluZ3NCdXR0b24nLCB7XG4gICAgICAgIHZhbHVlOiBTZXR0aW5nc0J1dHRvbixcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXZWJBcHAsICdIYXB0aWNGZWVkYmFjaycsIHtcbiAgICAgICAgdmFsdWU6IEhhcHRpY0ZlZWRiYWNrLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdlYkFwcCwgJ0Nsb3VkU3RvcmFnZScsIHtcbiAgICAgICAgdmFsdWU6IENsb3VkU3RvcmFnZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXZWJBcHAsICdCaW9tZXRyaWNNYW5hZ2VyJywge1xuICAgICAgICB2YWx1ZTogQmlvbWV0cmljTWFuYWdlcixcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIFdlYkFwcC5zZXRIZWFkZXJDb2xvciA9IGZ1bmN0aW9uIChjb2xvcl9rZXkpIHtcbiAgICAgICAgV2ViQXBwLmhlYWRlckNvbG9yID0gY29sb3Jfa2V5O1xuICAgIH07XG4gICAgV2ViQXBwLnNldEJhY2tncm91bmRDb2xvciA9IGZ1bmN0aW9uIChjb2xvcikge1xuICAgICAgICBXZWJBcHAuYmFja2dyb3VuZENvbG9yID0gY29sb3I7XG4gICAgfTtcbiAgICBXZWJBcHAuc2V0Qm90dG9tQmFyQ29sb3IgPSBmdW5jdGlvbiAoY29sb3IpIHtcbiAgICAgICAgV2ViQXBwLmJvdHRvbUJhckNvbG9yID0gY29sb3I7XG4gICAgfTtcbiAgICBXZWJBcHAuZW5hYmxlQ2xvc2luZ0NvbmZpcm1hdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgV2ViQXBwLmlzQ2xvc2luZ0NvbmZpcm1hdGlvbkVuYWJsZWQgPSB0cnVlO1xuICAgIH07XG4gICAgV2ViQXBwLmRpc2FibGVDbG9zaW5nQ29uZmlybWF0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBXZWJBcHAuaXNDbG9zaW5nQ29uZmlybWF0aW9uRW5hYmxlZCA9IGZhbHNlO1xuICAgIH07XG4gICAgV2ViQXBwLmVuYWJsZVZlcnRpY2FsU3dpcGVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBXZWJBcHAuaXNWZXJ0aWNhbFN3aXBlc0VuYWJsZWQgPSB0cnVlO1xuICAgIH07XG4gICAgV2ViQXBwLmRpc2FibGVWZXJ0aWNhbFN3aXBlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgV2ViQXBwLmlzVmVydGljYWxTd2lwZXNFbmFibGVkID0gZmFsc2U7XG4gICAgfTtcbiAgICBXZWJBcHAuaXNWZXJzaW9uQXRMZWFzdCA9IGZ1bmN0aW9uICh2ZXIpIHtcbiAgICAgICAgcmV0dXJuIHZlcnNpb25BdExlYXN0KHZlcik7XG4gICAgfTtcbiAgICBXZWJBcHAub25FdmVudCA9IGZ1bmN0aW9uIChldmVudFR5cGUsIGNhbGxiYWNrKSB7XG4gICAgICAgIG9uV2ViVmlld0V2ZW50KGV2ZW50VHlwZSwgY2FsbGJhY2spO1xuICAgIH07XG4gICAgV2ViQXBwLm9mZkV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50VHlwZSwgY2FsbGJhY2spIHtcbiAgICAgICAgb2ZmV2ViVmlld0V2ZW50KGV2ZW50VHlwZSwgY2FsbGJhY2spO1xuICAgIH07XG4gICAgV2ViQXBwLnNlbmREYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgaWYgKCFkYXRhIHx8ICFkYXRhLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignW1RlbGVncmFtLldlYkFwcF0gRGF0YSBpcyByZXF1aXJlZCcsIGRhdGEpO1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1dlYkFwcERhdGFJbnZhbGlkJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJ5dGVMZW5ndGgoZGF0YSkgPiA0MDk2KSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbVGVsZWdyYW0uV2ViQXBwXSBEYXRhIGlzIHRvbyBsb25nJywgZGF0YSk7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignV2ViQXBwRGF0YUludmFsaWQnKTtcbiAgICAgICAgfVxuICAgICAgICBXZWJWaWV3LnBvc3RFdmVudCgnd2ViX2FwcF9kYXRhX3NlbmQnLCBmYWxzZSwgeyBkYXRhOiBkYXRhIH0pO1xuICAgIH07XG4gICAgV2ViQXBwLnN3aXRjaElubGluZVF1ZXJ5ID0gZnVuY3Rpb24gKHF1ZXJ5LCBjaG9vc2VfY2hhdF90eXBlcykge1xuICAgICAgICBpZiAoIXZlcnNpb25BdExlYXN0KCc2LjYnKSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignW1RlbGVncmFtLldlYkFwcF0gTWV0aG9kIHN3aXRjaElubGluZVF1ZXJ5IGlzIG5vdCBzdXBwb3J0ZWQgaW4gdmVyc2lvbiAnICsgd2ViQXBwVmVyc2lvbik7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignV2ViQXBwTWV0aG9kVW5zdXBwb3J0ZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWluaXRQYXJhbXMudGdXZWJBcHBCb3RJbmxpbmUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tUZWxlZ3JhbS5XZWJBcHBdIElubGluZSBtb2RlIGlzIGRpc2FibGVkIGZvciB0aGlzIGJvdC4gUmVhZCBtb3JlIGFib3V0IGlubGluZSBtb2RlOiBodHRwczovL2NvcmUudGVsZWdyYW0ub3JnL2JvdHMvaW5saW5lJyk7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignV2ViQXBwSW5saW5lTW9kZURpc2FibGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgcXVlcnkgPSBxdWVyeSB8fCAnJztcbiAgICAgICAgaWYgKHF1ZXJ5Lmxlbmd0aCA+IDI1Nikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignW1RlbGVncmFtLldlYkFwcF0gSW5saW5lIHF1ZXJ5IGlzIHRvbyBsb25nJywgcXVlcnkpO1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1dlYkFwcElubGluZVF1ZXJ5SW52YWxpZCcpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjaGF0X3R5cGVzID0gW107XG4gICAgICAgIGlmIChjaG9vc2VfY2hhdF90eXBlcykge1xuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGNob29zZV9jaGF0X3R5cGVzKSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tUZWxlZ3JhbS5XZWJBcHBdIENob29zZSBjaGF0IHR5cGVzIHNob3VsZCBiZSBhbiBhcnJheScsIGNob29zZV9jaGF0X3R5cGVzKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcignV2ViQXBwSW5saW5lQ2hvb3NlQ2hhdFR5cGVzSW52YWxpZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGdvb2RfdHlwZXMgPSB7IHVzZXJzOiAxLCBib3RzOiAxLCBncm91cHM6IDEsIGNoYW5uZWxzOiAxIH07XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNob29zZV9jaGF0X3R5cGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNoYXRfdHlwZSA9IGNob29zZV9jaGF0X3R5cGVzW2ldO1xuICAgICAgICAgICAgICAgIGlmICghZ29vZF90eXBlc1tjaGF0X3R5cGVdKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tUZWxlZ3JhbS5XZWJBcHBdIENob29zZSBjaGF0IHR5cGUgaXMgaW52YWxpZCcsIGNoYXRfdHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKCdXZWJBcHBJbmxpbmVDaG9vc2VDaGF0VHlwZUludmFsaWQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGdvb2RfdHlwZXNbY2hhdF90eXBlXSAhPSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIGdvb2RfdHlwZXNbY2hhdF90eXBlXSA9IDI7XG4gICAgICAgICAgICAgICAgICAgIGNoYXRfdHlwZXMucHVzaChjaGF0X3R5cGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBXZWJWaWV3LnBvc3RFdmVudCgnd2ViX2FwcF9zd2l0Y2hfaW5saW5lX3F1ZXJ5JywgZmFsc2UsIHsgcXVlcnk6IHF1ZXJ5LCBjaGF0X3R5cGVzOiBjaGF0X3R5cGVzIH0pO1xuICAgIH07XG4gICAgV2ViQXBwLm9wZW5MaW5rID0gZnVuY3Rpb24gKHVybCwgb3B0aW9ucykge1xuICAgICAgICB2YXIgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ0EnKTtcbiAgICAgICAgYS5ocmVmID0gdXJsO1xuICAgICAgICBpZiAoYS5wcm90b2NvbCAhPSAnaHR0cDonICYmXG4gICAgICAgICAgICBhLnByb3RvY29sICE9ICdodHRwczonKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbVGVsZWdyYW0uV2ViQXBwXSBVcmwgcHJvdG9jb2wgaXMgbm90IHN1cHBvcnRlZCcsIHVybCk7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignV2ViQXBwVGdVcmxJbnZhbGlkJyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHVybCA9IGEuaHJlZjtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIGlmICh2ZXJzaW9uQXRMZWFzdCgnNi4xJykpIHtcbiAgICAgICAgICAgIHZhciByZXFfcGFyYW1zID0geyB1cmw6IHVybCB9O1xuICAgICAgICAgICAgaWYgKHZlcnNpb25BdExlYXN0KCc2LjQnKSAmJiBvcHRpb25zLnRyeV9pbnN0YW50X3ZpZXcpIHtcbiAgICAgICAgICAgICAgICByZXFfcGFyYW1zLnRyeV9pbnN0YW50X3ZpZXcgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHZlcnNpb25BdExlYXN0KCc3LjYnKSAmJiBvcHRpb25zLnRyeV9icm93c2VyKSB7XG4gICAgICAgICAgICAgICAgcmVxX3BhcmFtcy50cnlfYnJvd3NlciA9IG9wdGlvbnMudHJ5X2Jyb3dzZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBXZWJWaWV3LnBvc3RFdmVudCgnd2ViX2FwcF9vcGVuX2xpbmsnLCBmYWxzZSwgcmVxX3BhcmFtcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB3aW5kb3cub3Blbih1cmwsICdfYmxhbmsnKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgV2ViQXBwLm9wZW5UZWxlZ3JhbUxpbmsgPSBmdW5jdGlvbiAodXJsKSB7XG4gICAgICAgIHZhciBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnQScpO1xuICAgICAgICBhLmhyZWYgPSB1cmw7XG4gICAgICAgIGlmIChhLnByb3RvY29sICE9ICdodHRwOicgJiZcbiAgICAgICAgICAgIGEucHJvdG9jb2wgIT0gJ2h0dHBzOicpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tUZWxlZ3JhbS5XZWJBcHBdIFVybCBwcm90b2NvbCBpcyBub3Qgc3VwcG9ydGVkJywgdXJsKTtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdXZWJBcHBUZ1VybEludmFsaWQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYS5ob3N0bmFtZSAhPSAndC5tZScpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tUZWxlZ3JhbS5XZWJBcHBdIFVybCBob3N0IGlzIG5vdCBzdXBwb3J0ZWQnLCB1cmwpO1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1dlYkFwcFRnVXJsSW52YWxpZCcpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwYXRoX2Z1bGwgPSBhLnBhdGhuYW1lICsgYS5zZWFyY2g7XG4gICAgICAgIGlmIChpc0lmcmFtZSB8fCB2ZXJzaW9uQXRMZWFzdCgnNi4xJykpIHtcbiAgICAgICAgICAgIFdlYlZpZXcucG9zdEV2ZW50KCd3ZWJfYXBwX29wZW5fdGdfbGluaycsIGZhbHNlLCB7IHBhdGhfZnVsbDogcGF0aF9mdWxsIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbG9jYXRpb24uaHJlZiA9ICdodHRwczovL3QubWUnICsgcGF0aF9mdWxsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBXZWJBcHAub3Blbkludm9pY2UgPSBmdW5jdGlvbiAodXJsLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ0EnKSwgbWF0Y2gsIHNsdWc7XG4gICAgICAgIGEuaHJlZiA9IHVybDtcbiAgICAgICAgaWYgKGEucHJvdG9jb2wgIT0gJ2h0dHA6JyAmJlxuICAgICAgICAgICAgYS5wcm90b2NvbCAhPSAnaHR0cHM6JyB8fFxuICAgICAgICAgICAgYS5ob3N0bmFtZSAhPSAndC5tZScgfHxcbiAgICAgICAgICAgICEobWF0Y2ggPSBhLnBhdGhuYW1lLm1hdGNoKC9eXFwvKFxcJHxpbnZvaWNlXFwvKShbQS1aYS16MC05XFwtXz1dKykkLykpIHx8XG4gICAgICAgICAgICAhKHNsdWcgPSBtYXRjaFsyXSkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tUZWxlZ3JhbS5XZWJBcHBdIEludm9pY2UgdXJsIGlzIGludmFsaWQnLCB1cmwpO1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1dlYkFwcEludm9pY2VVcmxJbnZhbGlkJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF2ZXJzaW9uQXRMZWFzdCgnNi4xJykpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tUZWxlZ3JhbS5XZWJBcHBdIE1ldGhvZCBvcGVuSW52b2ljZSBpcyBub3Qgc3VwcG9ydGVkIGluIHZlcnNpb24gJyArIHdlYkFwcFZlcnNpb24pO1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1dlYkFwcE1ldGhvZFVuc3VwcG9ydGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHdlYkFwcEludm9pY2VzW3NsdWddKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbVGVsZWdyYW0uV2ViQXBwXSBJbnZvaWNlIGlzIGFscmVhZHkgb3BlbmVkJyk7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignV2ViQXBwSW52b2ljZU9wZW5lZCcpO1xuICAgICAgICB9XG4gICAgICAgIHdlYkFwcEludm9pY2VzW3NsdWddID0ge1xuICAgICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgICBjYWxsYmFjazogY2FsbGJhY2tcbiAgICAgICAgfTtcbiAgICAgICAgV2ViVmlldy5wb3N0RXZlbnQoJ3dlYl9hcHBfb3Blbl9pbnZvaWNlJywgZmFsc2UsIHsgc2x1Zzogc2x1ZyB9KTtcbiAgICB9O1xuICAgIFdlYkFwcC5zaG93UG9wdXAgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAoIXZlcnNpb25BdExlYXN0KCc2LjInKSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignW1RlbGVncmFtLldlYkFwcF0gTWV0aG9kIHNob3dQb3B1cCBpcyBub3Qgc3VwcG9ydGVkIGluIHZlcnNpb24gJyArIHdlYkFwcFZlcnNpb24pO1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1dlYkFwcE1ldGhvZFVuc3VwcG9ydGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHdlYkFwcFBvcHVwT3BlbmVkKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbVGVsZWdyYW0uV2ViQXBwXSBQb3B1cCBpcyBhbHJlYWR5IG9wZW5lZCcpO1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1dlYkFwcFBvcHVwT3BlbmVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRpdGxlID0gJyc7XG4gICAgICAgIHZhciBtZXNzYWdlID0gJyc7XG4gICAgICAgIHZhciBidXR0b25zID0gW107XG4gICAgICAgIHZhciBwb3B1cF9idXR0b25zID0ge307XG4gICAgICAgIHZhciBwb3B1cF9wYXJhbXMgPSB7fTtcbiAgICAgICAgaWYgKHR5cGVvZiBwYXJhbXMudGl0bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aXRsZSA9IHN0clRyaW0ocGFyYW1zLnRpdGxlKTtcbiAgICAgICAgICAgIGlmICh0aXRsZS5sZW5ndGggPiA2NCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tUZWxlZ3JhbS5XZWJBcHBdIFBvcHVwIHRpdGxlIGlzIHRvbyBsb25nJywgdGl0bGUpO1xuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKCdXZWJBcHBQb3B1cFBhcmFtSW52YWxpZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRpdGxlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBwb3B1cF9wYXJhbXMudGl0bGUgPSB0aXRsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHBhcmFtcy5tZXNzYWdlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgbWVzc2FnZSA9IHN0clRyaW0ocGFyYW1zLm1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbWVzc2FnZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tUZWxlZ3JhbS5XZWJBcHBdIFBvcHVwIG1lc3NhZ2UgaXMgcmVxdWlyZWQnLCBwYXJhbXMubWVzc2FnZSk7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignV2ViQXBwUG9wdXBQYXJhbUludmFsaWQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5sZW5ndGggPiAyNTYpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tUZWxlZ3JhbS5XZWJBcHBdIFBvcHVwIG1lc3NhZ2UgaXMgdG9vIGxvbmcnLCBtZXNzYWdlKTtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdXZWJBcHBQb3B1cFBhcmFtSW52YWxpZCcpO1xuICAgICAgICB9XG4gICAgICAgIHBvcHVwX3BhcmFtcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICAgICAgaWYgKHR5cGVvZiBwYXJhbXMuYnV0dG9ucyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShwYXJhbXMuYnV0dG9ucykpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbVGVsZWdyYW0uV2ViQXBwXSBQb3B1cCBidXR0b25zIHNob3VsZCBiZSBhbiBhcnJheScsIHBhcmFtcy5idXR0b25zKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcignV2ViQXBwUG9wdXBQYXJhbUludmFsaWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyYW1zLmJ1dHRvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgYnV0dG9uID0gcGFyYW1zLmJ1dHRvbnNbaV07XG4gICAgICAgICAgICAgICAgdmFyIGJ0biA9IHt9O1xuICAgICAgICAgICAgICAgIHZhciBpZCA9ICcnO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYnV0dG9uLmlkICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICBpZCA9IGJ1dHRvbi5pZC50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaWQubGVuZ3RoID4gNjQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tUZWxlZ3JhbS5XZWJBcHBdIFBvcHVwIGJ1dHRvbiBpZCBpcyB0b28gbG9uZycsIGlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKCdXZWJBcHBQb3B1cFBhcmFtSW52YWxpZCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJ0bi5pZCA9IGlkO1xuICAgICAgICAgICAgICAgIHZhciBidXR0b25fdHlwZSA9IGJ1dHRvbi50eXBlO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYnV0dG9uX3R5cGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbl90eXBlID0gJ2RlZmF1bHQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBidG4udHlwZSA9IGJ1dHRvbl90eXBlO1xuICAgICAgICAgICAgICAgIGlmIChidXR0b25fdHlwZSA9PSAnb2snIHx8XG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbl90eXBlID09ICdjbG9zZScgfHxcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uX3R5cGUgPT0gJ2NhbmNlbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gbm8gcGFyYW1zIG5lZWRlZFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChidXR0b25fdHlwZSA9PSAnZGVmYXVsdCcgfHxcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uX3R5cGUgPT0gJ2Rlc3RydWN0aXZlJykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGV4dCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGJ1dHRvbi50ZXh0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCA9IHN0clRyaW0oYnV0dG9uLnRleHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGV4dC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tUZWxlZ3JhbS5XZWJBcHBdIFBvcHVwIGJ1dHRvbiB0ZXh0IGlzIHJlcXVpcmVkIGZvciB0eXBlICcgKyBidXR0b25fdHlwZSwgYnV0dG9uLnRleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1dlYkFwcFBvcHVwUGFyYW1JbnZhbGlkJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRleHQubGVuZ3RoID4gNjQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tUZWxlZ3JhbS5XZWJBcHBdIFBvcHVwIGJ1dHRvbiB0ZXh0IGlzIHRvbyBsb25nJywgdGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcignV2ViQXBwUG9wdXBQYXJhbUludmFsaWQnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBidG4udGV4dCA9IHRleHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbVGVsZWdyYW0uV2ViQXBwXSBQb3B1cCBidXR0b24gdHlwZSBpcyBpbnZhbGlkJywgYnV0dG9uX3R5cGUpO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcignV2ViQXBwUG9wdXBQYXJhbUludmFsaWQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnV0dG9ucy5wdXNoKGJ0bik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBidXR0b25zLnB1c2goeyBpZDogJycsIHR5cGU6ICdjbG9zZScgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJ1dHRvbnMubGVuZ3RoIDwgMSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignW1RlbGVncmFtLldlYkFwcF0gUG9wdXAgc2hvdWxkIGhhdmUgYXQgbGVhc3Qgb25lIGJ1dHRvbicpO1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1dlYkFwcFBvcHVwUGFyYW1JbnZhbGlkJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJ1dHRvbnMubGVuZ3RoID4gMykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignW1RlbGVncmFtLldlYkFwcF0gUG9wdXAgc2hvdWxkIG5vdCBoYXZlIG1vcmUgdGhhbiAzIGJ1dHRvbnMnKTtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdXZWJBcHBQb3B1cFBhcmFtSW52YWxpZCcpO1xuICAgICAgICB9XG4gICAgICAgIHBvcHVwX3BhcmFtcy5idXR0b25zID0gYnV0dG9ucztcbiAgICAgICAgd2ViQXBwUG9wdXBPcGVuZWQgPSB7XG4gICAgICAgICAgICBjYWxsYmFjazogY2FsbGJhY2tcbiAgICAgICAgfTtcbiAgICAgICAgV2ViVmlldy5wb3N0RXZlbnQoJ3dlYl9hcHBfb3Blbl9wb3B1cCcsIGZhbHNlLCBwb3B1cF9wYXJhbXMpO1xuICAgIH07XG4gICAgV2ViQXBwLnNob3dBbGVydCA9IGZ1bmN0aW9uIChtZXNzYWdlLCBjYWxsYmFjaykge1xuICAgICAgICBXZWJBcHAuc2hvd1BvcHVwKHtcbiAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2VcbiAgICAgICAgfSwgY2FsbGJhY2sgPyBmdW5jdGlvbiAoKSB7IGNhbGxiYWNrKCk7IH0gOiBudWxsKTtcbiAgICB9O1xuICAgIFdlYkFwcC5zaG93Q29uZmlybSA9IGZ1bmN0aW9uIChtZXNzYWdlLCBjYWxsYmFjaykge1xuICAgICAgICBXZWJBcHAuc2hvd1BvcHVwKHtcbiAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICAgICAgICBidXR0b25zOiBbXG4gICAgICAgICAgICAgICAgeyB0eXBlOiAnb2snLCBpZDogJ29rJyB9LFxuICAgICAgICAgICAgICAgIHsgdHlwZTogJ2NhbmNlbCcgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9LCBjYWxsYmFjayA/IGZ1bmN0aW9uIChidXR0b25faWQpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGJ1dHRvbl9pZCA9PSAnb2snKTtcbiAgICAgICAgfSA6IG51bGwpO1xuICAgIH07XG4gICAgV2ViQXBwLnNob3dTY2FuUXJQb3B1cCA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICghdmVyc2lvbkF0TGVhc3QoJzYuNCcpKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbVGVsZWdyYW0uV2ViQXBwXSBNZXRob2Qgc2hvd1NjYW5RclBvcHVwIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdmVyc2lvbiAnICsgd2ViQXBwVmVyc2lvbik7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignV2ViQXBwTWV0aG9kVW5zdXBwb3J0ZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAod2ViQXBwU2NhblFyUG9wdXBPcGVuZWQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tUZWxlZ3JhbS5XZWJBcHBdIFBvcHVwIGlzIGFscmVhZHkgb3BlbmVkJyk7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignV2ViQXBwU2NhblFyUG9wdXBPcGVuZWQnKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGV4dCA9ICcnO1xuICAgICAgICB2YXIgcG9wdXBfcGFyYW1zID0ge307XG4gICAgICAgIGlmICh0eXBlb2YgcGFyYW1zLnRleHQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0ZXh0ID0gc3RyVHJpbShwYXJhbXMudGV4dCk7XG4gICAgICAgICAgICBpZiAodGV4dC5sZW5ndGggPiA2NCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tUZWxlZ3JhbS5XZWJBcHBdIFNjYW4gUVIgcG9wdXAgdGV4dCBpcyB0b28gbG9uZycsIHRleHQpO1xuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKCdXZWJBcHBTY2FuUXJQb3B1cFBhcmFtSW52YWxpZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRleHQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHBvcHVwX3BhcmFtcy50ZXh0ID0gdGV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB3ZWJBcHBTY2FuUXJQb3B1cE9wZW5lZCA9IHtcbiAgICAgICAgICAgIGNhbGxiYWNrOiBjYWxsYmFja1xuICAgICAgICB9O1xuICAgICAgICBXZWJWaWV3LnBvc3RFdmVudCgnd2ViX2FwcF9vcGVuX3NjYW5fcXJfcG9wdXAnLCBmYWxzZSwgcG9wdXBfcGFyYW1zKTtcbiAgICB9O1xuICAgIFdlYkFwcC5jbG9zZVNjYW5RclBvcHVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXZlcnNpb25BdExlYXN0KCc2LjQnKSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignW1RlbGVncmFtLldlYkFwcF0gTWV0aG9kIGNsb3NlU2NhblFyUG9wdXAgaXMgbm90IHN1cHBvcnRlZCBpbiB2ZXJzaW9uICcgKyB3ZWJBcHBWZXJzaW9uKTtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdXZWJBcHBNZXRob2RVbnN1cHBvcnRlZCcpO1xuICAgICAgICB9XG4gICAgICAgIHdlYkFwcFNjYW5RclBvcHVwT3BlbmVkID0gZmFsc2U7XG4gICAgICAgIFdlYlZpZXcucG9zdEV2ZW50KCd3ZWJfYXBwX2Nsb3NlX3NjYW5fcXJfcG9wdXAnLCBmYWxzZSk7XG4gICAgfTtcbiAgICBXZWJBcHAucmVhZFRleHRGcm9tQ2xpcGJvYXJkID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICghdmVyc2lvbkF0TGVhc3QoJzYuNCcpKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbVGVsZWdyYW0uV2ViQXBwXSBNZXRob2QgcmVhZFRleHRGcm9tQ2xpcGJvYXJkIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdmVyc2lvbiAnICsgd2ViQXBwVmVyc2lvbik7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignV2ViQXBwTWV0aG9kVW5zdXBwb3J0ZWQnKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVxX2lkID0gZ2VuZXJhdGVDYWxsYmFja0lkKDE2KTtcbiAgICAgICAgdmFyIHJlcV9wYXJhbXMgPSB7IHJlcV9pZDogcmVxX2lkIH07XG4gICAgICAgIHdlYkFwcENhbGxiYWNrc1tyZXFfaWRdID0ge1xuICAgICAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrXG4gICAgICAgIH07XG4gICAgICAgIFdlYlZpZXcucG9zdEV2ZW50KCd3ZWJfYXBwX3JlYWRfdGV4dF9mcm9tX2NsaXBib2FyZCcsIGZhbHNlLCByZXFfcGFyYW1zKTtcbiAgICB9O1xuICAgIFdlYkFwcC5yZXF1ZXN0V3JpdGVBY2Nlc3MgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKCF2ZXJzaW9uQXRMZWFzdCgnNi45JykpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tUZWxlZ3JhbS5XZWJBcHBdIE1ldGhvZCByZXF1ZXN0V3JpdGVBY2Nlc3MgaXMgbm90IHN1cHBvcnRlZCBpbiB2ZXJzaW9uICcgKyB3ZWJBcHBWZXJzaW9uKTtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdXZWJBcHBNZXRob2RVbnN1cHBvcnRlZCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChXZWJBcHBXcml0ZUFjY2Vzc1JlcXVlc3RlZCkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignW1RlbGVncmFtLldlYkFwcF0gV3JpdGUgYWNjZXNzIGlzIGFscmVhZHkgcmVxdWVzdGVkJyk7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignV2ViQXBwV3JpdGVBY2Nlc3NSZXF1ZXN0ZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBXZWJBcHBXcml0ZUFjY2Vzc1JlcXVlc3RlZCA9IHtcbiAgICAgICAgICAgIGNhbGxiYWNrOiBjYWxsYmFja1xuICAgICAgICB9O1xuICAgICAgICBXZWJWaWV3LnBvc3RFdmVudCgnd2ViX2FwcF9yZXF1ZXN0X3dyaXRlX2FjY2VzcycpO1xuICAgIH07XG4gICAgV2ViQXBwLnJlcXVlc3RDb250YWN0ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICghdmVyc2lvbkF0TGVhc3QoJzYuOScpKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbVGVsZWdyYW0uV2ViQXBwXSBNZXRob2QgcmVxdWVzdENvbnRhY3QgaXMgbm90IHN1cHBvcnRlZCBpbiB2ZXJzaW9uICcgKyB3ZWJBcHBWZXJzaW9uKTtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdXZWJBcHBNZXRob2RVbnN1cHBvcnRlZCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChXZWJBcHBDb250YWN0UmVxdWVzdGVkKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbVGVsZWdyYW0uV2ViQXBwXSBDb250YWN0IGlzIGFscmVhZHkgcmVxdWVzdGVkJyk7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignV2ViQXBwQ29udGFjdFJlcXVlc3RlZCcpO1xuICAgICAgICB9XG4gICAgICAgIFdlYkFwcENvbnRhY3RSZXF1ZXN0ZWQgPSB7XG4gICAgICAgICAgICBjYWxsYmFjazogY2FsbGJhY2tcbiAgICAgICAgfTtcbiAgICAgICAgV2ViVmlldy5wb3N0RXZlbnQoJ3dlYl9hcHBfcmVxdWVzdF9waG9uZScpO1xuICAgIH07XG4gICAgV2ViQXBwLnNoYXJlVG9TdG9yeSA9IGZ1bmN0aW9uIChtZWRpYV91cmwsIHBhcmFtcykge1xuICAgICAgICBwYXJhbXMgPSBwYXJhbXMgfHwge307XG4gICAgICAgIGlmICghdmVyc2lvbkF0TGVhc3QoJzcuOCcpKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbVGVsZWdyYW0uV2ViQXBwXSBNZXRob2Qgc2hhcmVUb1N0b3J5IGlzIG5vdCBzdXBwb3J0ZWQgaW4gdmVyc2lvbiAnICsgd2ViQXBwVmVyc2lvbik7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignV2ViQXBwTWV0aG9kVW5zdXBwb3J0ZWQnKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ0EnKTtcbiAgICAgICAgYS5ocmVmID0gbWVkaWFfdXJsO1xuICAgICAgICBpZiAoYS5wcm90b2NvbCAhPSAnaHR0cDonICYmXG4gICAgICAgICAgICBhLnByb3RvY29sICE9ICdodHRwczonKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbVGVsZWdyYW0uV2ViQXBwXSBNZWRpYSB1cmwgcHJvdG9jb2wgaXMgbm90IHN1cHBvcnRlZCcsIHVybCk7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignV2ViQXBwTWVkaWFVcmxJbnZhbGlkJyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNoYXJlX3BhcmFtcyA9IHt9O1xuICAgICAgICBzaGFyZV9wYXJhbXMubWVkaWFfdXJsID0gYS5ocmVmO1xuICAgICAgICBpZiAodHlwZW9mIHBhcmFtcy50ZXh0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdmFyIHRleHQgPSBzdHJUcmltKHBhcmFtcy50ZXh0KTtcbiAgICAgICAgICAgIGlmICh0ZXh0Lmxlbmd0aCA+IDIwNDgpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbVGVsZWdyYW0uV2ViQXBwXSBUZXh0IGlzIHRvbyBsb25nJywgdGV4dCk7XG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1dlYkFwcFNoYXJlVG9TdG9yeVBhcmFtSW52YWxpZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRleHQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHNoYXJlX3BhcmFtcy50ZXh0ID0gdGV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHBhcmFtcy53aWRnZXRfbGluayAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHBhcmFtcy53aWRnZXRfbGluayA9IHBhcmFtcy53aWRnZXRfbGluayB8fCB7fTtcbiAgICAgICAgICAgIGEuaHJlZiA9IHBhcmFtcy53aWRnZXRfbGluay51cmw7XG4gICAgICAgICAgICBpZiAoYS5wcm90b2NvbCAhPSAnaHR0cDonICYmXG4gICAgICAgICAgICAgICAgYS5wcm90b2NvbCAhPSAnaHR0cHM6Jykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tUZWxlZ3JhbS5XZWJBcHBdIExpbmsgcHJvdG9jb2wgaXMgbm90IHN1cHBvcnRlZCcsIHVybCk7XG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1dlYkFwcFNoYXJlVG9TdG9yeVBhcmFtSW52YWxpZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHdpZGdldF9saW5rID0ge1xuICAgICAgICAgICAgICAgIHVybDogYS5ocmVmXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXJhbXMud2lkZ2V0X2xpbmsubmFtZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGlua19uYW1lID0gc3RyVHJpbShwYXJhbXMud2lkZ2V0X2xpbmsubmFtZSk7XG4gICAgICAgICAgICAgICAgaWYgKGxpbmtfbmFtZS5sZW5ndGggPiA0OCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbVGVsZWdyYW0uV2ViQXBwXSBMaW5rIG5hbWUgaXMgdG9vIGxvbmcnLCBsaW5rX25hbWUpO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcignV2ViQXBwU2hhcmVUb1N0b3J5UGFyYW1JbnZhbGlkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChsaW5rX25hbWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB3aWRnZXRfbGluay5uYW1lID0gbGlua19uYW1lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNoYXJlX3BhcmFtcy53aWRnZXRfbGluayA9IHdpZGdldF9saW5rO1xuICAgICAgICB9XG4gICAgICAgIFdlYlZpZXcucG9zdEV2ZW50KCd3ZWJfYXBwX3NoYXJlX3RvX3N0b3J5JywgZmFsc2UsIHNoYXJlX3BhcmFtcyk7XG4gICAgfTtcbiAgICBXZWJBcHAuaW52b2tlQ3VzdG9tTWV0aG9kID0gZnVuY3Rpb24gKG1ldGhvZCwgcGFyYW1zLCBjYWxsYmFjaykge1xuICAgICAgICBpbnZva2VDdXN0b21NZXRob2QobWV0aG9kLCBwYXJhbXMsIGNhbGxiYWNrKTtcbiAgICB9O1xuICAgIFdlYkFwcC5yZWFkeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgV2ViVmlldy5wb3N0RXZlbnQoJ3dlYl9hcHBfcmVhZHknKTtcbiAgICB9O1xuICAgIFdlYkFwcC5leHBhbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIFdlYlZpZXcucG9zdEV2ZW50KCd3ZWJfYXBwX2V4cGFuZCcpO1xuICAgIH07XG4gICAgV2ViQXBwLmNsb3NlID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIHZhciByZXFfcGFyYW1zID0ge307XG4gICAgICAgIGlmICh2ZXJzaW9uQXRMZWFzdCgnNy42JykgJiYgb3B0aW9ucy5yZXR1cm5fYmFjaykge1xuICAgICAgICAgICAgcmVxX3BhcmFtcy5yZXR1cm5fYmFjayA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgV2ViVmlldy5wb3N0RXZlbnQoJ3dlYl9hcHBfY2xvc2UnLCBmYWxzZSwgcmVxX3BhcmFtcyk7XG4gICAgfTtcbiAgICB3aW5kb3cuVGVsZWdyYW0uV2ViQXBwID0gV2ViQXBwO1xuICAgIHVwZGF0ZUhlYWRlckNvbG9yKCk7XG4gICAgdXBkYXRlQmFja2dyb3VuZENvbG9yKCk7XG4gICAgdXBkYXRlQm90dG9tQmFyQ29sb3IoKTtcbiAgICBzZXRWaWV3cG9ydEhlaWdodCgpO1xuICAgIGlmIChpbml0UGFyYW1zLnRnV2ViQXBwU2hvd1NldHRpbmdzKSB7XG4gICAgICAgIFNldHRpbmdzQnV0dG9uLnNob3coKTtcbiAgICB9XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIG9uV2luZG93UmVzaXplKTtcbiAgICBpZiAoaXNJZnJhbWUpIHtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBsaW5rSGFuZGxlcik7XG4gICAgfVxuICAgIFdlYlZpZXcub25FdmVudCgndGhlbWVfY2hhbmdlZCcsIG9uVGhlbWVDaGFuZ2VkKTtcbiAgICBXZWJWaWV3Lm9uRXZlbnQoJ3ZpZXdwb3J0X2NoYW5nZWQnLCBvblZpZXdwb3J0Q2hhbmdlZCk7XG4gICAgV2ViVmlldy5vbkV2ZW50KCdpbnZvaWNlX2Nsb3NlZCcsIG9uSW52b2ljZUNsb3NlZCk7XG4gICAgV2ViVmlldy5vbkV2ZW50KCdwb3B1cF9jbG9zZWQnLCBvblBvcHVwQ2xvc2VkKTtcbiAgICBXZWJWaWV3Lm9uRXZlbnQoJ3FyX3RleHRfcmVjZWl2ZWQnLCBvblFyVGV4dFJlY2VpdmVkKTtcbiAgICBXZWJWaWV3Lm9uRXZlbnQoJ3NjYW5fcXJfcG9wdXBfY2xvc2VkJywgb25TY2FuUXJQb3B1cENsb3NlZCk7XG4gICAgV2ViVmlldy5vbkV2ZW50KCdjbGlwYm9hcmRfdGV4dF9yZWNlaXZlZCcsIG9uQ2xpcGJvYXJkVGV4dFJlY2VpdmVkKTtcbiAgICBXZWJWaWV3Lm9uRXZlbnQoJ3dyaXRlX2FjY2Vzc19yZXF1ZXN0ZWQnLCBvbldyaXRlQWNjZXNzUmVxdWVzdGVkKTtcbiAgICBXZWJWaWV3Lm9uRXZlbnQoJ3Bob25lX3JlcXVlc3RlZCcsIG9uUGhvbmVSZXF1ZXN0ZWQpO1xuICAgIFdlYlZpZXcub25FdmVudCgnY3VzdG9tX21ldGhvZF9pbnZva2VkJywgb25DdXN0b21NZXRob2RJbnZva2VkKTtcbiAgICBXZWJWaWV3LnBvc3RFdmVudCgnd2ViX2FwcF9yZXF1ZXN0X3RoZW1lJyk7XG4gICAgV2ViVmlldy5wb3N0RXZlbnQoJ3dlYl9hcHBfcmVxdWVzdF92aWV3cG9ydCcpO1xufSkoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRlbGVncmFtLXdlYi1hcHBzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@twa-dev/sdk/dist/telegram-web-apps.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/page.tsx":
/*!**********************!*\
  !*** ./app/page.tsx ***!
  \**********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Home; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var _twa_dev_sdk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @twa-dev/sdk */ \"(app-pages-browser)/./node_modules/@twa-dev/sdk/dist/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\nfunction Home() {\n    _s();\n    const [userData, setUserData] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (_twa_dev_sdk__WEBPACK_IMPORTED_MODULE_2__[\"default\"].initDataUnsafe.user) {\n            setUserData(_twa_dev_sdk__WEBPACK_IMPORTED_MODULE_2__[\"default\"].initDataUnsafe.user);\n        }\n    }, []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"main\", {\n        className: \"p-4\",\n        children: userData ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {\n                    className: \"text-2xl font-bold mb-4\",\n                    children: \"User Data\"\n                }, void 0, false, {\n                    fileName: \"C:\\\\Users\\\\lolke\\\\projects\\\\app\\\\page.tsx\",\n                    lineNumber: 30,\n                    columnNumber: 14\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"ul\", {\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                            children: [\n                                \"ID: \",\n                                userData.id\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\lolke\\\\projects\\\\app\\\\page.tsx\",\n                            lineNumber: 32,\n                            columnNumber: 16\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                            children: [\n                                \"First Name: \",\n                                userData.first_name\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\lolke\\\\projects\\\\app\\\\page.tsx\",\n                            lineNumber: 33,\n                            columnNumber: 16\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                            children: [\n                                \"LastName: \",\n                                userData.last_name\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\lolke\\\\projects\\\\app\\\\page.tsx\",\n                            lineNumber: 34,\n                            columnNumber: 16\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                            children: [\n                                \"Username: \",\n                                userData.username\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\lolke\\\\projects\\\\app\\\\page.tsx\",\n                            lineNumber: 35,\n                            columnNumber: 16\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                            children: [\n                                \"Language Code: \",\n                                userData.language_code\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\lolke\\\\projects\\\\app\\\\page.tsx\",\n                            lineNumber: 36,\n                            columnNumber: 16\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                            children: [\n                                \"Is Premium: \",\n                                userData.is_premium ? \"Yes\" : \"No\"\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\lolke\\\\projects\\\\app\\\\page.tsx\",\n                            lineNumber: 37,\n                            columnNumber: 16\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"C:\\\\Users\\\\lolke\\\\projects\\\\app\\\\page.tsx\",\n                    lineNumber: 31,\n                    columnNumber: 14\n                }, this)\n            ]\n        }, void 0, true) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            children: \"Loading...\"\n        }, void 0, false, {\n            fileName: \"C:\\\\Users\\\\lolke\\\\projects\\\\app\\\\page.tsx\",\n            lineNumber: 42,\n            columnNumber: 12\n        }, this)\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\lolke\\\\projects\\\\app\\\\page.tsx\",\n        lineNumber: 25,\n        columnNumber: 5\n    }, this);\n}\n_s(Home, \"Q/bN2hINckB+VINYSZfns3MkAk8=\");\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9wYWdlLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBRWtDO0FBQ1U7QUFXN0IsU0FBU0c7O0lBQ3RCLE1BQU0sQ0FBQ0MsVUFBVUMsWUFBWSxHQUFHSCwrQ0FBUUEsQ0FBa0I7SUFFMURELGdEQUFTQSxDQUFDO1FBQ1IsSUFBSUQsb0RBQU1BLENBQUNNLGNBQWMsQ0FBQ0MsSUFBSSxFQUFFO1lBQzlCRixZQUFZTCxvREFBTUEsQ0FBQ00sY0FBYyxDQUFDQyxJQUFJO1FBQ3hDO0lBQ0YsR0FBRyxFQUFFO0lBRUwscUJBQ0UsOERBQUNDO1FBQUtDLFdBQVU7a0JBRVpMLHlCQUVHOzs4QkFDRSw4REFBQ007b0JBQUdELFdBQVU7OEJBQTBCOzs7Ozs7OEJBQ3hDLDhEQUFDRTs7c0NBQ0MsOERBQUNDOztnQ0FBRztnQ0FBS1IsU0FBU1MsRUFBRTs7Ozs7OztzQ0FDcEIsOERBQUNEOztnQ0FBRztnQ0FBYVIsU0FBU1UsVUFBVTs7Ozs7OztzQ0FDcEMsOERBQUNGOztnQ0FBRztnQ0FBV1IsU0FBU1csU0FBUzs7Ozs7OztzQ0FDakMsOERBQUNIOztnQ0FBRztnQ0FBV1IsU0FBU1ksUUFBUTs7Ozs7OztzQ0FDaEMsOERBQUNKOztnQ0FBRztnQ0FBZ0JSLFNBQVNhLGFBQWE7Ozs7Ozs7c0NBQzFDLDhEQUFDTDs7Z0NBQUc7Z0NBQWFSLFNBQVNjLFVBQVUsR0FBRyxRQUFROzs7Ozs7Ozs7Ozs7Ozt5Q0FLbkQsOERBQUNDO3NCQUFJOzs7Ozs7Ozs7OztBQUtoQjtHQWhDd0JoQjtLQUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9hcHAvcGFnZS50c3g/NzYwMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBjbGllbnRcIlxuXG5pbXBvcnQgV2ViQXBwIGZyb20gXCJAdHdhLWRldi9zZGtcIjtcbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcblxuaW50ZXJmYWNlIFVzZXJEYXRhIHtcbiAgaWQ6IG51bWJlcjtcbiAgZmlyc3RfbmFtZTogc3RyaW5nO1xuICBsYXN0X25hbWU/OiBzdHJpbmc7XG4gIHVzZXJuYW1lPzogc3RyaW5nO1xuICBsYW5ndWFnZV9jb2RlOiBzdHJpbmc7XG4gIGlzX3ByZW1pdW0/OiBib29sZWFuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBIb21lKCkge1xuICBjb25zdCBbdXNlckRhdGEsIHNldFVzZXJEYXRhXSA9IHVzZVN0YXRlPFVzZXJEYXRhIHwgbnVsbD4obnVsbClcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChXZWJBcHAuaW5pdERhdGFVbnNhZmUudXNlcikge1xuICAgICAgc2V0VXNlckRhdGEoV2ViQXBwLmluaXREYXRhVW5zYWZlLnVzZXIgYXMgVXNlckRhdGEpXG4gICAgfVxuICB9LCBbXSlcbiAgXG4gIHJldHVybiAoXG4gICAgPG1haW4gY2xhc3NOYW1lPSdwLTQnPlxuICAgICAge1xuICAgICAgICB1c2VyRGF0YSA/XG4gICAgICAgICAoXG4gICAgICAgICAgIDw+XG4gICAgICAgICAgICAgPGgxIGNsYXNzTmFtZT1cInRleHQtMnhsIGZvbnQtYm9sZCBtYi00XCI+VXNlciBEYXRhPC9oMT5cbiAgICAgICAgICAgICA8dWw+XG4gICAgICAgICAgICAgICA8bGk+SUQ6IHt1c2VyRGF0YS5pZH08L2xpPlxuICAgICAgICAgICAgICAgPGxpPkZpcnN0IE5hbWU6IHt1c2VyRGF0YS5maXJzdF9uYW1lfTwvbGk+XG4gICAgICAgICAgICAgICA8bGk+TGFzdE5hbWU6IHt1c2VyRGF0YS5sYXN0X25hbWV9PC9saT5cbiAgICAgICAgICAgICAgIDxsaT5Vc2VybmFtZToge3VzZXJEYXRhLnVzZXJuYW1lfTwvbGk+XG4gICAgICAgICAgICAgICA8bGk+TGFuZ3VhZ2UgQ29kZToge3VzZXJEYXRhLmxhbmd1YWdlX2NvZGV9PC9saT5cbiAgICAgICAgICAgICAgIDxsaT5JcyBQcmVtaXVtOiB7dXNlckRhdGEuaXNfcHJlbWl1bSA/ICdZZXMnIDogJ05vJ308L2xpPlxuICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgIDwvPlxuICAgICAgICAgKSA6XG4gICAgICAgICAoXG4gICAgICAgICAgIDxkaXY+TG9hZGluZy4uLjwvZGl2PlxuICAgICAgICAgKVxuICAgICAgfVxuICAgIDwvbWFpbj5cbiAgKTtcbn1cblxuIl0sIm5hbWVzIjpbIldlYkFwcCIsInVzZUVmZmVjdCIsInVzZVN0YXRlIiwiSG9tZSIsInVzZXJEYXRhIiwic2V0VXNlckRhdGEiLCJpbml0RGF0YVVuc2FmZSIsInVzZXIiLCJtYWluIiwiY2xhc3NOYW1lIiwiaDEiLCJ1bCIsImxpIiwiaWQiLCJmaXJzdF9uYW1lIiwibGFzdF9uYW1lIiwidXNlcm5hbWUiLCJsYW5ndWFnZV9jb2RlIiwiaXNfcHJlbWl1bSIsImRpdiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/page.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\nvar React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider'); // TODO: Delete with enableRenderableContext\n\nvar REACT_CONSUMER_TYPE = Symbol.for('react.consumer');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nvar REACT_CACHE_TYPE = Symbol.for('react.cache');\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nfunction error(format) {\n  {\n    {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var argsWithFormat = args.map(function (item) {\n      return String(item);\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\n// -----------------------------------------------------------------------------\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\nvar enableCacheElement = false;\nvar enableTransitionTracing = false; // No known bugs, but needs performance testing\n\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\nvar enableRenderableContext = false;\n// stuff. Intended to enable React core members to more easily debug scheduling\n// issues in DEV builds.\n\nvar enableDebugTracing = false;\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var displayName = outerType.displayName;\n\n  if (displayName) {\n    return displayName;\n  }\n\n  var functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n}\n\nvar REACT_CLIENT_REFERENCE$2 = Symbol.for('react.client.reference'); // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\nfunction getComponentNameFromType(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  if (typeof type === 'function') {\n    if (type.$$typeof === REACT_CLIENT_REFERENCE$2) {\n      // TODO: Create a convention for naming client references with debug info.\n      return null;\n    }\n\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n\n    case REACT_CACHE_TYPE:\n      {\n        return 'Cache';\n      }\n\n  }\n\n  if (typeof type === 'object') {\n    {\n      if (typeof type.tag === 'number') {\n        error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n      }\n    }\n\n    switch (type.$$typeof) {\n      case REACT_PROVIDER_TYPE:\n        {\n          var provider = type;\n          return getContextName(provider._context) + '.Provider';\n        }\n\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n\n        {\n          return getContextName(context) + '.Consumer';\n        }\n\n      case REACT_CONSUMER_TYPE:\n        {\n          return null;\n        }\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        var outerName = type.displayName || null;\n\n        if (outerName !== null) {\n          return outerName;\n        }\n\n        return getComponentNameFromType(type.type) || 'Memo';\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentNameFromType(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n    }\n  }\n\n  return null;\n}\n\n// $FlowFixMe[method-unbinding]\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar assign = Object.assign;\n\n/*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n// $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\nfunction typeName(value) {\n  {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object'; // $FlowFixMe[incompatible-return]\n\n    return type;\n  }\n} // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n\n\nfunction willCoercionThrow(value) {\n  {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\nfunction checkKeyStringCoercion(value) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before using it here.', typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nvar REACT_CLIENT_REFERENCE$1 = Symbol.for('react.client.reference');\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || enableRenderableContext  || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n    // types supported by any Flight configuration anywhere since\n    // we don't know which Flight build this will end up being used\n    // with.\n    type.$$typeof === REACT_CLIENT_REFERENCE$1 || type.getModuleId !== undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: assign({}, props, {\n          value: prevLog\n        }),\n        info: assign({}, props, {\n          value: prevInfo\n        }),\n        warn: assign({}, props, {\n          value: prevWarn\n        }),\n        error: assign({}, props, {\n          value: prevError\n        }),\n        group: assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n/**\n * Leverages native browser/VM stack frames to get proper details (e.g.\n * filename, line + col number) for a single component in a component stack. We\n * do this by:\n *   (1) throwing and catching an error in the function - this will be our\n *       control error.\n *   (2) calling the component which will eventually throw an error that we'll\n *       catch - this will be our sample error.\n *   (3) diffing the control and sample error stacks to find the stack frame\n *       which represents our component.\n */\n\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (!fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n  /**\n   * Finding a common stack frame between sample and control errors can be\n   * tricky given the different types and levels of stack trace truncation from\n   * different JS VMs. So instead we'll attempt to control what that common\n   * frame should be through this object method:\n   * Having both the sample and control errors be in the function under the\n   * `DescribeNativeComponentFrameRoot` property, + setting the `name` and\n   * `displayName` properties of the function ensures that a stack\n   * frame exists that has the method name `DescribeNativeComponentFrameRoot` in\n   * it for both control and sample stacks.\n   */\n\n\n  var RunInRootFrame = {\n    DetermineComponentFrameRoot: function () {\n      var control;\n\n      try {\n        // This should throw.\n        if (construct) {\n          // Something should be setting the props in the constructor.\n          var Fake = function () {\n            throw Error();\n          }; // $FlowFixMe[prop-missing]\n\n\n          Object.defineProperty(Fake.prototype, 'props', {\n            set: function () {\n              // We use a throwing setter instead of frozen or non-writable props\n              // because that won't throw in a non-strict mode function.\n              throw Error();\n            }\n          });\n\n          if (typeof Reflect === 'object' && Reflect.construct) {\n            // We construct a different control for this case to include any extra\n            // frames added by the construct call.\n            try {\n              Reflect.construct(Fake, []);\n            } catch (x) {\n              control = x;\n            }\n\n            Reflect.construct(fn, [], Fake);\n          } else {\n            try {\n              Fake.call();\n            } catch (x) {\n              control = x;\n            } // $FlowFixMe[prop-missing] found when upgrading Flow\n\n\n            fn.call(Fake.prototype);\n          }\n        } else {\n          try {\n            throw Error();\n          } catch (x) {\n            control = x;\n          } // TODO(luna): This will currently only throw if the function component\n          // tries to access React/ReactDOM/props. We should probably make this throw\n          // in simple components too\n\n\n          var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n          // component, which we don't yet support. Attach a noop catch handler to\n          // silence the error.\n          // TODO: Implement component stacks for async client components?\n\n          if (maybePromise && typeof maybePromise.catch === 'function') {\n            maybePromise.catch(function () {});\n          }\n        }\n      } catch (sample) {\n        // This is inlined manually because closure doesn't do it for us.\n        if (sample && control && typeof sample.stack === 'string') {\n          return [sample.stack, control.stack];\n        }\n      }\n\n      return [null, null];\n    }\n  }; // $FlowFixMe[prop-missing]\n\n  RunInRootFrame.DetermineComponentFrameRoot.displayName = 'DetermineComponentFrameRoot';\n  var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, 'name'); // Before ES6, the `name` property was not configurable.\n\n  if (namePropDescriptor && namePropDescriptor.configurable) {\n    // V8 utilizes a function's `name` property when generating a stack trace.\n    Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, // Configurable properties can be updated even if its writable descriptor\n    // is set to `false`.\n    // $FlowFixMe[cannot-write]\n    'name', {\n      value: 'DetermineComponentFrameRoot'\n    });\n  }\n\n  try {\n    var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(),\n        sampleStack = _RunInRootFrame$Deter[0],\n        controlStack = _RunInRootFrame$Deter[1];\n\n    if (sampleStack && controlStack) {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sampleStack.split('\\n');\n      var controlLines = controlStack.split('\\n');\n      var s = 0;\n      var c = 0;\n\n      while (s < sampleLines.length && !sampleLines[s].includes('DetermineComponentFrameRoot')) {\n        s++;\n      }\n\n      while (c < controlLines.length && !controlLines[c].includes('DetermineComponentFrameRoot')) {\n        c++;\n      } // We couldn't find our intentionally injected common root frame, attempt\n      // to find another common root frame by search from the bottom of the\n      // control stack...\n\n\n      if (s === sampleLines.length || c === controlLines.length) {\n        s = sampleLines.length - 1;\n        c = controlLines.length - 1;\n\n        while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n          // We expect at least one stack frame to be shared.\n          // Typically this will be the root most one. However, stack frames may be\n          // cut off due to maximum stack limits. In this case, one maybe cut off\n          // earlier than the other. We assume that the sample is longer or the same\n          // and there for cut off earlier. So we should find the root most frame in\n          // the sample somewhere in the control.\n          c--;\n        }\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n\n\n                if (fn.displayName && _frame.includes('<anonymous>')) {\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\n                }\n\n                if (true) {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeFunctionComponentFrame(fn, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, ownerFn);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\nvar REACT_CLIENT_REFERENCE = Symbol.for('react.client.reference');\nvar specialPropKeyWarningShown;\nvar specialPropRefWarningShown;\nvar didWarnAboutStringRefs;\n\n{\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config, self) {\n  {\n    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {\n      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);\n\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingKey = function () {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingKey.isReactWarning = true;\n    Object.defineProperty(props, 'key', {\n      get: warnAboutAccessingKey,\n      configurable: true\n    });\n  }\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  {\n    {\n      var warnAboutAccessingRef = function () {\n        if (!specialPropRefWarningShown) {\n          specialPropRefWarningShown = true;\n\n          error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n        }\n      };\n\n      warnAboutAccessingRef.isReactWarning = true;\n      Object.defineProperty(props, 'ref', {\n        get: warnAboutAccessingRef,\n        configurable: true\n      });\n    }\n  }\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nfunction ReactElement(type, key, _ref, self, source, owner, props) {\n  var ref;\n\n  {\n    ref = _ref;\n  }\n\n  var element;\n\n  {\n    // In prod, `ref` is a regular property. It will be removed in a\n    // future release.\n    element = {\n      // This tag allows us to uniquely identify this as a React Element\n      $$typeof: REACT_ELEMENT_TYPE,\n      // Built-in properties that belong on the element\n      type: type,\n      key: key,\n      ref: ref,\n      props: props,\n      // Record the component responsible for creating this element.\n      _owner: owner\n    };\n  }\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // debugInfo contains Server Component debug information.\n\n    Object.defineProperty(element, '_debugInfo', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: null\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n}\nvar didWarnAboutKeySpread = {};\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\nfunction jsxDEV$1(type, config, maybeKey, isStaticChildren, source, self) {\n  {\n    if (!isValidElementType(type)) {\n      // This is an invalid element type.\n      //\n      // We warn in this case but don't throw. We expect the element creation to\n      // succeed and there will likely be errors in render.\n      var info = '';\n\n      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n        info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n      }\n\n      var typeString;\n\n      if (type === null) {\n        typeString = 'null';\n      } else if (isArray(type)) {\n        typeString = 'array';\n      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n        typeString = \"<\" + (getComponentNameFromType(type.type) || 'Unknown') + \" />\";\n        info = ' Did you accidentally export a JSX literal instead of a component?';\n      } else {\n        typeString = typeof type;\n      }\n\n      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    } else {\n      // This is a valid element type.\n      // Skip key warning if the type isn't valid since our key validation logic\n      // doesn't expect a non-string/function type and can throw confusing\n      // errors. We don't want exception behavior to differ between dev and\n      // prod. (Rendering will throw with a helpful message and as soon as the\n      // type is fixed, the key warnings will appear.)\n      var children = config.children;\n\n      if (children !== undefined) {\n        if (isStaticChildren) {\n          if (isArray(children)) {\n            for (var i = 0; i < children.length; i++) {\n              validateChildKeys(children[i], type);\n            }\n\n            if (Object.freeze) {\n              Object.freeze(children);\n            }\n          } else {\n            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\n          }\n        } else {\n          validateChildKeys(children, type);\n        }\n      }\n    } // Warn about key spread regardless of whether the type is valid.\n\n\n    if (hasOwnProperty.call(config, 'key')) {\n      var componentName = getComponentNameFromType(type);\n      var keys = Object.keys(config).filter(function (k) {\n        return k !== 'key';\n      });\n      var beforeExample = keys.length > 0 ? '{key: someKey, ' + keys.join(': ..., ') + ': ...}' : '{key: someKey}';\n\n      if (!didWarnAboutKeySpread[componentName + beforeExample]) {\n        var afterExample = keys.length > 0 ? '{' + keys.join(': ..., ') + ': ...}' : '{}';\n\n        error('A props object containing a \"key\" prop is being spread into JSX:\\n' + '  let props = %s;\\n' + '  <%s {...props} />\\n' + 'React keys must be passed directly to JSX without using spread:\\n' + '  let props = %s;\\n' + '  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);\n\n        didWarnAboutKeySpread[componentName + beforeExample] = true;\n      }\n    }\n\n    var propName; // Reserved names are extracted\n\n    var props = {};\n    var key = null;\n    var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n    // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n    // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n    // but as an intermediary step, we will use jsxDEV for everything except\n    // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n    // key is explicitly declared to be undefined or not.\n\n    if (maybeKey !== undefined) {\n      {\n        checkKeyStringCoercion(maybeKey);\n      }\n\n      key = '' + maybeKey;\n    }\n\n    if (hasValidKey(config)) {\n      {\n        checkKeyStringCoercion(config.key);\n      }\n\n      key = '' + config.key;\n    }\n\n    if (hasValidRef(config)) {\n      {\n        ref = config.ref;\n      }\n\n      warnIfStringRefCannotBeAutoConverted(config, self);\n    } // Remaining properties are added to a new props object\n\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && // Skip over reserved prop names\n      propName !== 'key' && (propName !== 'ref')) {\n        props[propName] = config[propName];\n      }\n    } // Resolve default props\n\n\n    if (type && type.defaultProps) {\n      var defaultProps = type.defaultProps;\n\n      for (propName in defaultProps) {\n        if (props[propName] === undefined) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    }\n\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n\n    var element = ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n\n    if (type === REACT_FRAGMENT_TYPE) {\n      validateFragmentProps(element);\n    }\n\n    return element;\n  }\n}\n\nfunction getDeclarationErrorAddendum() {\n  {\n    if (ReactCurrentOwner.current) {\n      var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (name) {\n        return '\\n\\nCheck the render method of `' + name + '`.';\n      }\n    }\n\n    return '';\n  }\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  {\n    if (typeof node !== 'object' || !node) {\n      return;\n    }\n\n    if (node.$$typeof === REACT_CLIENT_REFERENCE) ; else if (isArray(node)) {\n      for (var i = 0; i < node.length; i++) {\n        var child = node[i];\n\n        if (isValidElement(child)) {\n          validateExplicitKey(child, parentType);\n        }\n      }\n    } else if (isValidElement(node)) {\n      // This element was passed in a valid location.\n      if (node._store) {\n        node._store.validated = true;\n      }\n    } else {\n      var iteratorFn = getIteratorFn(node);\n\n      if (typeof iteratorFn === 'function') {\n        // Entry iterators used to provide implicit keys,\n        // but now we print a separate warning for them later.\n        if (iteratorFn !== node.entries) {\n          var iterator = iteratorFn.call(node);\n          var step;\n\n          while (!(step = iterator.next()).done) {\n            if (isValidElement(step.value)) {\n              validateExplicitKey(step.value, parentType);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\n\nfunction isValidElement(object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n}\nvar ownerHasKeyUseWarning = {};\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\nfunction validateExplicitKey(element, parentType) {\n  {\n    if (!element._store || element._store.validated || element.key != null) {\n      return;\n    }\n\n    element._store.validated = true;\n    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n      return;\n    }\n\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n    // property, it may be the creator of the child that's responsible for\n    // assigning it a key.\n\n    var childOwner = '';\n\n    if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n      // Give the component that originally created this child.\n      childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n    }\n\n    setCurrentlyValidatingElement(element);\n\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n\n    setCurrentlyValidatingElement(null);\n  }\n}\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, owner ? owner.type : null);\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  {\n    var info = getDeclarationErrorAddendum();\n\n    if (!info) {\n      var parentName = getComponentNameFromType(parentType);\n\n      if (parentName) {\n        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n      }\n    }\n\n    return info;\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  // TODO: Move this to render phase instead of at element creation.\n  {\n    var keys = Object.keys(fragment.props);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        setCurrentlyValidatingElement(fragment);\n\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n        setCurrentlyValidatingElement(null);\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      setCurrentlyValidatingElement(fragment);\n\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n\n      setCurrentlyValidatingElement(null);\n    }\n  }\n}\n\nvar jsxDEV = jsxDEV$1 ;\n\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.jsxDEV = jsxDEV;\n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvY2pzL3JlYWN0LWpzeC1kZXYtcnVudGltZS5kZXZlbG9wbWVudC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWE7O0FBRWIsSUFBSSxJQUFxQztBQUN6QztBQUNBOztBQUVBLFlBQVksbUJBQU8sQ0FBQyxzR0FBMEI7O0FBRTlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdEQUF3RDs7QUFFeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGlHQUFpRyxlQUFlO0FBQ2hIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07OztBQUdOO0FBQ0E7QUFDQSxLQUFLLEdBQUc7O0FBRVIsa0RBQWtEO0FBQ2xEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBLDRCQUE0QjtBQUM1QjtBQUNBLHFDQUFxQzs7QUFFckMsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTs7O0FBR0Y7QUFDQTtBQUNBOztBQUVBLHFFQUFxRTs7QUFFckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0dBQWtHOztBQUVsRztBQUNBO0FBQ0EsRUFBRTs7O0FBR0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7OztBQUdKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxpQ0FBaUM7O0FBRWpDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1Qzs7QUFFdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0EsU0FBUztBQUNULHVCQUF1QjtBQUN2QjtBQUNBLFNBQVM7QUFDVCx1QkFBdUI7QUFDdkI7QUFDQSxTQUFTO0FBQ1Qsd0JBQXdCO0FBQ3hCO0FBQ0EsU0FBUztBQUNULHdCQUF3QjtBQUN4QjtBQUNBLFNBQVM7QUFDVCxpQ0FBaUM7QUFDakM7QUFDQSxTQUFTO0FBQ1QsMkJBQTJCO0FBQzNCO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxNQUFNOzs7QUFHTjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMkRBQTJEOztBQUUzRDtBQUNBOztBQUVBO0FBQ0EseURBQXlEO0FBQ3pEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhOzs7QUFHYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXOztBQUVYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTs7QUFFQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0EsY0FBYzs7O0FBR2Q7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7OztBQUdBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7O0FBRUE7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0EsZ0hBQWdIOztBQUVoSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsYUFBYSxrQkFBa0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjs7QUFFQTtBQUNBO0FBQ0EsZ0ZBQWdGO0FBQ2hGO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0IsSUFBSTtBQUN4QjtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7OztBQUdsQjtBQUNBO0FBQ0EsY0FBYztBQUNkOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTs7O0FBR0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZCxXQUFXLEdBQUc7QUFDZCxXQUFXLEdBQUc7QUFDZCxXQUFXLGVBQWU7QUFDMUIsV0FBVyxHQUFHO0FBQ2QsV0FBVyxHQUFHO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZDtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSyxHQUFHOztBQUVSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7O0FBRUE7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLHFCQUFxQjtBQUNqRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLE1BQU07OztBQUdOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLDhDQUE4QyxnREFBZ0QsTUFBTSxhQUFhOztBQUVqSDtBQUNBLCtDQUErQyxrQ0FBa0MsT0FBTzs7QUFFeEYsdUdBQXVHLGNBQWMsVUFBVSxnR0FBZ0csa0JBQWtCLFVBQVUsVUFBVTs7QUFFclE7QUFDQTtBQUNBOztBQUVBLGtCQUFrQjs7QUFFbEI7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQiwyREFBMkQsVUFBVTtBQUNyRSx5QkFBeUIsVUFBVTtBQUNuQztBQUNBLGFBQWEsVUFBVTtBQUN2Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxNQUFNOzs7QUFHTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTs7O0FBR047QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFdBQVc7QUFDdEIsV0FBVyxHQUFHO0FBQ2Q7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsb0RBQW9EO0FBQ3BELHNCQUFzQixpQkFBaUI7QUFDdkM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCLFlBQVksU0FBUztBQUNyQjtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGNBQWM7QUFDekIsV0FBVyxHQUFHO0FBQ2Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSw2REFBNkQ7QUFDN0Q7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGNBQWM7QUFDekI7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9CQUFvQixpQkFBaUI7QUFDckM7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLGdCQUFnQjtBQUNoQixjQUFjO0FBQ2QsR0FBRztBQUNIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvY2pzL3JlYWN0LWpzeC1kZXYtcnVudGltZS5kZXZlbG9wbWVudC5qcz9hMzYzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LWpzeC1kZXYtcnVudGltZS5kZXZlbG9wbWVudC5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIChmdW5jdGlvbigpIHtcbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZShcIm5leHQvZGlzdC9jb21waWxlZC9yZWFjdFwiKTtcblxuLy8gQVRURU5USU9OXG4vLyBXaGVuIGFkZGluZyBuZXcgc3ltYm9scyB0byB0aGlzIGZpbGUsXG4vLyBQbGVhc2UgY29uc2lkZXIgYWxzbyBhZGRpbmcgdG8gJ3JlYWN0LWRldnRvb2xzLXNoYXJlZC9zcmMvYmFja2VuZC9SZWFjdFN5bWJvbHMnXG4vLyBUaGUgU3ltYm9sIHVzZWQgdG8gdGFnIHRoZSBSZWFjdEVsZW1lbnQtbGlrZSB0eXBlcy5cbnZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50Jyk7XG52YXIgUkVBQ1RfUE9SVEFMX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5wb3J0YWwnKTtcbnZhciBSRUFDVF9GUkFHTUVOVF9UWVBFID0gU3ltYm9sLmZvcigncmVhY3QuZnJhZ21lbnQnKTtcbnZhciBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFID0gU3ltYm9sLmZvcigncmVhY3Quc3RyaWN0X21vZGUnKTtcbnZhciBSRUFDVF9QUk9GSUxFUl9UWVBFID0gU3ltYm9sLmZvcigncmVhY3QucHJvZmlsZXInKTtcbnZhciBSRUFDVF9QUk9WSURFUl9UWVBFID0gU3ltYm9sLmZvcigncmVhY3QucHJvdmlkZXInKTsgLy8gVE9ETzogRGVsZXRlIHdpdGggZW5hYmxlUmVuZGVyYWJsZUNvbnRleHRcblxudmFyIFJFQUNUX0NPTlNVTUVSX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5jb25zdW1lcicpO1xudmFyIFJFQUNUX0NPTlRFWFRfVFlQRSA9IFN5bWJvbC5mb3IoJ3JlYWN0LmNvbnRleHQnKTtcbnZhciBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFID0gU3ltYm9sLmZvcigncmVhY3QuZm9yd2FyZF9yZWYnKTtcbnZhciBSRUFDVF9TVVNQRU5TRV9UWVBFID0gU3ltYm9sLmZvcigncmVhY3Quc3VzcGVuc2UnKTtcbnZhciBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5zdXNwZW5zZV9saXN0Jyk7XG52YXIgUkVBQ1RfTUVNT19UWVBFID0gU3ltYm9sLmZvcigncmVhY3QubWVtbycpO1xudmFyIFJFQUNUX0xBWllfVFlQRSA9IFN5bWJvbC5mb3IoJ3JlYWN0LmxhenknKTtcbnZhciBSRUFDVF9PRkZTQ1JFRU5fVFlQRSA9IFN5bWJvbC5mb3IoJ3JlYWN0Lm9mZnNjcmVlbicpO1xudmFyIFJFQUNUX0NBQ0hFX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5jYWNoZScpO1xudmFyIE1BWUJFX0lURVJBVE9SX1NZTUJPTCA9IFN5bWJvbC5pdGVyYXRvcjtcbnZhciBGQVVYX0lURVJBVE9SX1NZTUJPTCA9ICdAQGl0ZXJhdG9yJztcbmZ1bmN0aW9uIGdldEl0ZXJhdG9yRm4obWF5YmVJdGVyYWJsZSkge1xuICBpZiAobWF5YmVJdGVyYWJsZSA9PT0gbnVsbCB8fCB0eXBlb2YgbWF5YmVJdGVyYWJsZSAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBtYXliZUl0ZXJhdG9yID0gTUFZQkVfSVRFUkFUT1JfU1lNQk9MICYmIG1heWJlSXRlcmFibGVbTUFZQkVfSVRFUkFUT1JfU1lNQk9MXSB8fCBtYXliZUl0ZXJhYmxlW0ZBVVhfSVRFUkFUT1JfU1lNQk9MXTtcblxuICBpZiAodHlwZW9mIG1heWJlSXRlcmF0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gbWF5YmVJdGVyYXRvcjtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG52YXIgUmVhY3RTaGFyZWRJbnRlcm5hbHMgPSBSZWFjdC5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDtcblxuZnVuY3Rpb24gZXJyb3IoZm9ybWF0KSB7XG4gIHtcbiAgICB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIgPiAxID8gX2xlbjIgLSAxIDogMCksIF9rZXkyID0gMTsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBhcmdzW19rZXkyIC0gMV0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICBwcmludFdhcm5pbmcoJ2Vycm9yJywgZm9ybWF0LCBhcmdzKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJpbnRXYXJuaW5nKGxldmVsLCBmb3JtYXQsIGFyZ3MpIHtcbiAgLy8gV2hlbiBjaGFuZ2luZyB0aGlzIGxvZ2ljLCB5b3UgbWlnaHQgd2FudCB0byBhbHNvXG4gIC8vIHVwZGF0ZSBjb25zb2xlV2l0aFN0YWNrRGV2Lnd3dy5qcyBhcyB3ZWxsLlxuICB7XG4gICAgdmFyIFJlYWN0RGVidWdDdXJyZW50RnJhbWUgPSBSZWFjdFNoYXJlZEludGVybmFscy5SZWFjdERlYnVnQ3VycmVudEZyYW1lO1xuICAgIHZhciBzdGFjayA9IFJlYWN0RGVidWdDdXJyZW50RnJhbWUuZ2V0U3RhY2tBZGRlbmR1bSgpO1xuXG4gICAgaWYgKHN0YWNrICE9PSAnJykge1xuICAgICAgZm9ybWF0ICs9ICclcyc7XG4gICAgICBhcmdzID0gYXJncy5jb25jYXQoW3N0YWNrXSk7XG4gICAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaW50ZXJuYWwvc2FmZS1zdHJpbmctY29lcmNpb25cblxuXG4gICAgdmFyIGFyZ3NXaXRoRm9ybWF0ID0gYXJncy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHJldHVybiBTdHJpbmcoaXRlbSk7XG4gICAgfSk7IC8vIENhcmVmdWw6IFJOIGN1cnJlbnRseSBkZXBlbmRzIG9uIHRoaXMgcHJlZml4XG5cbiAgICBhcmdzV2l0aEZvcm1hdC51bnNoaWZ0KCdXYXJuaW5nOiAnICsgZm9ybWF0KTsgLy8gV2UgaW50ZW50aW9uYWxseSBkb24ndCB1c2Ugc3ByZWFkIChvciAuYXBwbHkpIGRpcmVjdGx5IGJlY2F1c2UgaXRcbiAgICAvLyBicmVha3MgSUU5OiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzEzNjEwXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWludGVybmFsL25vLXByb2R1Y3Rpb24tbG9nZ2luZ1xuXG4gICAgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwoY29uc29sZVtsZXZlbF0sIGNvbnNvbGUsIGFyZ3NXaXRoRm9ybWF0KTtcbiAgfVxufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgZW5hYmxlU2NvcGVBUEkgPSBmYWxzZTsgLy8gRXhwZXJpbWVudGFsIENyZWF0ZSBFdmVudCBIYW5kbGUgQVBJLlxudmFyIGVuYWJsZUNhY2hlRWxlbWVudCA9IGZhbHNlO1xudmFyIGVuYWJsZVRyYW5zaXRpb25UcmFjaW5nID0gZmFsc2U7IC8vIE5vIGtub3duIGJ1Z3MsIGJ1dCBuZWVkcyBwZXJmb3JtYW5jZSB0ZXN0aW5nXG5cbnZhciBlbmFibGVMZWdhY3lIaWRkZW4gPSBmYWxzZTsgLy8gRW5hYmxlcyB1bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjayBmZWF0dXJlIGluIEZpYmVyXG52YXIgZW5hYmxlUmVuZGVyYWJsZUNvbnRleHQgPSBmYWxzZTtcbi8vIHN0dWZmLiBJbnRlbmRlZCB0byBlbmFibGUgUmVhY3QgY29yZSBtZW1iZXJzIHRvIG1vcmUgZWFzaWx5IGRlYnVnIHNjaGVkdWxpbmdcbi8vIGlzc3VlcyBpbiBERVYgYnVpbGRzLlxuXG52YXIgZW5hYmxlRGVidWdUcmFjaW5nID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGdldFdyYXBwZWROYW1lKG91dGVyVHlwZSwgaW5uZXJUeXBlLCB3cmFwcGVyTmFtZSkge1xuICB2YXIgZGlzcGxheU5hbWUgPSBvdXRlclR5cGUuZGlzcGxheU5hbWU7XG5cbiAgaWYgKGRpc3BsYXlOYW1lKSB7XG4gICAgcmV0dXJuIGRpc3BsYXlOYW1lO1xuICB9XG5cbiAgdmFyIGZ1bmN0aW9uTmFtZSA9IGlubmVyVHlwZS5kaXNwbGF5TmFtZSB8fCBpbm5lclR5cGUubmFtZSB8fCAnJztcbiAgcmV0dXJuIGZ1bmN0aW9uTmFtZSAhPT0gJycgPyB3cmFwcGVyTmFtZSArIFwiKFwiICsgZnVuY3Rpb25OYW1lICsgXCIpXCIgOiB3cmFwcGVyTmFtZTtcbn0gLy8gS2VlcCBpbiBzeW5jIHdpdGggcmVhY3QtcmVjb25jaWxlci9nZXRDb21wb25lbnROYW1lRnJvbUZpYmVyXG5cblxuZnVuY3Rpb24gZ2V0Q29udGV4dE5hbWUodHlwZSkge1xuICByZXR1cm4gdHlwZS5kaXNwbGF5TmFtZSB8fCAnQ29udGV4dCc7XG59XG5cbnZhciBSRUFDVF9DTElFTlRfUkVGRVJFTkNFJDIgPSBTeW1ib2wuZm9yKCdyZWFjdC5jbGllbnQucmVmZXJlbmNlJyk7IC8vIE5vdGUgdGhhdCB0aGUgcmVjb25jaWxlciBwYWNrYWdlIHNob3VsZCBnZW5lcmFsbHkgcHJlZmVyIHRvIHVzZSBnZXRDb21wb25lbnROYW1lRnJvbUZpYmVyKCkgaW5zdGVhZC5cblxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKHR5cGUpIHtcbiAgaWYgKHR5cGUgPT0gbnVsbCkge1xuICAgIC8vIEhvc3Qgcm9vdCwgdGV4dCBub2RlIG9yIGp1c3QgaW52YWxpZCB0eXBlLlxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0NMSUVOVF9SRUZFUkVOQ0UkMikge1xuICAgICAgLy8gVE9ETzogQ3JlYXRlIGEgY29udmVudGlvbiBmb3IgbmFtaW5nIGNsaWVudCByZWZlcmVuY2VzIHdpdGggZGVidWcgaW5mby5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiB0eXBlLmRpc3BsYXlOYW1lIHx8IHR5cGUubmFtZSB8fCBudWxsO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB0eXBlO1xuICB9XG5cbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBSRUFDVF9GUkFHTUVOVF9UWVBFOlxuICAgICAgcmV0dXJuICdGcmFnbWVudCc7XG5cbiAgICBjYXNlIFJFQUNUX1BPUlRBTF9UWVBFOlxuICAgICAgcmV0dXJuICdQb3J0YWwnO1xuXG4gICAgY2FzZSBSRUFDVF9QUk9GSUxFUl9UWVBFOlxuICAgICAgcmV0dXJuICdQcm9maWxlcic7XG5cbiAgICBjYXNlIFJFQUNUX1NUUklDVF9NT0RFX1RZUEU6XG4gICAgICByZXR1cm4gJ1N0cmljdE1vZGUnO1xuXG4gICAgY2FzZSBSRUFDVF9TVVNQRU5TRV9UWVBFOlxuICAgICAgcmV0dXJuICdTdXNwZW5zZSc7XG5cbiAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRTpcbiAgICAgIHJldHVybiAnU3VzcGVuc2VMaXN0JztcblxuICAgIGNhc2UgUkVBQ1RfQ0FDSEVfVFlQRTpcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuICdDYWNoZSc7XG4gICAgICB9XG5cbiAgfVxuXG4gIGlmICh0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICB7XG4gICAgICBpZiAodHlwZW9mIHR5cGUudGFnID09PSAnbnVtYmVyJykge1xuICAgICAgICBlcnJvcignUmVjZWl2ZWQgYW4gdW5leHBlY3RlZCBvYmplY3QgaW4gZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKCkuICcgKyAnVGhpcyBpcyBsaWtlbHkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHN3aXRjaCAodHlwZS4kJHR5cGVvZikge1xuICAgICAgY2FzZSBSRUFDVF9QUk9WSURFUl9UWVBFOlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIHByb3ZpZGVyID0gdHlwZTtcbiAgICAgICAgICByZXR1cm4gZ2V0Q29udGV4dE5hbWUocHJvdmlkZXIuX2NvbnRleHQpICsgJy5Qcm92aWRlcic7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBSRUFDVF9DT05URVhUX1RZUEU6XG4gICAgICAgIHZhciBjb250ZXh0ID0gdHlwZTtcblxuICAgICAgICB7XG4gICAgICAgICAgcmV0dXJuIGdldENvbnRleHROYW1lKGNvbnRleHQpICsgJy5Db25zdW1lcic7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBSRUFDVF9DT05TVU1FUl9UWVBFOlxuICAgICAgICB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFOlxuICAgICAgICByZXR1cm4gZ2V0V3JhcHBlZE5hbWUodHlwZSwgdHlwZS5yZW5kZXIsICdGb3J3YXJkUmVmJyk7XG5cbiAgICAgIGNhc2UgUkVBQ1RfTUVNT19UWVBFOlxuICAgICAgICB2YXIgb3V0ZXJOYW1lID0gdHlwZS5kaXNwbGF5TmFtZSB8fCBudWxsO1xuXG4gICAgICAgIGlmIChvdXRlck5hbWUgIT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gb3V0ZXJOYW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGdldENvbXBvbmVudE5hbWVGcm9tVHlwZSh0eXBlLnR5cGUpIHx8ICdNZW1vJztcblxuICAgICAgY2FzZSBSRUFDVF9MQVpZX1RZUEU6XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgbGF6eUNvbXBvbmVudCA9IHR5cGU7XG4gICAgICAgICAgdmFyIHBheWxvYWQgPSBsYXp5Q29tcG9uZW50Ll9wYXlsb2FkO1xuICAgICAgICAgIHZhciBpbml0ID0gbGF6eUNvbXBvbmVudC5faW5pdDtcblxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKGluaXQocGF5bG9hZCkpO1xuICAgICAgICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG4vLyAkRmxvd0ZpeE1lW21ldGhvZC11bmJpbmRpbmddXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgYXNzaWduID0gT2JqZWN0LmFzc2lnbjtcblxuLypcbiAqIFRoZSBgJycgKyB2YWx1ZWAgcGF0dGVybiAodXNlZCBpbiBwZXJmLXNlbnNpdGl2ZSBjb2RlKSB0aHJvd3MgZm9yIFN5bWJvbFxuICogYW5kIFRlbXBvcmFsLiogdHlwZXMuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvcHVsbC8yMjA2NC5cbiAqXG4gKiBUaGUgZnVuY3Rpb25zIGluIHRoaXMgbW9kdWxlIHdpbGwgdGhyb3cgYW4gZWFzaWVyLXRvLXVuZGVyc3RhbmQsXG4gKiBlYXNpZXItdG8tZGVidWcgZXhjZXB0aW9uIHdpdGggYSBjbGVhciBlcnJvcnMgbWVzc2FnZSBtZXNzYWdlIGV4cGxhaW5pbmcgdGhlXG4gKiBwcm9ibGVtLiAoSW5zdGVhZCBvZiBhIGNvbmZ1c2luZyBleGNlcHRpb24gdGhyb3duIGluc2lkZSB0aGUgaW1wbGVtZW50YXRpb25cbiAqIG9mIHRoZSBgdmFsdWVgIG9iamVjdCkuXG4gKi9cbi8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXJldHVybl0gb25seSBjYWxsZWQgaW4gREVWLCBzbyB2b2lkIHJldHVybiBpcyBub3QgcG9zc2libGUuXG5mdW5jdGlvbiB0eXBlTmFtZSh2YWx1ZSkge1xuICB7XG4gICAgLy8gdG9TdHJpbmdUYWcgaXMgbmVlZGVkIGZvciBuYW1lc3BhY2VkIHR5cGVzIGxpa2UgVGVtcG9yYWwuSW5zdGFudFxuICAgIHZhciBoYXNUb1N0cmluZ1RhZyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLnRvU3RyaW5nVGFnO1xuICAgIHZhciB0eXBlID0gaGFzVG9TdHJpbmdUYWcgJiYgdmFsdWVbU3ltYm9sLnRvU3RyaW5nVGFnXSB8fCB2YWx1ZS5jb25zdHJ1Y3Rvci5uYW1lIHx8ICdPYmplY3QnOyAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dXG5cbiAgICByZXR1cm4gdHlwZTtcbiAgfVxufSAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dIG9ubHkgY2FsbGVkIGluIERFViwgc28gdm9pZCByZXR1cm4gaXMgbm90IHBvc3NpYmxlLlxuXG5cbmZ1bmN0aW9uIHdpbGxDb2VyY2lvblRocm93KHZhbHVlKSB7XG4gIHtcbiAgICB0cnkge1xuICAgICAgdGVzdFN0cmluZ0NvZXJjaW9uKHZhbHVlKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdGVzdFN0cmluZ0NvZXJjaW9uKHZhbHVlKSB7XG4gIC8vIElmIHlvdSBlbmRlZCB1cCBoZXJlIGJ5IGZvbGxvd2luZyBhbiBleGNlcHRpb24gY2FsbCBzdGFjaywgaGVyZSdzIHdoYXQnc1xuICAvLyBoYXBwZW5lZDogeW91IHN1cHBsaWVkIGFuIG9iamVjdCBvciBzeW1ib2wgdmFsdWUgdG8gUmVhY3QgKGFzIGEgcHJvcCwga2V5LFxuICAvLyBET00gYXR0cmlidXRlLCBDU1MgcHJvcGVydHksIHN0cmluZyByZWYsIGV0Yy4pIGFuZCB3aGVuIFJlYWN0IHRyaWVkIHRvXG4gIC8vIGNvZXJjZSBpdCB0byBhIHN0cmluZyB1c2luZyBgJycgKyB2YWx1ZWAsIGFuIGV4Y2VwdGlvbiB3YXMgdGhyb3duLlxuICAvL1xuICAvLyBUaGUgbW9zdCBjb21tb24gdHlwZXMgdGhhdCB3aWxsIGNhdXNlIHRoaXMgZXhjZXB0aW9uIGFyZSBgU3ltYm9sYCBpbnN0YW5jZXNcbiAgLy8gYW5kIFRlbXBvcmFsIG9iamVjdHMgbGlrZSBgVGVtcG9yYWwuSW5zdGFudGAuIEJ1dCBhbnkgb2JqZWN0IHRoYXQgaGFzIGFcbiAgLy8gYHZhbHVlT2ZgIG9yIGBbU3ltYm9sLnRvUHJpbWl0aXZlXWAgbWV0aG9kIHRoYXQgdGhyb3dzIHdpbGwgYWxzbyBjYXVzZSB0aGlzXG4gIC8vIGV4Y2VwdGlvbi4gKExpYnJhcnkgYXV0aG9ycyBkbyB0aGlzIHRvIHByZXZlbnQgdXNlcnMgZnJvbSB1c2luZyBidWlsdC1pblxuICAvLyBudW1lcmljIG9wZXJhdG9ycyBsaWtlIGArYCBvciBjb21wYXJpc29uIG9wZXJhdG9ycyBsaWtlIGA+PWAgYmVjYXVzZSBjdXN0b21cbiAgLy8gbWV0aG9kcyBhcmUgbmVlZGVkIHRvIHBlcmZvcm0gYWNjdXJhdGUgYXJpdGhtZXRpYyBvciBjb21wYXJpc29uLilcbiAgLy9cbiAgLy8gVG8gZml4IHRoZSBwcm9ibGVtLCBjb2VyY2UgdGhpcyBvYmplY3Qgb3Igc3ltYm9sIHZhbHVlIHRvIGEgc3RyaW5nIGJlZm9yZVxuICAvLyBwYXNzaW5nIGl0IHRvIFJlYWN0LiBUaGUgbW9zdCByZWxpYWJsZSB3YXkgaXMgdXN1YWxseSBgU3RyaW5nKHZhbHVlKWAuXG4gIC8vXG4gIC8vIFRvIGZpbmQgd2hpY2ggdmFsdWUgaXMgdGhyb3dpbmcsIGNoZWNrIHRoZSBicm93c2VyIG9yIGRlYnVnZ2VyIGNvbnNvbGUuXG4gIC8vIEJlZm9yZSB0aGlzIGV4Y2VwdGlvbiB3YXMgdGhyb3duLCB0aGVyZSBzaG91bGQgYmUgYGNvbnNvbGUuZXJyb3JgIG91dHB1dFxuICAvLyB0aGF0IHNob3dzIHRoZSB0eXBlIChTeW1ib2wsIFRlbXBvcmFsLlBsYWluRGF0ZSwgZXRjLikgdGhhdCBjYXVzZWQgdGhlXG4gIC8vIHByb2JsZW0gYW5kIGhvdyB0aGF0IHR5cGUgd2FzIHVzZWQ6IGtleSwgYXRycmlidXRlLCBpbnB1dCB2YWx1ZSBwcm9wLCBldGMuXG4gIC8vIEluIG1vc3QgY2FzZXMsIHRoaXMgY29uc29sZSBvdXRwdXQgYWxzbyBzaG93cyB0aGUgY29tcG9uZW50IGFuZCBpdHNcbiAgLy8gYW5jZXN0b3IgY29tcG9uZW50cyB3aGVyZSB0aGUgZXhjZXB0aW9uIGhhcHBlbmVkLlxuICAvL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaW50ZXJuYWwvc2FmZS1zdHJpbmctY29lcmNpb25cbiAgcmV0dXJuICcnICsgdmFsdWU7XG59XG5mdW5jdGlvbiBjaGVja0tleVN0cmluZ0NvZXJjaW9uKHZhbHVlKSB7XG4gIHtcbiAgICBpZiAod2lsbENvZXJjaW9uVGhyb3codmFsdWUpKSB7XG4gICAgICBlcnJvcignVGhlIHByb3ZpZGVkIGtleSBpcyBhbiB1bnN1cHBvcnRlZCB0eXBlICVzLicgKyAnIFRoaXMgdmFsdWUgbXVzdCBiZSBjb2VyY2VkIHRvIGEgc3RyaW5nIGJlZm9yZSB1c2luZyBpdCBoZXJlLicsIHR5cGVOYW1lKHZhbHVlKSk7XG5cbiAgICAgIHJldHVybiB0ZXN0U3RyaW5nQ29lcmNpb24odmFsdWUpOyAvLyB0aHJvdyAodG8gaGVscCBjYWxsZXJzIGZpbmQgdHJvdWJsZXNob290aW5nIGNvbW1lbnRzKVxuICAgIH1cbiAgfVxufVxuXG52YXIgUkVBQ1RfQ0xJRU5UX1JFRkVSRU5DRSQxID0gU3ltYm9sLmZvcigncmVhY3QuY2xpZW50LnJlZmVyZW5jZScpO1xuZnVuY3Rpb24gaXNWYWxpZEVsZW1lbnRUeXBlKHR5cGUpIHtcbiAgaWYgKHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9IC8vIE5vdGU6IHR5cGVvZiBtaWdodCBiZSBvdGhlciB0aGFuICdzeW1ib2wnIG9yICdudW1iZXInIChlLmcuIGlmIGl0J3MgYSBwb2x5ZmlsbCkuXG5cblxuICBpZiAodHlwZSA9PT0gUkVBQ1RfRlJBR01FTlRfVFlQRSB8fCB0eXBlID09PSBSRUFDVF9QUk9GSUxFUl9UWVBFIHx8IGVuYWJsZURlYnVnVHJhY2luZyAgfHwgdHlwZSA9PT0gUkVBQ1RfU1RSSUNUX01PREVfVFlQRSB8fCB0eXBlID09PSBSRUFDVF9TVVNQRU5TRV9UWVBFIHx8IHR5cGUgPT09IFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRSB8fCBlbmFibGVMZWdhY3lIaWRkZW4gIHx8IHR5cGUgPT09IFJFQUNUX09GRlNDUkVFTl9UWVBFIHx8IGVuYWJsZVNjb3BlQVBJICB8fCBlbmFibGVDYWNoZUVsZW1lbnQgIHx8IGVuYWJsZVRyYW5zaXRpb25UcmFjaW5nICkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB0eXBlID09PSAnb2JqZWN0JyAmJiB0eXBlICE9PSBudWxsKSB7XG4gICAgaWYgKHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0xBWllfVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9NRU1PX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfQ09OVEVYVF9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX1BST1ZJREVSX1RZUEUgfHwgZW5hYmxlUmVuZGVyYWJsZUNvbnRleHQgIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0ZPUldBUkRfUkVGX1RZUEUgfHwgLy8gVGhpcyBuZWVkcyB0byBpbmNsdWRlIGFsbCBwb3NzaWJsZSBtb2R1bGUgcmVmZXJlbmNlIG9iamVjdFxuICAgIC8vIHR5cGVzIHN1cHBvcnRlZCBieSBhbnkgRmxpZ2h0IGNvbmZpZ3VyYXRpb24gYW55d2hlcmUgc2luY2VcbiAgICAvLyB3ZSBkb24ndCBrbm93IHdoaWNoIEZsaWdodCBidWlsZCB0aGlzIHdpbGwgZW5kIHVwIGJlaW5nIHVzZWRcbiAgICAvLyB3aXRoLlxuICAgIHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0NMSUVOVF9SRUZFUkVOQ0UkMSB8fCB0eXBlLmdldE1vZHVsZUlkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxudmFyIGlzQXJyYXlJbXBsID0gQXJyYXkuaXNBcnJheTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlZGVjbGFyZVxuXG5mdW5jdGlvbiBpc0FycmF5KGEpIHtcbiAgcmV0dXJuIGlzQXJyYXlJbXBsKGEpO1xufVxuXG4vLyBIZWxwZXJzIHRvIHBhdGNoIGNvbnNvbGUubG9ncyB0byBhdm9pZCBsb2dnaW5nIGR1cmluZyBzaWRlLWVmZmVjdCBmcmVlXG4vLyByZXBsYXlpbmcgb24gcmVuZGVyIGZ1bmN0aW9uLiBUaGlzIGN1cnJlbnRseSBvbmx5IHBhdGNoZXMgdGhlIG9iamVjdFxuLy8gbGF6aWx5IHdoaWNoIHdvbid0IGNvdmVyIGlmIHRoZSBsb2cgZnVuY3Rpb24gd2FzIGV4dHJhY3RlZCBlYWdlcmx5LlxuLy8gV2UgY291bGQgYWxzbyBlYWdlcmx5IHBhdGNoIHRoZSBtZXRob2QuXG52YXIgZGlzYWJsZWREZXB0aCA9IDA7XG52YXIgcHJldkxvZztcbnZhciBwcmV2SW5mbztcbnZhciBwcmV2V2FybjtcbnZhciBwcmV2RXJyb3I7XG52YXIgcHJldkdyb3VwO1xudmFyIHByZXZHcm91cENvbGxhcHNlZDtcbnZhciBwcmV2R3JvdXBFbmQ7XG5cbmZ1bmN0aW9uIGRpc2FibGVkTG9nKCkge31cblxuZGlzYWJsZWRMb2cuX19yZWFjdERpc2FibGVkTG9nID0gdHJ1ZTtcbmZ1bmN0aW9uIGRpc2FibGVMb2dzKCkge1xuICB7XG4gICAgaWYgKGRpc2FibGVkRGVwdGggPT09IDApIHtcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlIHJlYWN0LWludGVybmFsL25vLXByb2R1Y3Rpb24tbG9nZ2luZyAqL1xuICAgICAgcHJldkxvZyA9IGNvbnNvbGUubG9nO1xuICAgICAgcHJldkluZm8gPSBjb25zb2xlLmluZm87XG4gICAgICBwcmV2V2FybiA9IGNvbnNvbGUud2FybjtcbiAgICAgIHByZXZFcnJvciA9IGNvbnNvbGUuZXJyb3I7XG4gICAgICBwcmV2R3JvdXAgPSBjb25zb2xlLmdyb3VwO1xuICAgICAgcHJldkdyb3VwQ29sbGFwc2VkID0gY29uc29sZS5ncm91cENvbGxhcHNlZDtcbiAgICAgIHByZXZHcm91cEVuZCA9IGNvbnNvbGUuZ3JvdXBFbmQ7IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTkwOTlcblxuICAgICAgdmFyIHByb3BzID0ge1xuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiBkaXNhYmxlZExvZyxcbiAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgIH07IC8vICRGbG93Rml4TWVbY2Fubm90LXdyaXRlXSBGbG93IHRoaW5rcyBjb25zb2xlIGlzIGltbXV0YWJsZS5cblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoY29uc29sZSwge1xuICAgICAgICBpbmZvOiBwcm9wcyxcbiAgICAgICAgbG9nOiBwcm9wcyxcbiAgICAgICAgd2FybjogcHJvcHMsXG4gICAgICAgIGVycm9yOiBwcm9wcyxcbiAgICAgICAgZ3JvdXA6IHByb3BzLFxuICAgICAgICBncm91cENvbGxhcHNlZDogcHJvcHMsXG4gICAgICAgIGdyb3VwRW5kOiBwcm9wc1xuICAgICAgfSk7XG4gICAgICAvKiBlc2xpbnQtZW5hYmxlIHJlYWN0LWludGVybmFsL25vLXByb2R1Y3Rpb24tbG9nZ2luZyAqL1xuICAgIH1cblxuICAgIGRpc2FibGVkRGVwdGgrKztcbiAgfVxufVxuZnVuY3Rpb24gcmVlbmFibGVMb2dzKCkge1xuICB7XG4gICAgZGlzYWJsZWREZXB0aC0tO1xuXG4gICAgaWYgKGRpc2FibGVkRGVwdGggPT09IDApIHtcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlIHJlYWN0LWludGVybmFsL25vLXByb2R1Y3Rpb24tbG9nZ2luZyAqL1xuICAgICAgdmFyIHByb3BzID0ge1xuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICB9OyAvLyAkRmxvd0ZpeE1lW2Nhbm5vdC13cml0ZV0gRmxvdyB0aGlua3MgY29uc29sZSBpcyBpbW11dGFibGUuXG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGNvbnNvbGUsIHtcbiAgICAgICAgbG9nOiBhc3NpZ24oe30sIHByb3BzLCB7XG4gICAgICAgICAgdmFsdWU6IHByZXZMb2dcbiAgICAgICAgfSksXG4gICAgICAgIGluZm86IGFzc2lnbih7fSwgcHJvcHMsIHtcbiAgICAgICAgICB2YWx1ZTogcHJldkluZm9cbiAgICAgICAgfSksXG4gICAgICAgIHdhcm46IGFzc2lnbih7fSwgcHJvcHMsIHtcbiAgICAgICAgICB2YWx1ZTogcHJldldhcm5cbiAgICAgICAgfSksXG4gICAgICAgIGVycm9yOiBhc3NpZ24oe30sIHByb3BzLCB7XG4gICAgICAgICAgdmFsdWU6IHByZXZFcnJvclxuICAgICAgICB9KSxcbiAgICAgICAgZ3JvdXA6IGFzc2lnbih7fSwgcHJvcHMsIHtcbiAgICAgICAgICB2YWx1ZTogcHJldkdyb3VwXG4gICAgICAgIH0pLFxuICAgICAgICBncm91cENvbGxhcHNlZDogYXNzaWduKHt9LCBwcm9wcywge1xuICAgICAgICAgIHZhbHVlOiBwcmV2R3JvdXBDb2xsYXBzZWRcbiAgICAgICAgfSksXG4gICAgICAgIGdyb3VwRW5kOiBhc3NpZ24oe30sIHByb3BzLCB7XG4gICAgICAgICAgdmFsdWU6IHByZXZHcm91cEVuZFxuICAgICAgICB9KVxuICAgICAgfSk7XG4gICAgICAvKiBlc2xpbnQtZW5hYmxlIHJlYWN0LWludGVybmFsL25vLXByb2R1Y3Rpb24tbG9nZ2luZyAqL1xuICAgIH1cblxuICAgIGlmIChkaXNhYmxlZERlcHRoIDwgMCkge1xuICAgICAgZXJyb3IoJ2Rpc2FibGVkRGVwdGggZmVsbCBiZWxvdyB6ZXJvLiAnICsgJ1RoaXMgaXMgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgUmVhY3RDdXJyZW50RGlzcGF0Y2hlciA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlJlYWN0Q3VycmVudERpc3BhdGNoZXI7XG52YXIgcHJlZml4O1xuZnVuY3Rpb24gZGVzY3JpYmVCdWlsdEluQ29tcG9uZW50RnJhbWUobmFtZSwgb3duZXJGbikge1xuICB7XG4gICAgaWYgKHByZWZpeCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBFeHRyYWN0IHRoZSBWTSBzcGVjaWZpYyBwcmVmaXggdXNlZCBieSBlYWNoIGxpbmUuXG4gICAgICB0cnkge1xuICAgICAgICB0aHJvdyBFcnJvcigpO1xuICAgICAgfSBjYXRjaCAoeCkge1xuICAgICAgICB2YXIgbWF0Y2ggPSB4LnN0YWNrLnRyaW0oKS5tYXRjaCgvXFxuKCAqKGF0ICk/KS8pO1xuICAgICAgICBwcmVmaXggPSBtYXRjaCAmJiBtYXRjaFsxXSB8fCAnJztcbiAgICAgIH1cbiAgICB9IC8vIFdlIHVzZSB0aGUgcHJlZml4IHRvIGVuc3VyZSBvdXIgc3RhY2tzIGxpbmUgdXAgd2l0aCBuYXRpdmUgc3RhY2sgZnJhbWVzLlxuXG5cbiAgICByZXR1cm4gJ1xcbicgKyBwcmVmaXggKyBuYW1lO1xuICB9XG59XG52YXIgcmVlbnRyeSA9IGZhbHNlO1xudmFyIGNvbXBvbmVudEZyYW1lQ2FjaGU7XG5cbntcbiAgdmFyIFBvc3NpYmx5V2Vha01hcCA9IHR5cGVvZiBXZWFrTWFwID09PSAnZnVuY3Rpb24nID8gV2Vha01hcCA6IE1hcDtcbiAgY29tcG9uZW50RnJhbWVDYWNoZSA9IG5ldyBQb3NzaWJseVdlYWtNYXAoKTtcbn1cbi8qKlxuICogTGV2ZXJhZ2VzIG5hdGl2ZSBicm93c2VyL1ZNIHN0YWNrIGZyYW1lcyB0byBnZXQgcHJvcGVyIGRldGFpbHMgKGUuZy5cbiAqIGZpbGVuYW1lLCBsaW5lICsgY29sIG51bWJlcikgZm9yIGEgc2luZ2xlIGNvbXBvbmVudCBpbiBhIGNvbXBvbmVudCBzdGFjay4gV2VcbiAqIGRvIHRoaXMgYnk6XG4gKiAgICgxKSB0aHJvd2luZyBhbmQgY2F0Y2hpbmcgYW4gZXJyb3IgaW4gdGhlIGZ1bmN0aW9uIC0gdGhpcyB3aWxsIGJlIG91clxuICogICAgICAgY29udHJvbCBlcnJvci5cbiAqICAgKDIpIGNhbGxpbmcgdGhlIGNvbXBvbmVudCB3aGljaCB3aWxsIGV2ZW50dWFsbHkgdGhyb3cgYW4gZXJyb3IgdGhhdCB3ZSdsbFxuICogICAgICAgY2F0Y2ggLSB0aGlzIHdpbGwgYmUgb3VyIHNhbXBsZSBlcnJvci5cbiAqICAgKDMpIGRpZmZpbmcgdGhlIGNvbnRyb2wgYW5kIHNhbXBsZSBlcnJvciBzdGFja3MgdG8gZmluZCB0aGUgc3RhY2sgZnJhbWVcbiAqICAgICAgIHdoaWNoIHJlcHJlc2VudHMgb3VyIGNvbXBvbmVudC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGRlc2NyaWJlTmF0aXZlQ29tcG9uZW50RnJhbWUoZm4sIGNvbnN0cnVjdCkge1xuICAvLyBJZiBzb21ldGhpbmcgYXNrZWQgZm9yIGEgc3RhY2sgaW5zaWRlIGEgZmFrZSByZW5kZXIsIGl0IHNob3VsZCBnZXQgaWdub3JlZC5cbiAgaWYgKCFmbiB8fCByZWVudHJ5KSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAge1xuICAgIHZhciBmcmFtZSA9IGNvbXBvbmVudEZyYW1lQ2FjaGUuZ2V0KGZuKTtcblxuICAgIGlmIChmcmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZnJhbWU7XG4gICAgfVxuICB9XG5cbiAgcmVlbnRyeSA9IHRydWU7XG4gIHZhciBwcmV2aW91c1ByZXBhcmVTdGFja1RyYWNlID0gRXJyb3IucHJlcGFyZVN0YWNrVHJhY2U7IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXR5cGVdIEl0IGRvZXMgYWNjZXB0IHVuZGVmaW5lZC5cblxuICBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZSA9IHVuZGVmaW5lZDtcbiAgdmFyIHByZXZpb3VzRGlzcGF0Y2hlcjtcblxuICB7XG4gICAgcHJldmlvdXNEaXNwYXRjaGVyID0gUmVhY3RDdXJyZW50RGlzcGF0Y2hlci5jdXJyZW50OyAvLyBTZXQgdGhlIGRpc3BhdGNoZXIgaW4gREVWIGJlY2F1c2UgdGhpcyBtaWdodCBiZSBjYWxsIGluIHRoZSByZW5kZXIgZnVuY3Rpb25cbiAgICAvLyBmb3Igd2FybmluZ3MuXG5cbiAgICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyLmN1cnJlbnQgPSBudWxsO1xuICAgIGRpc2FibGVMb2dzKCk7XG4gIH1cbiAgLyoqXG4gICAqIEZpbmRpbmcgYSBjb21tb24gc3RhY2sgZnJhbWUgYmV0d2VlbiBzYW1wbGUgYW5kIGNvbnRyb2wgZXJyb3JzIGNhbiBiZVxuICAgKiB0cmlja3kgZ2l2ZW4gdGhlIGRpZmZlcmVudCB0eXBlcyBhbmQgbGV2ZWxzIG9mIHN0YWNrIHRyYWNlIHRydW5jYXRpb24gZnJvbVxuICAgKiBkaWZmZXJlbnQgSlMgVk1zLiBTbyBpbnN0ZWFkIHdlJ2xsIGF0dGVtcHQgdG8gY29udHJvbCB3aGF0IHRoYXQgY29tbW9uXG4gICAqIGZyYW1lIHNob3VsZCBiZSB0aHJvdWdoIHRoaXMgb2JqZWN0IG1ldGhvZDpcbiAgICogSGF2aW5nIGJvdGggdGhlIHNhbXBsZSBhbmQgY29udHJvbCBlcnJvcnMgYmUgaW4gdGhlIGZ1bmN0aW9uIHVuZGVyIHRoZVxuICAgKiBgRGVzY3JpYmVOYXRpdmVDb21wb25lbnRGcmFtZVJvb3RgIHByb3BlcnR5LCArIHNldHRpbmcgdGhlIGBuYW1lYCBhbmRcbiAgICogYGRpc3BsYXlOYW1lYCBwcm9wZXJ0aWVzIG9mIHRoZSBmdW5jdGlvbiBlbnN1cmVzIHRoYXQgYSBzdGFja1xuICAgKiBmcmFtZSBleGlzdHMgdGhhdCBoYXMgdGhlIG1ldGhvZCBuYW1lIGBEZXNjcmliZU5hdGl2ZUNvbXBvbmVudEZyYW1lUm9vdGAgaW5cbiAgICogaXQgZm9yIGJvdGggY29udHJvbCBhbmQgc2FtcGxlIHN0YWNrcy5cbiAgICovXG5cblxuICB2YXIgUnVuSW5Sb290RnJhbWUgPSB7XG4gICAgRGV0ZXJtaW5lQ29tcG9uZW50RnJhbWVSb290OiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY29udHJvbDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyBzaG91bGQgdGhyb3cuXG4gICAgICAgIGlmIChjb25zdHJ1Y3QpIHtcbiAgICAgICAgICAvLyBTb21ldGhpbmcgc2hvdWxkIGJlIHNldHRpbmcgdGhlIHByb3BzIGluIHRoZSBjb25zdHJ1Y3Rvci5cbiAgICAgICAgICB2YXIgRmFrZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCk7XG4gICAgICAgICAgfTsgLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG5cblxuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGYWtlLnByb3RvdHlwZSwgJ3Byb3BzJywge1xuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIC8vIFdlIHVzZSBhIHRocm93aW5nIHNldHRlciBpbnN0ZWFkIG9mIGZyb3plbiBvciBub24td3JpdGFibGUgcHJvcHNcbiAgICAgICAgICAgICAgLy8gYmVjYXVzZSB0aGF0IHdvbid0IHRocm93IGluIGEgbm9uLXN0cmljdCBtb2RlIGZ1bmN0aW9uLlxuICAgICAgICAgICAgICB0aHJvdyBFcnJvcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSAnb2JqZWN0JyAmJiBSZWZsZWN0LmNvbnN0cnVjdCkge1xuICAgICAgICAgICAgLy8gV2UgY29uc3RydWN0IGEgZGlmZmVyZW50IGNvbnRyb2wgZm9yIHRoaXMgY2FzZSB0byBpbmNsdWRlIGFueSBleHRyYVxuICAgICAgICAgICAgLy8gZnJhbWVzIGFkZGVkIGJ5IHRoZSBjb25zdHJ1Y3QgY2FsbC5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIFJlZmxlY3QuY29uc3RydWN0KEZha2UsIFtdKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgICAgICAgICAgY29udHJvbCA9IHg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIFJlZmxlY3QuY29uc3RydWN0KGZuLCBbXSwgRmFrZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIEZha2UuY2FsbCgpO1xuICAgICAgICAgICAgfSBjYXRjaCAoeCkge1xuICAgICAgICAgICAgICBjb250cm9sID0geDtcbiAgICAgICAgICAgIH0gLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddIGZvdW5kIHdoZW4gdXBncmFkaW5nIEZsb3dcblxuXG4gICAgICAgICAgICBmbi5jYWxsKEZha2UucHJvdG90eXBlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCk7XG4gICAgICAgICAgfSBjYXRjaCAoeCkge1xuICAgICAgICAgICAgY29udHJvbCA9IHg7XG4gICAgICAgICAgfSAvLyBUT0RPKGx1bmEpOiBUaGlzIHdpbGwgY3VycmVudGx5IG9ubHkgdGhyb3cgaWYgdGhlIGZ1bmN0aW9uIGNvbXBvbmVudFxuICAgICAgICAgIC8vIHRyaWVzIHRvIGFjY2VzcyBSZWFjdC9SZWFjdERPTS9wcm9wcy4gV2Ugc2hvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyB0aHJvd1xuICAgICAgICAgIC8vIGluIHNpbXBsZSBjb21wb25lbnRzIHRvb1xuXG5cbiAgICAgICAgICB2YXIgbWF5YmVQcm9taXNlID0gZm4oKTsgLy8gSWYgdGhlIGZ1bmN0aW9uIGNvbXBvbmVudCByZXR1cm5zIGEgcHJvbWlzZSwgaXQncyBsaWtlbHkgYW4gYXN5bmNcbiAgICAgICAgICAvLyBjb21wb25lbnQsIHdoaWNoIHdlIGRvbid0IHlldCBzdXBwb3J0LiBBdHRhY2ggYSBub29wIGNhdGNoIGhhbmRsZXIgdG9cbiAgICAgICAgICAvLyBzaWxlbmNlIHRoZSBlcnJvci5cbiAgICAgICAgICAvLyBUT0RPOiBJbXBsZW1lbnQgY29tcG9uZW50IHN0YWNrcyBmb3IgYXN5bmMgY2xpZW50IGNvbXBvbmVudHM/XG5cbiAgICAgICAgICBpZiAobWF5YmVQcm9taXNlICYmIHR5cGVvZiBtYXliZVByb21pc2UuY2F0Y2ggPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIG1heWJlUHJvbWlzZS5jYXRjaChmdW5jdGlvbiAoKSB7fSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChzYW1wbGUpIHtcbiAgICAgICAgLy8gVGhpcyBpcyBpbmxpbmVkIG1hbnVhbGx5IGJlY2F1c2UgY2xvc3VyZSBkb2Vzbid0IGRvIGl0IGZvciB1cy5cbiAgICAgICAgaWYgKHNhbXBsZSAmJiBjb250cm9sICYmIHR5cGVvZiBzYW1wbGUuc3RhY2sgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgcmV0dXJuIFtzYW1wbGUuc3RhY2ssIGNvbnRyb2wuc3RhY2tdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBbbnVsbCwgbnVsbF07XG4gICAgfVxuICB9OyAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cblxuICBSdW5JblJvb3RGcmFtZS5EZXRlcm1pbmVDb21wb25lbnRGcmFtZVJvb3QuZGlzcGxheU5hbWUgPSAnRGV0ZXJtaW5lQ29tcG9uZW50RnJhbWVSb290JztcbiAgdmFyIG5hbWVQcm9wRGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoUnVuSW5Sb290RnJhbWUuRGV0ZXJtaW5lQ29tcG9uZW50RnJhbWVSb290LCAnbmFtZScpOyAvLyBCZWZvcmUgRVM2LCB0aGUgYG5hbWVgIHByb3BlcnR5IHdhcyBub3QgY29uZmlndXJhYmxlLlxuXG4gIGlmIChuYW1lUHJvcERlc2NyaXB0b3IgJiYgbmFtZVByb3BEZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSkge1xuICAgIC8vIFY4IHV0aWxpemVzIGEgZnVuY3Rpb24ncyBgbmFtZWAgcHJvcGVydHkgd2hlbiBnZW5lcmF0aW5nIGEgc3RhY2sgdHJhY2UuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJ1bkluUm9vdEZyYW1lLkRldGVybWluZUNvbXBvbmVudEZyYW1lUm9vdCwgLy8gQ29uZmlndXJhYmxlIHByb3BlcnRpZXMgY2FuIGJlIHVwZGF0ZWQgZXZlbiBpZiBpdHMgd3JpdGFibGUgZGVzY3JpcHRvclxuICAgIC8vIGlzIHNldCB0byBgZmFsc2VgLlxuICAgIC8vICRGbG93Rml4TWVbY2Fubm90LXdyaXRlXVxuICAgICduYW1lJywge1xuICAgICAgdmFsdWU6ICdEZXRlcm1pbmVDb21wb25lbnRGcmFtZVJvb3QnXG4gICAgfSk7XG4gIH1cblxuICB0cnkge1xuICAgIHZhciBfUnVuSW5Sb290RnJhbWUkRGV0ZXIgPSBSdW5JblJvb3RGcmFtZS5EZXRlcm1pbmVDb21wb25lbnRGcmFtZVJvb3QoKSxcbiAgICAgICAgc2FtcGxlU3RhY2sgPSBfUnVuSW5Sb290RnJhbWUkRGV0ZXJbMF0sXG4gICAgICAgIGNvbnRyb2xTdGFjayA9IF9SdW5JblJvb3RGcmFtZSREZXRlclsxXTtcblxuICAgIGlmIChzYW1wbGVTdGFjayAmJiBjb250cm9sU3RhY2spIHtcbiAgICAgIC8vIFRoaXMgZXh0cmFjdHMgdGhlIGZpcnN0IGZyYW1lIGZyb20gdGhlIHNhbXBsZSB0aGF0IGlzbid0IGFsc28gaW4gdGhlIGNvbnRyb2wuXG4gICAgICAvLyBTa2lwcGluZyBvbmUgZnJhbWUgdGhhdCB3ZSBhc3N1bWUgaXMgdGhlIGZyYW1lIHRoYXQgY2FsbHMgdGhlIHR3by5cbiAgICAgIHZhciBzYW1wbGVMaW5lcyA9IHNhbXBsZVN0YWNrLnNwbGl0KCdcXG4nKTtcbiAgICAgIHZhciBjb250cm9sTGluZXMgPSBjb250cm9sU3RhY2suc3BsaXQoJ1xcbicpO1xuICAgICAgdmFyIHMgPSAwO1xuICAgICAgdmFyIGMgPSAwO1xuXG4gICAgICB3aGlsZSAocyA8IHNhbXBsZUxpbmVzLmxlbmd0aCAmJiAhc2FtcGxlTGluZXNbc10uaW5jbHVkZXMoJ0RldGVybWluZUNvbXBvbmVudEZyYW1lUm9vdCcpKSB7XG4gICAgICAgIHMrKztcbiAgICAgIH1cblxuICAgICAgd2hpbGUgKGMgPCBjb250cm9sTGluZXMubGVuZ3RoICYmICFjb250cm9sTGluZXNbY10uaW5jbHVkZXMoJ0RldGVybWluZUNvbXBvbmVudEZyYW1lUm9vdCcpKSB7XG4gICAgICAgIGMrKztcbiAgICAgIH0gLy8gV2UgY291bGRuJ3QgZmluZCBvdXIgaW50ZW50aW9uYWxseSBpbmplY3RlZCBjb21tb24gcm9vdCBmcmFtZSwgYXR0ZW1wdFxuICAgICAgLy8gdG8gZmluZCBhbm90aGVyIGNvbW1vbiByb290IGZyYW1lIGJ5IHNlYXJjaCBmcm9tIHRoZSBib3R0b20gb2YgdGhlXG4gICAgICAvLyBjb250cm9sIHN0YWNrLi4uXG5cblxuICAgICAgaWYgKHMgPT09IHNhbXBsZUxpbmVzLmxlbmd0aCB8fCBjID09PSBjb250cm9sTGluZXMubGVuZ3RoKSB7XG4gICAgICAgIHMgPSBzYW1wbGVMaW5lcy5sZW5ndGggLSAxO1xuICAgICAgICBjID0gY29udHJvbExpbmVzLmxlbmd0aCAtIDE7XG5cbiAgICAgICAgd2hpbGUgKHMgPj0gMSAmJiBjID49IDAgJiYgc2FtcGxlTGluZXNbc10gIT09IGNvbnRyb2xMaW5lc1tjXSkge1xuICAgICAgICAgIC8vIFdlIGV4cGVjdCBhdCBsZWFzdCBvbmUgc3RhY2sgZnJhbWUgdG8gYmUgc2hhcmVkLlxuICAgICAgICAgIC8vIFR5cGljYWxseSB0aGlzIHdpbGwgYmUgdGhlIHJvb3QgbW9zdCBvbmUuIEhvd2V2ZXIsIHN0YWNrIGZyYW1lcyBtYXkgYmVcbiAgICAgICAgICAvLyBjdXQgb2ZmIGR1ZSB0byBtYXhpbXVtIHN0YWNrIGxpbWl0cy4gSW4gdGhpcyBjYXNlLCBvbmUgbWF5YmUgY3V0IG9mZlxuICAgICAgICAgIC8vIGVhcmxpZXIgdGhhbiB0aGUgb3RoZXIuIFdlIGFzc3VtZSB0aGF0IHRoZSBzYW1wbGUgaXMgbG9uZ2VyIG9yIHRoZSBzYW1lXG4gICAgICAgICAgLy8gYW5kIHRoZXJlIGZvciBjdXQgb2ZmIGVhcmxpZXIuIFNvIHdlIHNob3VsZCBmaW5kIHRoZSByb290IG1vc3QgZnJhbWUgaW5cbiAgICAgICAgICAvLyB0aGUgc2FtcGxlIHNvbWV3aGVyZSBpbiB0aGUgY29udHJvbC5cbiAgICAgICAgICBjLS07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yICg7IHMgPj0gMSAmJiBjID49IDA7IHMtLSwgYy0tKSB7XG4gICAgICAgIC8vIE5leHQgd2UgZmluZCB0aGUgZmlyc3Qgb25lIHRoYXQgaXNuJ3QgdGhlIHNhbWUgd2hpY2ggc2hvdWxkIGJlIHRoZVxuICAgICAgICAvLyBmcmFtZSB0aGF0IGNhbGxlZCBvdXIgc2FtcGxlIGZ1bmN0aW9uIGFuZCB0aGUgY29udHJvbC5cbiAgICAgICAgaWYgKHNhbXBsZUxpbmVzW3NdICE9PSBjb250cm9sTGluZXNbY10pIHtcbiAgICAgICAgICAvLyBJbiBWOCwgdGhlIGZpcnN0IGxpbmUgaXMgZGVzY3JpYmluZyB0aGUgbWVzc2FnZSBidXQgb3RoZXIgVk1zIGRvbid0LlxuICAgICAgICAgIC8vIElmIHdlJ3JlIGFib3V0IHRvIHJldHVybiB0aGUgZmlyc3QgbGluZSwgYW5kIHRoZSBjb250cm9sIGlzIGFsc28gb24gdGhlIHNhbWVcbiAgICAgICAgICAvLyBsaW5lLCB0aGF0J3MgYSBwcmV0dHkgZ29vZCBpbmRpY2F0b3IgdGhhdCBvdXIgc2FtcGxlIHRocmV3IGF0IHNhbWUgbGluZSBhc1xuICAgICAgICAgIC8vIHRoZSBjb250cm9sLiBJLmUuIGJlZm9yZSB3ZSBlbnRlcmVkIHRoZSBzYW1wbGUgZnJhbWUuIFNvIHdlIGlnbm9yZSB0aGlzIHJlc3VsdC5cbiAgICAgICAgICAvLyBUaGlzIGNhbiBoYXBwZW4gaWYgeW91IHBhc3NlZCBhIGNsYXNzIHRvIGZ1bmN0aW9uIGNvbXBvbmVudCwgb3Igbm9uLWZ1bmN0aW9uLlxuICAgICAgICAgIGlmIChzICE9PSAxIHx8IGMgIT09IDEpIHtcbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgcy0tO1xuICAgICAgICAgICAgICBjLS07IC8vIFdlIG1heSBzdGlsbCBoYXZlIHNpbWlsYXIgaW50ZXJtZWRpYXRlIGZyYW1lcyBmcm9tIHRoZSBjb25zdHJ1Y3QgY2FsbC5cbiAgICAgICAgICAgICAgLy8gVGhlIG5leHQgb25lIHRoYXQgaXNuJ3QgdGhlIHNhbWUgc2hvdWxkIGJlIG91ciBtYXRjaCB0aG91Z2guXG5cbiAgICAgICAgICAgICAgaWYgKGMgPCAwIHx8IHNhbXBsZUxpbmVzW3NdICE9PSBjb250cm9sTGluZXNbY10pIHtcbiAgICAgICAgICAgICAgICAvLyBWOCBhZGRzIGEgXCJuZXdcIiBwcmVmaXggZm9yIG5hdGl2ZSBjbGFzc2VzLiBMZXQncyByZW1vdmUgaXQgdG8gbWFrZSBpdCBwcmV0dGllci5cbiAgICAgICAgICAgICAgICB2YXIgX2ZyYW1lID0gJ1xcbicgKyBzYW1wbGVMaW5lc1tzXS5yZXBsYWNlKCcgYXQgbmV3ICcsICcgYXQgJyk7IC8vIElmIG91ciBjb21wb25lbnQgZnJhbWUgaXMgbGFiZWxlZCBcIjxhbm9ueW1vdXM+XCJcbiAgICAgICAgICAgICAgICAvLyBidXQgd2UgaGF2ZSBhIHVzZXItcHJvdmlkZWQgXCJkaXNwbGF5TmFtZVwiXG4gICAgICAgICAgICAgICAgLy8gc3BsaWNlIGl0IGluIHRvIG1ha2UgdGhlIHN0YWNrIG1vcmUgcmVhZGFibGUuXG5cblxuICAgICAgICAgICAgICAgIGlmIChmbi5kaXNwbGF5TmFtZSAmJiBfZnJhbWUuaW5jbHVkZXMoJzxhbm9ueW1vdXM+JykpIHtcbiAgICAgICAgICAgICAgICAgIF9mcmFtZSA9IF9mcmFtZS5yZXBsYWNlKCc8YW5vbnltb3VzPicsIGZuLmRpc3BsYXlOYW1lKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRGcmFtZUNhY2hlLnNldChmbiwgX2ZyYW1lKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IC8vIFJldHVybiB0aGUgbGluZSB3ZSBmb3VuZC5cblxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9mcmFtZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSB3aGlsZSAocyA+PSAxICYmIGMgPj0gMCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gZmluYWxseSB7XG4gICAgcmVlbnRyeSA9IGZhbHNlO1xuXG4gICAge1xuICAgICAgUmVhY3RDdXJyZW50RGlzcGF0Y2hlci5jdXJyZW50ID0gcHJldmlvdXNEaXNwYXRjaGVyO1xuICAgICAgcmVlbmFibGVMb2dzKCk7XG4gICAgfVxuXG4gICAgRXJyb3IucHJlcGFyZVN0YWNrVHJhY2UgPSBwcmV2aW91c1ByZXBhcmVTdGFja1RyYWNlO1xuICB9IC8vIEZhbGxiYWNrIHRvIGp1c3QgdXNpbmcgdGhlIG5hbWUgaWYgd2UgY291bGRuJ3QgbWFrZSBpdCB0aHJvdy5cblxuXG4gIHZhciBuYW1lID0gZm4gPyBmbi5kaXNwbGF5TmFtZSB8fCBmbi5uYW1lIDogJyc7XG4gIHZhciBzeW50aGV0aWNGcmFtZSA9IG5hbWUgPyBkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZShuYW1lKSA6ICcnO1xuXG4gIHtcbiAgICBpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjb21wb25lbnRGcmFtZUNhY2hlLnNldChmbiwgc3ludGhldGljRnJhbWUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzeW50aGV0aWNGcmFtZTtcbn1cbmZ1bmN0aW9uIGRlc2NyaWJlRnVuY3Rpb25Db21wb25lbnRGcmFtZShmbiwgb3duZXJGbikge1xuICB7XG4gICAgcmV0dXJuIGRlc2NyaWJlTmF0aXZlQ29tcG9uZW50RnJhbWUoZm4sIGZhbHNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzaG91bGRDb25zdHJ1Y3QoQ29tcG9uZW50KSB7XG4gIHZhciBwcm90b3R5cGUgPSBDb21wb25lbnQucHJvdG90eXBlO1xuICByZXR1cm4gISEocHJvdG90eXBlICYmIHByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50KTtcbn1cblxuZnVuY3Rpb24gZGVzY3JpYmVVbmtub3duRWxlbWVudFR5cGVGcmFtZUluREVWKHR5cGUsIG93bmVyRm4pIHtcblxuICBpZiAodHlwZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAge1xuICAgICAgcmV0dXJuIGRlc2NyaWJlTmF0aXZlQ29tcG9uZW50RnJhbWUodHlwZSwgc2hvdWxkQ29uc3RydWN0KHR5cGUpKTtcbiAgICB9XG4gIH1cblxuICBpZiAodHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGRlc2NyaWJlQnVpbHRJbkNvbXBvbmVudEZyYW1lKHR5cGUpO1xuICB9XG5cbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBSRUFDVF9TVVNQRU5TRV9UWVBFOlxuICAgICAgcmV0dXJuIGRlc2NyaWJlQnVpbHRJbkNvbXBvbmVudEZyYW1lKCdTdXNwZW5zZScpO1xuXG4gICAgY2FzZSBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEU6XG4gICAgICByZXR1cm4gZGVzY3JpYmVCdWlsdEluQ29tcG9uZW50RnJhbWUoJ1N1c3BlbnNlTGlzdCcpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB0eXBlID09PSAnb2JqZWN0Jykge1xuICAgIHN3aXRjaCAodHlwZS4kJHR5cGVvZikge1xuICAgICAgY2FzZSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFOlxuICAgICAgICByZXR1cm4gZGVzY3JpYmVGdW5jdGlvbkNvbXBvbmVudEZyYW1lKHR5cGUucmVuZGVyKTtcblxuICAgICAgY2FzZSBSRUFDVF9NRU1PX1RZUEU6XG4gICAgICAgIC8vIE1lbW8gbWF5IGNvbnRhaW4gYW55IGNvbXBvbmVudCB0eXBlIHNvIHdlIHJlY3Vyc2l2ZWx5IHJlc29sdmUgaXQuXG4gICAgICAgIHJldHVybiBkZXNjcmliZVVua25vd25FbGVtZW50VHlwZUZyYW1lSW5ERVYodHlwZS50eXBlLCBvd25lckZuKTtcblxuICAgICAgY2FzZSBSRUFDVF9MQVpZX1RZUEU6XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgbGF6eUNvbXBvbmVudCA9IHR5cGU7XG4gICAgICAgICAgdmFyIHBheWxvYWQgPSBsYXp5Q29tcG9uZW50Ll9wYXlsb2FkO1xuICAgICAgICAgIHZhciBpbml0ID0gbGF6eUNvbXBvbmVudC5faW5pdDtcblxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBMYXp5IG1heSBjb250YWluIGFueSBjb21wb25lbnQgdHlwZSBzbyB3ZSByZWN1cnNpdmVseSByZXNvbHZlIGl0LlxuICAgICAgICAgICAgcmV0dXJuIGRlc2NyaWJlVW5rbm93bkVsZW1lbnRUeXBlRnJhbWVJbkRFVihpbml0KHBheWxvYWQpLCBvd25lckZuKTtcbiAgICAgICAgICB9IGNhdGNoICh4KSB7fVxuICAgICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuICcnO1xufVxuXG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSBSZWFjdFNoYXJlZEludGVybmFscy5SZWFjdEN1cnJlbnRPd25lcjtcbnZhciBSZWFjdERlYnVnQ3VycmVudEZyYW1lID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZTtcbnZhciBSRUFDVF9DTElFTlRfUkVGRVJFTkNFID0gU3ltYm9sLmZvcigncmVhY3QuY2xpZW50LnJlZmVyZW5jZScpO1xudmFyIHNwZWNpYWxQcm9wS2V5V2FybmluZ1Nob3duO1xudmFyIHNwZWNpYWxQcm9wUmVmV2FybmluZ1Nob3duO1xudmFyIGRpZFdhcm5BYm91dFN0cmluZ1JlZnM7XG5cbntcbiAgZGlkV2FybkFib3V0U3RyaW5nUmVmcyA9IHt9O1xufVxuXG5mdW5jdGlvbiBoYXNWYWxpZFJlZihjb25maWcpIHtcbiAge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbmZpZywgJ3JlZicpKSB7XG4gICAgICB2YXIgZ2V0dGVyID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihjb25maWcsICdyZWYnKS5nZXQ7XG5cbiAgICAgIGlmIChnZXR0ZXIgJiYgZ2V0dGVyLmlzUmVhY3RXYXJuaW5nKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gY29uZmlnLnJlZiAhPT0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBoYXNWYWxpZEtleShjb25maWcpIHtcbiAge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbmZpZywgJ2tleScpKSB7XG4gICAgICB2YXIgZ2V0dGVyID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihjb25maWcsICdrZXknKS5nZXQ7XG5cbiAgICAgIGlmIChnZXR0ZXIgJiYgZ2V0dGVyLmlzUmVhY3RXYXJuaW5nKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gY29uZmlnLmtleSAhPT0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiB3YXJuSWZTdHJpbmdSZWZDYW5ub3RCZUF1dG9Db252ZXJ0ZWQoY29uZmlnLCBzZWxmKSB7XG4gIHtcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5yZWYgPT09ICdzdHJpbmcnICYmIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgJiYgc2VsZiAmJiBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50LnN0YXRlTm9kZSAhPT0gc2VsZikge1xuICAgICAgdmFyIGNvbXBvbmVudE5hbWUgPSBnZXRDb21wb25lbnROYW1lRnJvbVR5cGUoUmVhY3RDdXJyZW50T3duZXIuY3VycmVudC50eXBlKTtcblxuICAgICAgaWYgKCFkaWRXYXJuQWJvdXRTdHJpbmdSZWZzW2NvbXBvbmVudE5hbWVdKSB7XG4gICAgICAgIGVycm9yKCdDb21wb25lbnQgXCIlc1wiIGNvbnRhaW5zIHRoZSBzdHJpbmcgcmVmIFwiJXNcIi4gJyArICdTdXBwb3J0IGZvciBzdHJpbmcgcmVmcyB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgbWFqb3IgcmVsZWFzZS4gJyArICdUaGlzIGNhc2UgY2Fubm90IGJlIGF1dG9tYXRpY2FsbHkgY29udmVydGVkIHRvIGFuIGFycm93IGZ1bmN0aW9uLiAnICsgJ1dlIGFzayB5b3UgdG8gbWFudWFsbHkgZml4IHRoaXMgY2FzZSBieSB1c2luZyB1c2VSZWYoKSBvciBjcmVhdGVSZWYoKSBpbnN0ZWFkLiAnICsgJ0xlYXJuIG1vcmUgYWJvdXQgdXNpbmcgcmVmcyBzYWZlbHkgaGVyZTogJyArICdodHRwczovL3JlYWN0anMub3JnL2xpbmsvc3RyaWN0LW1vZGUtc3RyaW5nLXJlZicsIGdldENvbXBvbmVudE5hbWVGcm9tVHlwZShSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50LnR5cGUpLCBjb25maWcucmVmKTtcblxuICAgICAgICBkaWRXYXJuQWJvdXRTdHJpbmdSZWZzW2NvbXBvbmVudE5hbWVdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVmaW5lS2V5UHJvcFdhcm5pbmdHZXR0ZXIocHJvcHMsIGRpc3BsYXlOYW1lKSB7XG4gIHtcbiAgICB2YXIgd2FybkFib3V0QWNjZXNzaW5nS2V5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFzcGVjaWFsUHJvcEtleVdhcm5pbmdTaG93bikge1xuICAgICAgICBzcGVjaWFsUHJvcEtleVdhcm5pbmdTaG93biA9IHRydWU7XG5cbiAgICAgICAgZXJyb3IoJyVzOiBga2V5YCBpcyBub3QgYSBwcm9wLiBUcnlpbmcgdG8gYWNjZXNzIGl0IHdpbGwgcmVzdWx0ICcgKyAnaW4gYHVuZGVmaW5lZGAgYmVpbmcgcmV0dXJuZWQuIElmIHlvdSBuZWVkIHRvIGFjY2VzcyB0aGUgc2FtZSAnICsgJ3ZhbHVlIHdpdGhpbiB0aGUgY2hpbGQgY29tcG9uZW50LCB5b3Ugc2hvdWxkIHBhc3MgaXQgYXMgYSBkaWZmZXJlbnQgJyArICdwcm9wLiAoaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3NwZWNpYWwtcHJvcHMpJywgZGlzcGxheU5hbWUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB3YXJuQWJvdXRBY2Nlc3NpbmdLZXkuaXNSZWFjdFdhcm5pbmcgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9wcywgJ2tleScsIHtcbiAgICAgIGdldDogd2FybkFib3V0QWNjZXNzaW5nS2V5LFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVmaW5lUmVmUHJvcFdhcm5pbmdHZXR0ZXIocHJvcHMsIGRpc3BsYXlOYW1lKSB7XG4gIHtcbiAgICB7XG4gICAgICB2YXIgd2FybkFib3V0QWNjZXNzaW5nUmVmID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXNwZWNpYWxQcm9wUmVmV2FybmluZ1Nob3duKSB7XG4gICAgICAgICAgc3BlY2lhbFByb3BSZWZXYXJuaW5nU2hvd24gPSB0cnVlO1xuXG4gICAgICAgICAgZXJyb3IoJyVzOiBgcmVmYCBpcyBub3QgYSBwcm9wLiBUcnlpbmcgdG8gYWNjZXNzIGl0IHdpbGwgcmVzdWx0ICcgKyAnaW4gYHVuZGVmaW5lZGAgYmVpbmcgcmV0dXJuZWQuIElmIHlvdSBuZWVkIHRvIGFjY2VzcyB0aGUgc2FtZSAnICsgJ3ZhbHVlIHdpdGhpbiB0aGUgY2hpbGQgY29tcG9uZW50LCB5b3Ugc2hvdWxkIHBhc3MgaXQgYXMgYSBkaWZmZXJlbnQgJyArICdwcm9wLiAoaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3NwZWNpYWwtcHJvcHMpJywgZGlzcGxheU5hbWUpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB3YXJuQWJvdXRBY2Nlc3NpbmdSZWYuaXNSZWFjdFdhcm5pbmcgPSB0cnVlO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3BzLCAncmVmJywge1xuICAgICAgICBnZXQ6IHdhcm5BYm91dEFjY2Vzc2luZ1JlZixcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbi8qKlxuICogRmFjdG9yeSBtZXRob2QgdG8gY3JlYXRlIGEgbmV3IFJlYWN0IGVsZW1lbnQuIFRoaXMgbm8gbG9uZ2VyIGFkaGVyZXMgdG9cbiAqIHRoZSBjbGFzcyBwYXR0ZXJuLCBzbyBkbyBub3QgdXNlIG5ldyB0byBjYWxsIGl0LiBBbHNvLCBpbnN0YW5jZW9mIGNoZWNrXG4gKiB3aWxsIG5vdCB3b3JrLiBJbnN0ZWFkIHRlc3QgJCR0eXBlb2YgZmllbGQgYWdhaW5zdCBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50JykgdG8gY2hlY2tcbiAqIGlmIHNvbWV0aGluZyBpcyBhIFJlYWN0IEVsZW1lbnQuXG4gKlxuICogQHBhcmFtIHsqfSB0eXBlXG4gKiBAcGFyYW0geyp9IHByb3BzXG4gKiBAcGFyYW0geyp9IGtleVxuICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0fSByZWZcbiAqIEBwYXJhbSB7Kn0gb3duZXJcbiAqIEBwYXJhbSB7Kn0gc2VsZiBBICp0ZW1wb3JhcnkqIGhlbHBlciB0byBkZXRlY3QgcGxhY2VzIHdoZXJlIGB0aGlzYCBpc1xuICogZGlmZmVyZW50IGZyb20gdGhlIGBvd25lcmAgd2hlbiBSZWFjdC5jcmVhdGVFbGVtZW50IGlzIGNhbGxlZCwgc28gdGhhdCB3ZVxuICogY2FuIHdhcm4uIFdlIHdhbnQgdG8gZ2V0IHJpZCBvZiBvd25lciBhbmQgcmVwbGFjZSBzdHJpbmcgYHJlZmBzIHdpdGggYXJyb3dcbiAqIGZ1bmN0aW9ucywgYW5kIGFzIGxvbmcgYXMgYHRoaXNgIGFuZCBvd25lciBhcmUgdGhlIHNhbWUsIHRoZXJlIHdpbGwgYmUgbm9cbiAqIGNoYW5nZSBpbiBiZWhhdmlvci5cbiAqIEBwYXJhbSB7Kn0gc291cmNlIEFuIGFubm90YXRpb24gb2JqZWN0IChhZGRlZCBieSBhIHRyYW5zcGlsZXIgb3Igb3RoZXJ3aXNlKVxuICogaW5kaWNhdGluZyBmaWxlbmFtZSwgbGluZSBudW1iZXIsIGFuZC9vciBvdGhlciBpbmZvcm1hdGlvbi5cbiAqIEBpbnRlcm5hbFxuICovXG5cblxuZnVuY3Rpb24gUmVhY3RFbGVtZW50KHR5cGUsIGtleSwgX3JlZiwgc2VsZiwgc291cmNlLCBvd25lciwgcHJvcHMpIHtcbiAgdmFyIHJlZjtcblxuICB7XG4gICAgcmVmID0gX3JlZjtcbiAgfVxuXG4gIHZhciBlbGVtZW50O1xuXG4gIHtcbiAgICAvLyBJbiBwcm9kLCBgcmVmYCBpcyBhIHJlZ3VsYXIgcHJvcGVydHkuIEl0IHdpbGwgYmUgcmVtb3ZlZCBpbiBhXG4gICAgLy8gZnV0dXJlIHJlbGVhc2UuXG4gICAgZWxlbWVudCA9IHtcbiAgICAgIC8vIFRoaXMgdGFnIGFsbG93cyB1cyB0byB1bmlxdWVseSBpZGVudGlmeSB0aGlzIGFzIGEgUmVhY3QgRWxlbWVudFxuICAgICAgJCR0eXBlb2Y6IFJFQUNUX0VMRU1FTlRfVFlQRSxcbiAgICAgIC8vIEJ1aWx0LWluIHByb3BlcnRpZXMgdGhhdCBiZWxvbmcgb24gdGhlIGVsZW1lbnRcbiAgICAgIHR5cGU6IHR5cGUsXG4gICAgICBrZXk6IGtleSxcbiAgICAgIHJlZjogcmVmLFxuICAgICAgcHJvcHM6IHByb3BzLFxuICAgICAgLy8gUmVjb3JkIHRoZSBjb21wb25lbnQgcmVzcG9uc2libGUgZm9yIGNyZWF0aW5nIHRoaXMgZWxlbWVudC5cbiAgICAgIF9vd25lcjogb3duZXJcbiAgICB9O1xuICB9XG5cbiAge1xuICAgIC8vIFRoZSB2YWxpZGF0aW9uIGZsYWcgaXMgY3VycmVudGx5IG11dGF0aXZlLiBXZSBwdXQgaXQgb25cbiAgICAvLyBhbiBleHRlcm5hbCBiYWNraW5nIHN0b3JlIHNvIHRoYXQgd2UgY2FuIGZyZWV6ZSB0aGUgd2hvbGUgb2JqZWN0LlxuICAgIC8vIFRoaXMgY2FuIGJlIHJlcGxhY2VkIHdpdGggYSBXZWFrTWFwIG9uY2UgdGhleSBhcmUgaW1wbGVtZW50ZWQgaW5cbiAgICAvLyBjb21tb25seSB1c2VkIGRldmVsb3BtZW50IGVudmlyb25tZW50cy5cbiAgICBlbGVtZW50Ll9zdG9yZSA9IHt9OyAvLyBUbyBtYWtlIGNvbXBhcmluZyBSZWFjdEVsZW1lbnRzIGVhc2llciBmb3IgdGVzdGluZyBwdXJwb3Nlcywgd2UgbWFrZVxuICAgIC8vIHRoZSB2YWxpZGF0aW9uIGZsYWcgbm9uLWVudW1lcmFibGUgKHdoZXJlIHBvc3NpYmxlLCB3aGljaCBzaG91bGRcbiAgICAvLyBpbmNsdWRlIGV2ZXJ5IGVudmlyb25tZW50IHdlIHJ1biB0ZXN0cyBpbiksIHNvIHRoZSB0ZXN0IGZyYW1ld29ya1xuICAgIC8vIGlnbm9yZXMgaXQuXG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZWxlbWVudC5fc3RvcmUsICd2YWxpZGF0ZWQnLCB7XG4gICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiBmYWxzZVxuICAgIH0pOyAvLyBkZWJ1Z0luZm8gY29udGFpbnMgU2VydmVyIENvbXBvbmVudCBkZWJ1ZyBpbmZvcm1hdGlvbi5cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbGVtZW50LCAnX2RlYnVnSW5mbycsIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IG51bGxcbiAgICB9KTtcblxuICAgIGlmIChPYmplY3QuZnJlZXplKSB7XG4gICAgICBPYmplY3QuZnJlZXplKGVsZW1lbnQucHJvcHMpO1xuICAgICAgT2JqZWN0LmZyZWV6ZShlbGVtZW50KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZWxlbWVudDtcbn1cbnZhciBkaWRXYXJuQWJvdXRLZXlTcHJlYWQgPSB7fTtcbi8qKlxuICogaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmZjcy9wdWxsLzEwN1xuICogQHBhcmFtIHsqfSB0eXBlXG4gKiBAcGFyYW0ge29iamVjdH0gcHJvcHNcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAqL1xuXG5mdW5jdGlvbiBqc3hERVYkMSh0eXBlLCBjb25maWcsIG1heWJlS2V5LCBpc1N0YXRpY0NoaWxkcmVuLCBzb3VyY2UsIHNlbGYpIHtcbiAge1xuICAgIGlmICghaXNWYWxpZEVsZW1lbnRUeXBlKHR5cGUpKSB7XG4gICAgICAvLyBUaGlzIGlzIGFuIGludmFsaWQgZWxlbWVudCB0eXBlLlxuICAgICAgLy9cbiAgICAgIC8vIFdlIHdhcm4gaW4gdGhpcyBjYXNlIGJ1dCBkb24ndCB0aHJvdy4gV2UgZXhwZWN0IHRoZSBlbGVtZW50IGNyZWF0aW9uIHRvXG4gICAgICAvLyBzdWNjZWVkIGFuZCB0aGVyZSB3aWxsIGxpa2VseSBiZSBlcnJvcnMgaW4gcmVuZGVyLlxuICAgICAgdmFyIGluZm8gPSAnJztcblxuICAgICAgaWYgKHR5cGUgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcgJiYgdHlwZSAhPT0gbnVsbCAmJiBPYmplY3Qua2V5cyh0eXBlKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgaW5mbyArPSAnIFlvdSBsaWtlbHkgZm9yZ290IHRvIGV4cG9ydCB5b3VyIGNvbXBvbmVudCBmcm9tIHRoZSBmaWxlICcgKyBcIml0J3MgZGVmaW5lZCBpbiwgb3IgeW91IG1pZ2h0IGhhdmUgbWl4ZWQgdXAgZGVmYXVsdCBhbmQgbmFtZWQgaW1wb3J0cy5cIjtcbiAgICAgIH1cblxuICAgICAgdmFyIHR5cGVTdHJpbmc7XG5cbiAgICAgIGlmICh0eXBlID09PSBudWxsKSB7XG4gICAgICAgIHR5cGVTdHJpbmcgPSAnbnVsbCc7XG4gICAgICB9IGVsc2UgaWYgKGlzQXJyYXkodHlwZSkpIHtcbiAgICAgICAgdHlwZVN0cmluZyA9ICdhcnJheSc7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgIT09IHVuZGVmaW5lZCAmJiB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEUpIHtcbiAgICAgICAgdHlwZVN0cmluZyA9IFwiPFwiICsgKGdldENvbXBvbmVudE5hbWVGcm9tVHlwZSh0eXBlLnR5cGUpIHx8ICdVbmtub3duJykgKyBcIiAvPlwiO1xuICAgICAgICBpbmZvID0gJyBEaWQgeW91IGFjY2lkZW50YWxseSBleHBvcnQgYSBKU1ggbGl0ZXJhbCBpbnN0ZWFkIG9mIGEgY29tcG9uZW50Pyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0eXBlU3RyaW5nID0gdHlwZW9mIHR5cGU7XG4gICAgICB9XG5cbiAgICAgIGVycm9yKCdSZWFjdC5qc3g6IHR5cGUgaXMgaW52YWxpZCAtLSBleHBlY3RlZCBhIHN0cmluZyAoZm9yICcgKyAnYnVpbHQtaW4gY29tcG9uZW50cykgb3IgYSBjbGFzcy9mdW5jdGlvbiAoZm9yIGNvbXBvc2l0ZSAnICsgJ2NvbXBvbmVudHMpIGJ1dCBnb3Q6ICVzLiVzJywgdHlwZVN0cmluZywgaW5mbyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRoaXMgaXMgYSB2YWxpZCBlbGVtZW50IHR5cGUuXG4gICAgICAvLyBTa2lwIGtleSB3YXJuaW5nIGlmIHRoZSB0eXBlIGlzbid0IHZhbGlkIHNpbmNlIG91ciBrZXkgdmFsaWRhdGlvbiBsb2dpY1xuICAgICAgLy8gZG9lc24ndCBleHBlY3QgYSBub24tc3RyaW5nL2Z1bmN0aW9uIHR5cGUgYW5kIGNhbiB0aHJvdyBjb25mdXNpbmdcbiAgICAgIC8vIGVycm9ycy4gV2UgZG9uJ3Qgd2FudCBleGNlcHRpb24gYmVoYXZpb3IgdG8gZGlmZmVyIGJldHdlZW4gZGV2IGFuZFxuICAgICAgLy8gcHJvZC4gKFJlbmRlcmluZyB3aWxsIHRocm93IHdpdGggYSBoZWxwZnVsIG1lc3NhZ2UgYW5kIGFzIHNvb24gYXMgdGhlXG4gICAgICAvLyB0eXBlIGlzIGZpeGVkLCB0aGUga2V5IHdhcm5pbmdzIHdpbGwgYXBwZWFyLilcbiAgICAgIHZhciBjaGlsZHJlbiA9IGNvbmZpZy5jaGlsZHJlbjtcblxuICAgICAgaWYgKGNoaWxkcmVuICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGlzU3RhdGljQ2hpbGRyZW4pIHtcbiAgICAgICAgICBpZiAoaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgdmFsaWRhdGVDaGlsZEtleXMoY2hpbGRyZW5baV0sIHR5cGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoT2JqZWN0LmZyZWV6ZSkge1xuICAgICAgICAgICAgICBPYmplY3QuZnJlZXplKGNoaWxkcmVuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZXJyb3IoJ1JlYWN0LmpzeDogU3RhdGljIGNoaWxkcmVuIHNob3VsZCBhbHdheXMgYmUgYW4gYXJyYXkuICcgKyAnWW91IGFyZSBsaWtlbHkgZXhwbGljaXRseSBjYWxsaW5nIFJlYWN0LmpzeHMgb3IgUmVhY3QuanN4REVWLiAnICsgJ1VzZSB0aGUgQmFiZWwgdHJhbnNmb3JtIGluc3RlYWQuJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbGlkYXRlQ2hpbGRLZXlzKGNoaWxkcmVuLCB0eXBlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gLy8gV2FybiBhYm91dCBrZXkgc3ByZWFkIHJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGUgdHlwZSBpcyB2YWxpZC5cblxuXG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoY29uZmlnLCAna2V5JykpIHtcbiAgICAgIHZhciBjb21wb25lbnROYW1lID0gZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKHR5cGUpO1xuICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhjb25maWcpLmZpbHRlcihmdW5jdGlvbiAoaykge1xuICAgICAgICByZXR1cm4gayAhPT0gJ2tleSc7XG4gICAgICB9KTtcbiAgICAgIHZhciBiZWZvcmVFeGFtcGxlID0ga2V5cy5sZW5ndGggPiAwID8gJ3trZXk6IHNvbWVLZXksICcgKyBrZXlzLmpvaW4oJzogLi4uLCAnKSArICc6IC4uLn0nIDogJ3trZXk6IHNvbWVLZXl9JztcblxuICAgICAgaWYgKCFkaWRXYXJuQWJvdXRLZXlTcHJlYWRbY29tcG9uZW50TmFtZSArIGJlZm9yZUV4YW1wbGVdKSB7XG4gICAgICAgIHZhciBhZnRlckV4YW1wbGUgPSBrZXlzLmxlbmd0aCA+IDAgPyAneycgKyBrZXlzLmpvaW4oJzogLi4uLCAnKSArICc6IC4uLn0nIDogJ3t9JztcblxuICAgICAgICBlcnJvcignQSBwcm9wcyBvYmplY3QgY29udGFpbmluZyBhIFwia2V5XCIgcHJvcCBpcyBiZWluZyBzcHJlYWQgaW50byBKU1g6XFxuJyArICcgIGxldCBwcm9wcyA9ICVzO1xcbicgKyAnICA8JXMgey4uLnByb3BzfSAvPlxcbicgKyAnUmVhY3Qga2V5cyBtdXN0IGJlIHBhc3NlZCBkaXJlY3RseSB0byBKU1ggd2l0aG91dCB1c2luZyBzcHJlYWQ6XFxuJyArICcgIGxldCBwcm9wcyA9ICVzO1xcbicgKyAnICA8JXMga2V5PXtzb21lS2V5fSB7Li4ucHJvcHN9IC8+JywgYmVmb3JlRXhhbXBsZSwgY29tcG9uZW50TmFtZSwgYWZ0ZXJFeGFtcGxlLCBjb21wb25lbnROYW1lKTtcblxuICAgICAgICBkaWRXYXJuQWJvdXRLZXlTcHJlYWRbY29tcG9uZW50TmFtZSArIGJlZm9yZUV4YW1wbGVdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJvcE5hbWU7IC8vIFJlc2VydmVkIG5hbWVzIGFyZSBleHRyYWN0ZWRcblxuICAgIHZhciBwcm9wcyA9IHt9O1xuICAgIHZhciBrZXkgPSBudWxsO1xuICAgIHZhciByZWYgPSBudWxsOyAvLyBDdXJyZW50bHksIGtleSBjYW4gYmUgc3ByZWFkIGluIGFzIGEgcHJvcC4gVGhpcyBjYXVzZXMgYSBwb3RlbnRpYWxcbiAgICAvLyBpc3N1ZSBpZiBrZXkgaXMgYWxzbyBleHBsaWNpdGx5IGRlY2xhcmVkIChpZS4gPGRpdiB7Li4ucHJvcHN9IGtleT1cIkhpXCIgLz5cbiAgICAvLyBvciA8ZGl2IGtleT1cIkhpXCIgey4uLnByb3BzfSAvPiApLiBXZSB3YW50IHRvIGRlcHJlY2F0ZSBrZXkgc3ByZWFkLFxuICAgIC8vIGJ1dCBhcyBhbiBpbnRlcm1lZGlhcnkgc3RlcCwgd2Ugd2lsbCB1c2UganN4REVWIGZvciBldmVyeXRoaW5nIGV4Y2VwdFxuICAgIC8vIDxkaXYgey4uLnByb3BzfSBrZXk9XCJIaVwiIC8+LCBiZWNhdXNlIHdlIGFyZW4ndCBjdXJyZW50bHkgYWJsZSB0byB0ZWxsIGlmXG4gICAgLy8ga2V5IGlzIGV4cGxpY2l0bHkgZGVjbGFyZWQgdG8gYmUgdW5kZWZpbmVkIG9yIG5vdC5cblxuICAgIGlmIChtYXliZUtleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB7XG4gICAgICAgIGNoZWNrS2V5U3RyaW5nQ29lcmNpb24obWF5YmVLZXkpO1xuICAgICAgfVxuXG4gICAgICBrZXkgPSAnJyArIG1heWJlS2V5O1xuICAgIH1cblxuICAgIGlmIChoYXNWYWxpZEtleShjb25maWcpKSB7XG4gICAgICB7XG4gICAgICAgIGNoZWNrS2V5U3RyaW5nQ29lcmNpb24oY29uZmlnLmtleSk7XG4gICAgICB9XG5cbiAgICAgIGtleSA9ICcnICsgY29uZmlnLmtleTtcbiAgICB9XG5cbiAgICBpZiAoaGFzVmFsaWRSZWYoY29uZmlnKSkge1xuICAgICAge1xuICAgICAgICByZWYgPSBjb25maWcucmVmO1xuICAgICAgfVxuXG4gICAgICB3YXJuSWZTdHJpbmdSZWZDYW5ub3RCZUF1dG9Db252ZXJ0ZWQoY29uZmlnLCBzZWxmKTtcbiAgICB9IC8vIFJlbWFpbmluZyBwcm9wZXJ0aWVzIGFyZSBhZGRlZCB0byBhIG5ldyBwcm9wcyBvYmplY3RcblxuXG4gICAgZm9yIChwcm9wTmFtZSBpbiBjb25maWcpIHtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbmZpZywgcHJvcE5hbWUpICYmIC8vIFNraXAgb3ZlciByZXNlcnZlZCBwcm9wIG5hbWVzXG4gICAgICBwcm9wTmFtZSAhPT0gJ2tleScgJiYgKHByb3BOYW1lICE9PSAncmVmJykpIHtcbiAgICAgICAgcHJvcHNbcHJvcE5hbWVdID0gY29uZmlnW3Byb3BOYW1lXTtcbiAgICAgIH1cbiAgICB9IC8vIFJlc29sdmUgZGVmYXVsdCBwcm9wc1xuXG5cbiAgICBpZiAodHlwZSAmJiB0eXBlLmRlZmF1bHRQcm9wcykge1xuICAgICAgdmFyIGRlZmF1bHRQcm9wcyA9IHR5cGUuZGVmYXVsdFByb3BzO1xuXG4gICAgICBmb3IgKHByb3BOYW1lIGluIGRlZmF1bHRQcm9wcykge1xuICAgICAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBwcm9wc1twcm9wTmFtZV0gPSBkZWZhdWx0UHJvcHNbcHJvcE5hbWVdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGtleSB8fCByZWYpIHtcbiAgICAgIHZhciBkaXNwbGF5TmFtZSA9IHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nID8gdHlwZS5kaXNwbGF5TmFtZSB8fCB0eXBlLm5hbWUgfHwgJ1Vua25vd24nIDogdHlwZTtcblxuICAgICAgaWYgKGtleSkge1xuICAgICAgICBkZWZpbmVLZXlQcm9wV2FybmluZ0dldHRlcihwcm9wcywgZGlzcGxheU5hbWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVmKSB7XG4gICAgICAgIGRlZmluZVJlZlByb3BXYXJuaW5nR2V0dGVyKHByb3BzLCBkaXNwbGF5TmFtZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGVsZW1lbnQgPSBSZWFjdEVsZW1lbnQodHlwZSwga2V5LCByZWYsIHNlbGYsIHNvdXJjZSwgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCwgcHJvcHMpO1xuXG4gICAgaWYgKHR5cGUgPT09IFJFQUNUX0ZSQUdNRU5UX1RZUEUpIHtcbiAgICAgIHZhbGlkYXRlRnJhZ21lbnRQcm9wcyhlbGVtZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oKSB7XG4gIHtcbiAgICBpZiAoUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCkge1xuICAgICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lRnJvbVR5cGUoUmVhY3RDdXJyZW50T3duZXIuY3VycmVudC50eXBlKTtcblxuICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuICdcXG5cXG5DaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiBgJyArIG5hbWUgKyAnYC4nO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAnJztcbiAgfVxufVxuLyoqXG4gKiBFbnN1cmUgdGhhdCBldmVyeSBlbGVtZW50IGVpdGhlciBpcyBwYXNzZWQgaW4gYSBzdGF0aWMgbG9jYXRpb24sIGluIGFuXG4gKiBhcnJheSB3aXRoIGFuIGV4cGxpY2l0IGtleXMgcHJvcGVydHkgZGVmaW5lZCwgb3IgaW4gYW4gb2JqZWN0IGxpdGVyYWxcbiAqIHdpdGggdmFsaWQga2V5IHByb3BlcnR5LlxuICpcbiAqIEBpbnRlcm5hbFxuICogQHBhcmFtIHtSZWFjdE5vZGV9IG5vZGUgU3RhdGljYWxseSBwYXNzZWQgY2hpbGQgb2YgYW55IHR5cGUuXG4gKiBAcGFyYW0geyp9IHBhcmVudFR5cGUgbm9kZSdzIHBhcmVudCdzIHR5cGUuXG4gKi9cblxuXG5mdW5jdGlvbiB2YWxpZGF0ZUNoaWxkS2V5cyhub2RlLCBwYXJlbnRUeXBlKSB7XG4gIHtcbiAgICBpZiAodHlwZW9mIG5vZGUgIT09ICdvYmplY3QnIHx8ICFub2RlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG5vZGUuJCR0eXBlb2YgPT09IFJFQUNUX0NMSUVOVF9SRUZFUkVOQ0UpIDsgZWxzZSBpZiAoaXNBcnJheShub2RlKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjaGlsZCA9IG5vZGVbaV07XG5cbiAgICAgICAgaWYgKGlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgICAgIHZhbGlkYXRlRXhwbGljaXRLZXkoY2hpbGQsIHBhcmVudFR5cGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1ZhbGlkRWxlbWVudChub2RlKSkge1xuICAgICAgLy8gVGhpcyBlbGVtZW50IHdhcyBwYXNzZWQgaW4gYSB2YWxpZCBsb2NhdGlvbi5cbiAgICAgIGlmIChub2RlLl9zdG9yZSkge1xuICAgICAgICBub2RlLl9zdG9yZS52YWxpZGF0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgaXRlcmF0b3JGbiA9IGdldEl0ZXJhdG9yRm4obm9kZSk7XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmF0b3JGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBFbnRyeSBpdGVyYXRvcnMgdXNlZCB0byBwcm92aWRlIGltcGxpY2l0IGtleXMsXG4gICAgICAgIC8vIGJ1dCBub3cgd2UgcHJpbnQgYSBzZXBhcmF0ZSB3YXJuaW5nIGZvciB0aGVtIGxhdGVyLlxuICAgICAgICBpZiAoaXRlcmF0b3JGbiAhPT0gbm9kZS5lbnRyaWVzKSB7XG4gICAgICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0b3JGbi5jYWxsKG5vZGUpO1xuICAgICAgICAgIHZhciBzdGVwO1xuXG4gICAgICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgICAgICAgaWYgKGlzVmFsaWRFbGVtZW50KHN0ZXAudmFsdWUpKSB7XG4gICAgICAgICAgICAgIHZhbGlkYXRlRXhwbGljaXRLZXkoc3RlcC52YWx1ZSwgcGFyZW50VHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4vKipcbiAqIFZlcmlmaWVzIHRoZSBvYmplY3QgaXMgYSBSZWFjdEVsZW1lbnQuXG4gKiBTZWUgaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL3JlYWN0LWFwaS5odG1sI2lzdmFsaWRlbGVtZW50XG4gKiBAcGFyYW0gez9vYmplY3R9IG9iamVjdFxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBgb2JqZWN0YCBpcyBhIFJlYWN0RWxlbWVudC5cbiAqIEBmaW5hbFxuICovXG5cblxuZnVuY3Rpb24gaXNWYWxpZEVsZW1lbnQob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiBvYmplY3QgIT09IG51bGwgJiYgb2JqZWN0LiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEU7XG59XG52YXIgb3duZXJIYXNLZXlVc2VXYXJuaW5nID0ge307XG4vKipcbiAqIFdhcm4gaWYgdGhlIGVsZW1lbnQgZG9lc24ndCBoYXZlIGFuIGV4cGxpY2l0IGtleSBhc3NpZ25lZCB0byBpdC5cbiAqIFRoaXMgZWxlbWVudCBpcyBpbiBhbiBhcnJheS4gVGhlIGFycmF5IGNvdWxkIGdyb3cgYW5kIHNocmluayBvciBiZVxuICogcmVvcmRlcmVkLiBBbGwgY2hpbGRyZW4gdGhhdCBoYXZlbid0IGFscmVhZHkgYmVlbiB2YWxpZGF0ZWQgYXJlIHJlcXVpcmVkIHRvXG4gKiBoYXZlIGEgXCJrZXlcIiBwcm9wZXJ0eSBhc3NpZ25lZCB0byBpdC4gRXJyb3Igc3RhdHVzZXMgYXJlIGNhY2hlZCBzbyBhIHdhcm5pbmdcbiAqIHdpbGwgb25seSBiZSBzaG93biBvbmNlLlxuICpcbiAqIEBpbnRlcm5hbFxuICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IGVsZW1lbnQgRWxlbWVudCB0aGF0IHJlcXVpcmVzIGEga2V5LlxuICogQHBhcmFtIHsqfSBwYXJlbnRUeXBlIGVsZW1lbnQncyBwYXJlbnQncyB0eXBlLlxuICovXG5cbmZ1bmN0aW9uIHZhbGlkYXRlRXhwbGljaXRLZXkoZWxlbWVudCwgcGFyZW50VHlwZSkge1xuICB7XG4gICAgaWYgKCFlbGVtZW50Ll9zdG9yZSB8fCBlbGVtZW50Ll9zdG9yZS52YWxpZGF0ZWQgfHwgZWxlbWVudC5rZXkgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGVsZW1lbnQuX3N0b3JlLnZhbGlkYXRlZCA9IHRydWU7XG4gICAgdmFyIGN1cnJlbnRDb21wb25lbnRFcnJvckluZm8gPSBnZXRDdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvKHBhcmVudFR5cGUpO1xuXG4gICAgaWYgKG93bmVySGFzS2V5VXNlV2FybmluZ1tjdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG93bmVySGFzS2V5VXNlV2FybmluZ1tjdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvXSA9IHRydWU7IC8vIFVzdWFsbHkgdGhlIGN1cnJlbnQgb3duZXIgaXMgdGhlIG9mZmVuZGVyLCBidXQgaWYgaXQgYWNjZXB0cyBjaGlsZHJlbiBhcyBhXG4gICAgLy8gcHJvcGVydHksIGl0IG1heSBiZSB0aGUgY3JlYXRvciBvZiB0aGUgY2hpbGQgdGhhdCdzIHJlc3BvbnNpYmxlIGZvclxuICAgIC8vIGFzc2lnbmluZyBpdCBhIGtleS5cblxuICAgIHZhciBjaGlsZE93bmVyID0gJyc7XG5cbiAgICBpZiAoZWxlbWVudCAmJiBlbGVtZW50Ll9vd25lciAmJiBlbGVtZW50Ll9vd25lciAhPT0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCkge1xuICAgICAgLy8gR2l2ZSB0aGUgY29tcG9uZW50IHRoYXQgb3JpZ2luYWxseSBjcmVhdGVkIHRoaXMgY2hpbGQuXG4gICAgICBjaGlsZE93bmVyID0gXCIgSXQgd2FzIHBhc3NlZCBhIGNoaWxkIGZyb20gXCIgKyBnZXRDb21wb25lbnROYW1lRnJvbVR5cGUoZWxlbWVudC5fb3duZXIudHlwZSkgKyBcIi5cIjtcbiAgICB9XG5cbiAgICBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudChlbGVtZW50KTtcblxuICAgIGVycm9yKCdFYWNoIGNoaWxkIGluIGEgbGlzdCBzaG91bGQgaGF2ZSBhIHVuaXF1ZSBcImtleVwiIHByb3AuJyArICclcyVzIFNlZSBodHRwczovL3JlYWN0anMub3JnL2xpbmsvd2FybmluZy1rZXlzIGZvciBtb3JlIGluZm9ybWF0aW9uLicsIGN1cnJlbnRDb21wb25lbnRFcnJvckluZm8sIGNoaWxkT3duZXIpO1xuXG4gICAgc2V0Q3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQobnVsbCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0Q3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQoZWxlbWVudCkge1xuICB7XG4gICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgIHZhciBvd25lciA9IGVsZW1lbnQuX293bmVyO1xuICAgICAgdmFyIHN0YWNrID0gZGVzY3JpYmVVbmtub3duRWxlbWVudFR5cGVGcmFtZUluREVWKGVsZW1lbnQudHlwZSwgb3duZXIgPyBvd25lci50eXBlIDogbnVsbCk7XG4gICAgICBSZWFjdERlYnVnQ3VycmVudEZyYW1lLnNldEV4dHJhU3RhY2tGcmFtZShzdGFjayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIFJlYWN0RGVidWdDdXJyZW50RnJhbWUuc2V0RXh0cmFTdGFja0ZyYW1lKG51bGwpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRDdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvKHBhcmVudFR5cGUpIHtcbiAge1xuICAgIHZhciBpbmZvID0gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKCk7XG5cbiAgICBpZiAoIWluZm8pIHtcbiAgICAgIHZhciBwYXJlbnROYW1lID0gZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKHBhcmVudFR5cGUpO1xuXG4gICAgICBpZiAocGFyZW50TmFtZSkge1xuICAgICAgICBpbmZvID0gXCJcXG5cXG5DaGVjayB0aGUgdG9wLWxldmVsIHJlbmRlciBjYWxsIHVzaW5nIDxcIiArIHBhcmVudE5hbWUgKyBcIj4uXCI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGluZm87XG4gIH1cbn1cbi8qKlxuICogR2l2ZW4gYSBmcmFnbWVudCwgdmFsaWRhdGUgdGhhdCBpdCBjYW4gb25seSBiZSBwcm92aWRlZCB3aXRoIGZyYWdtZW50IHByb3BzXG4gKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gZnJhZ21lbnRcbiAqL1xuXG5cbmZ1bmN0aW9uIHZhbGlkYXRlRnJhZ21lbnRQcm9wcyhmcmFnbWVudCkge1xuICAvLyBUT0RPOiBNb3ZlIHRoaXMgdG8gcmVuZGVyIHBoYXNlIGluc3RlYWQgb2YgYXQgZWxlbWVudCBjcmVhdGlvbi5cbiAge1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZnJhZ21lbnQucHJvcHMpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcblxuICAgICAgaWYgKGtleSAhPT0gJ2NoaWxkcmVuJyAmJiBrZXkgIT09ICdrZXknKSB7XG4gICAgICAgIHNldEN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50KGZyYWdtZW50KTtcblxuICAgICAgICBlcnJvcignSW52YWxpZCBwcm9wIGAlc2Agc3VwcGxpZWQgdG8gYFJlYWN0LkZyYWdtZW50YC4gJyArICdSZWFjdC5GcmFnbWVudCBjYW4gb25seSBoYXZlIGBrZXlgIGFuZCBgY2hpbGRyZW5gIHByb3BzLicsIGtleSk7XG5cbiAgICAgICAgc2V0Q3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQobnVsbCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChmcmFnbWVudC5yZWYgIT09IG51bGwpIHtcbiAgICAgIHNldEN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50KGZyYWdtZW50KTtcblxuICAgICAgZXJyb3IoJ0ludmFsaWQgYXR0cmlidXRlIGByZWZgIHN1cHBsaWVkIHRvIGBSZWFjdC5GcmFnbWVudGAuJyk7XG5cbiAgICAgIHNldEN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50KG51bGwpO1xuICAgIH1cbiAgfVxufVxuXG52YXIganN4REVWID0ganN4REVWJDEgO1xuXG5leHBvcnRzLkZyYWdtZW50ID0gUkVBQ1RfRlJBR01FTlRfVFlQRTtcbmV4cG9ydHMuanN4REVWID0ganN4REVWO1xuICB9KSgpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSw4TEFBc0U7QUFDeEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9yZWFjdC9qc3gtZGV2LXJ1bnRpbWUuanM/ZWQ2NiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1kZXYtcnVudGltZS5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["main-app"], function() { return __webpack_exec__("(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Clolke%5C%5Cprojects%5C%5Capp%5C%5Cpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false!"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);