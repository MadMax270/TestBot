"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@twa-dev";
exports.ids = ["vendor-chunks/@twa-dev"];
exports.modules = {

/***/ "(ssr)/./node_modules/@twa-dev/sdk/dist/index.js":
/*!*************************************************!*\
  !*** ./node_modules/@twa-dev/sdk/dist/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar sdk_1 = __webpack_require__(/*! ./sdk */ \"(ssr)/./node_modules/@twa-dev/sdk/dist/sdk.js\");\nexports[\"default\"] = sdk_1.WebApp;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR3YS1kZXYvc2RrL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsWUFBWSxtQkFBTyxDQUFDLDREQUFPO0FBQzNCLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9qZWN0cy8uL25vZGVfbW9kdWxlcy9AdHdhLWRldi9zZGsvZGlzdC9pbmRleC5qcz8zMDQ4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHNka18xID0gcmVxdWlyZShcIi4vc2RrXCIpO1xuZXhwb3J0cy5kZWZhdWx0ID0gc2RrXzEuV2ViQXBwO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@twa-dev/sdk/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@twa-dev/sdk/dist/sdk.js":
/*!***********************************************!*\
  !*** ./node_modules/@twa-dev/sdk/dist/sdk.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WebApp = void 0;\n__webpack_require__(/*! ./telegram-web-apps */ \"(ssr)/./node_modules/@twa-dev/sdk/dist/telegram-web-apps.js\");\nvar telegramWindow = window;\nexports.WebApp = telegramWindow.Telegram.WebApp;\n//# sourceMappingURL=sdk.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR3YS1kZXYvc2RrL2Rpc3Qvc2RrLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGNBQWM7QUFDZCxtQkFBTyxDQUFDLHdGQUFxQjtBQUM3QjtBQUNBLGNBQWM7QUFDZCIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb2plY3RzLy4vbm9kZV9tb2R1bGVzL0B0d2EtZGV2L3Nkay9kaXN0L3Nkay5qcz9kNDgwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5XZWJBcHAgPSB2b2lkIDA7XG5yZXF1aXJlKFwiLi90ZWxlZ3JhbS13ZWItYXBwc1wiKTtcbnZhciB0ZWxlZ3JhbVdpbmRvdyA9IHdpbmRvdztcbmV4cG9ydHMuV2ViQXBwID0gdGVsZWdyYW1XaW5kb3cuVGVsZWdyYW0uV2ViQXBwO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2RrLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@twa-dev/sdk/dist/sdk.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@twa-dev/sdk/dist/telegram-web-apps.js":
/*!*************************************************************!*\
  !*** ./node_modules/@twa-dev/sdk/dist/telegram-web-apps.js ***!
  \*************************************************************/
/***/ (() => {

eval("\n// WebView\n(function () {\n    var eventHandlers = {};\n    var locationHash = '';\n    try {\n        locationHash = location.hash.toString();\n    }\n    catch (e) { }\n    var initParams = urlParseHashParams(locationHash);\n    var storedParams = sessionStorageGet('initParams');\n    if (storedParams) {\n        for (var key in storedParams) {\n            if (typeof initParams[key] === 'undefined') {\n                initParams[key] = storedParams[key];\n            }\n        }\n    }\n    sessionStorageSet('initParams', initParams);\n    var isIframe = false, iFrameStyle;\n    try {\n        isIframe = (window.parent != null && window != window.parent);\n        if (isIframe) {\n            window.addEventListener('message', function (event) {\n                if (event.source !== window.parent)\n                    return;\n                try {\n                    var dataParsed = JSON.parse(event.data);\n                }\n                catch (e) {\n                    return;\n                }\n                if (!dataParsed || !dataParsed.eventType) {\n                    return;\n                }\n                if (dataParsed.eventType == 'set_custom_style') {\n                    if (event.origin === 'https://web.telegram.org') {\n                        iFrameStyle.innerHTML = dataParsed.eventData;\n                    }\n                }\n                else if (dataParsed.eventType == 'reload_iframe') {\n                    try {\n                        window.parent.postMessage(JSON.stringify({ eventType: 'iframe_will_reload' }), '*');\n                    }\n                    catch (e) { }\n                    location.reload();\n                }\n                else {\n                    receiveEvent(dataParsed.eventType, dataParsed.eventData);\n                }\n            });\n            iFrameStyle = document.createElement('style');\n            document.head.appendChild(iFrameStyle);\n            try {\n                window.parent.postMessage(JSON.stringify({ eventType: 'iframe_ready', eventData: { reload_supported: true } }), '*');\n            }\n            catch (e) { }\n        }\n    }\n    catch (e) { }\n    function urlSafeDecode(urlencoded) {\n        try {\n            urlencoded = urlencoded.replace(/\\+/g, '%20');\n            return decodeURIComponent(urlencoded);\n        }\n        catch (e) {\n            return urlencoded;\n        }\n    }\n    function urlParseHashParams(locationHash) {\n        locationHash = locationHash.replace(/^#/, '');\n        var params = {};\n        if (!locationHash.length) {\n            return params;\n        }\n        if (locationHash.indexOf('=') < 0 && locationHash.indexOf('?') < 0) {\n            params._path = urlSafeDecode(locationHash);\n            return params;\n        }\n        var qIndex = locationHash.indexOf('?');\n        if (qIndex >= 0) {\n            var pathParam = locationHash.substr(0, qIndex);\n            params._path = urlSafeDecode(pathParam);\n            locationHash = locationHash.substr(qIndex + 1);\n        }\n        var query_params = urlParseQueryString(locationHash);\n        for (var k in query_params) {\n            params[k] = query_params[k];\n        }\n        return params;\n    }\n    function urlParseQueryString(queryString) {\n        var params = {};\n        if (!queryString.length) {\n            return params;\n        }\n        var queryStringParams = queryString.split('&');\n        var i, param, paramName, paramValue;\n        for (i = 0; i < queryStringParams.length; i++) {\n            param = queryStringParams[i].split('=');\n            paramName = urlSafeDecode(param[0]);\n            paramValue = param[1] == null ? null : urlSafeDecode(param[1]);\n            params[paramName] = paramValue;\n        }\n        return params;\n    }\n    // Telegram apps will implement this logic to add service params (e.g. tgShareScoreUrl) to game URL\n    function urlAppendHashParams(url, addHash) {\n        // url looks like 'https://game.com/path?query=1#hash'\n        // addHash looks like 'tgShareScoreUrl=' + encodeURIComponent('tgb://share_game_score?hash=very_long_hash123')\n        var ind = url.indexOf('#');\n        if (ind < 0) {\n            // https://game.com/path -> https://game.com/path#tgShareScoreUrl=etc\n            return url + '#' + addHash;\n        }\n        var curHash = url.substr(ind + 1);\n        if (curHash.indexOf('=') >= 0 || curHash.indexOf('?') >= 0) {\n            // https://game.com/#hash=1 -> https://game.com/#hash=1&tgShareScoreUrl=etc\n            // https://game.com/#path?query -> https://game.com/#path?query&tgShareScoreUrl=etc\n            return url + '&' + addHash;\n        }\n        // https://game.com/#hash -> https://game.com/#hash?tgShareScoreUrl=etc\n        if (curHash.length > 0) {\n            return url + '?' + addHash;\n        }\n        // https://game.com/# -> https://game.com/#tgShareScoreUrl=etc\n        return url + addHash;\n    }\n    function postEvent(eventType, callback, eventData) {\n        if (!callback) {\n            callback = function () { };\n        }\n        if (eventData === undefined) {\n            eventData = '';\n        }\n        console.log('[Telegram.WebView] > postEvent', eventType, eventData);\n        if (window.TelegramWebviewProxy !== undefined) {\n            TelegramWebviewProxy.postEvent(eventType, JSON.stringify(eventData));\n            callback();\n        }\n        else if (window.external && 'notify' in window.external) {\n            window.external.notify(JSON.stringify({ eventType: eventType, eventData: eventData }));\n            callback();\n        }\n        else if (isIframe) {\n            try {\n                var trustedTarget = 'https://web.telegram.org';\n                // For now we don't restrict target, for testing purposes\n                trustedTarget = '*';\n                window.parent.postMessage(JSON.stringify({ eventType: eventType, eventData: eventData }), trustedTarget);\n                callback();\n            }\n            catch (e) {\n                callback(e);\n            }\n        }\n        else {\n            callback({ notAvailable: true });\n        }\n    }\n    ;\n    function receiveEvent(eventType, eventData) {\n        console.log('[Telegram.WebView] < receiveEvent', eventType, eventData);\n        callEventCallbacks(eventType, function (callback) {\n            callback(eventType, eventData);\n        });\n    }\n    function callEventCallbacks(eventType, func) {\n        var curEventHandlers = eventHandlers[eventType];\n        if (curEventHandlers === undefined ||\n            !curEventHandlers.length) {\n            return;\n        }\n        for (var i = 0; i < curEventHandlers.length; i++) {\n            try {\n                func(curEventHandlers[i]);\n            }\n            catch (e) { }\n        }\n    }\n    function onEvent(eventType, callback) {\n        if (eventHandlers[eventType] === undefined) {\n            eventHandlers[eventType] = [];\n        }\n        var index = eventHandlers[eventType].indexOf(callback);\n        if (index === -1) {\n            eventHandlers[eventType].push(callback);\n        }\n    }\n    ;\n    function offEvent(eventType, callback) {\n        if (eventHandlers[eventType] === undefined) {\n            return;\n        }\n        var index = eventHandlers[eventType].indexOf(callback);\n        if (index === -1) {\n            return;\n        }\n        eventHandlers[eventType].splice(index, 1);\n    }\n    ;\n    function openProtoUrl(url) {\n        if (!url.match(/^(web\\+)?tgb?:\\/\\/./)) {\n            return false;\n        }\n        var useIframe = navigator.userAgent.match(/iOS|iPhone OS|iPhone|iPod|iPad/i) ? true : false;\n        if (useIframe) {\n            var iframeContEl = document.getElementById('tgme_frame_cont') || document.body;\n            var iframeEl = document.createElement('iframe');\n            iframeContEl.appendChild(iframeEl);\n            var pageHidden = false;\n            var enableHidden = function () {\n                pageHidden = true;\n            };\n            window.addEventListener('pagehide', enableHidden, false);\n            window.addEventListener('blur', enableHidden, false);\n            if (iframeEl !== null) {\n                iframeEl.src = url;\n            }\n            setTimeout(function () {\n                if (!pageHidden) {\n                    window.location = url;\n                }\n                window.removeEventListener('pagehide', enableHidden, false);\n                window.removeEventListener('blur', enableHidden, false);\n            }, 2000);\n        }\n        else {\n            window.location = url;\n        }\n        return true;\n    }\n    function sessionStorageSet(key, value) {\n        try {\n            window.sessionStorage.setItem('__telegram__' + key, JSON.stringify(value));\n            return true;\n        }\n        catch (e) { }\n        return false;\n    }\n    function sessionStorageGet(key) {\n        try {\n            return JSON.parse(window.sessionStorage.getItem('__telegram__' + key));\n        }\n        catch (e) { }\n        return null;\n    }\n    if (!window.Telegram) {\n        window.Telegram = {};\n    }\n    window.Telegram.WebView = {\n        initParams: initParams,\n        isIframe: isIframe,\n        onEvent: onEvent,\n        offEvent: offEvent,\n        postEvent: postEvent,\n        receiveEvent: receiveEvent,\n        callEventCallbacks: callEventCallbacks\n    };\n    window.Telegram.Utils = {\n        urlSafeDecode: urlSafeDecode,\n        urlParseQueryString: urlParseQueryString,\n        urlParseHashParams: urlParseHashParams,\n        urlAppendHashParams: urlAppendHashParams,\n        sessionStorageSet: sessionStorageSet,\n        sessionStorageGet: sessionStorageGet\n    };\n    // For Windows Phone app\n    window.TelegramGameProxy_receiveEvent = receiveEvent;\n    // App backward compatibility\n    window.TelegramGameProxy = {\n        receiveEvent: receiveEvent\n    };\n})();\n// WebApp\n(function () {\n    var Utils = window.Telegram.Utils;\n    var WebView = window.Telegram.WebView;\n    var initParams = WebView.initParams;\n    var isIframe = WebView.isIframe;\n    var WebApp = {};\n    var webAppInitData = '', webAppInitDataUnsafe = {};\n    var themeParams = {}, colorScheme = 'light';\n    var webAppVersion = '6.0';\n    var webAppPlatform = 'unknown';\n    if (initParams.tgWebAppData && initParams.tgWebAppData.length) {\n        webAppInitData = initParams.tgWebAppData;\n        webAppInitDataUnsafe = Utils.urlParseQueryString(webAppInitData);\n        for (var key in webAppInitDataUnsafe) {\n            var val = webAppInitDataUnsafe[key];\n            try {\n                if (val.substr(0, 1) == '{' && val.substr(-1) == '}' ||\n                    val.substr(0, 1) == '[' && val.substr(-1) == ']') {\n                    webAppInitDataUnsafe[key] = JSON.parse(val);\n                }\n            }\n            catch (e) { }\n        }\n    }\n    if (initParams.tgWebAppThemeParams && initParams.tgWebAppThemeParams.length) {\n        var themeParamsRaw = initParams.tgWebAppThemeParams;\n        try {\n            var theme_params = JSON.parse(themeParamsRaw);\n            if (theme_params) {\n                setThemeParams(theme_params);\n            }\n        }\n        catch (e) { }\n    }\n    var theme_params = Utils.sessionStorageGet('themeParams');\n    if (theme_params) {\n        setThemeParams(theme_params);\n    }\n    if (initParams.tgWebAppVersion) {\n        webAppVersion = initParams.tgWebAppVersion;\n    }\n    if (initParams.tgWebAppPlatform) {\n        webAppPlatform = initParams.tgWebAppPlatform;\n    }\n    function onThemeChanged(eventType, eventData) {\n        if (eventData.theme_params) {\n            setThemeParams(eventData.theme_params);\n            window.Telegram.WebApp.MainButton.setParams({});\n            window.Telegram.WebApp.SecondaryButton.setParams({});\n            updateHeaderColor();\n            updateBackgroundColor();\n            updateBottomBarColor();\n            receiveWebViewEvent('themeChanged');\n        }\n    }\n    var lastWindowHeight = window.innerHeight;\n    function onViewportChanged(eventType, eventData) {\n        if (eventData.height) {\n            window.removeEventListener('resize', onWindowResize);\n            setViewportHeight(eventData);\n        }\n    }\n    function onWindowResize(e) {\n        if (lastWindowHeight != window.innerHeight) {\n            lastWindowHeight = window.innerHeight;\n            receiveWebViewEvent('viewportChanged', {\n                isStateStable: true\n            });\n        }\n    }\n    function linkHandler(e) {\n        if (e.metaKey || e.ctrlKey)\n            return;\n        var el = e.target;\n        while (el.tagName != 'A' && el.parentNode) {\n            el = el.parentNode;\n        }\n        if (el.tagName == 'A' &&\n            el.target != '_blank' &&\n            (el.protocol == 'http:' || el.protocol == 'https:') &&\n            el.hostname == 't.me') {\n            WebApp.openTgLink(el.href);\n            e.preventDefault();\n        }\n    }\n    function strTrim(str) {\n        return str.toString().replace(/^\\s+|\\s+$/g, '');\n    }\n    function receiveWebViewEvent(eventType) {\n        var args = Array.prototype.slice.call(arguments);\n        eventType = args.shift();\n        WebView.callEventCallbacks('webview:' + eventType, function (callback) {\n            callback.apply(WebApp, args);\n        });\n    }\n    function onWebViewEvent(eventType, callback) {\n        WebView.onEvent('webview:' + eventType, callback);\n    }\n    ;\n    function offWebViewEvent(eventType, callback) {\n        WebView.offEvent('webview:' + eventType, callback);\n    }\n    ;\n    function setCssProperty(name, value) {\n        var root = document.documentElement;\n        if (root && root.style && root.style.setProperty) {\n            root.style.setProperty('--tg-' + name, value);\n        }\n    }\n    function setThemeParams(theme_params) {\n        // temp iOS fix\n        if (theme_params.bg_color == '#1c1c1d' &&\n            theme_params.bg_color == theme_params.secondary_bg_color) {\n            theme_params.secondary_bg_color = '#2c2c2e';\n        }\n        var color;\n        for (var key in theme_params) {\n            if (color = parseColorToHex(theme_params[key])) {\n                themeParams[key] = color;\n                if (key == 'bg_color') {\n                    colorScheme = isColorDark(color) ? 'dark' : 'light';\n                    setCssProperty('color-scheme', colorScheme);\n                }\n                key = 'theme-' + key.split('_').join('-');\n                setCssProperty(key, color);\n            }\n        }\n        Utils.sessionStorageSet('themeParams', themeParams);\n    }\n    var webAppCallbacks = {};\n    function generateCallbackId(len) {\n        var tries = 100;\n        while (--tries) {\n            var id = '', chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', chars_len = chars.length;\n            for (var i = 0; i < len; i++) {\n                id += chars[Math.floor(Math.random() * chars_len)];\n            }\n            if (!webAppCallbacks[id]) {\n                webAppCallbacks[id] = {};\n                return id;\n            }\n        }\n        throw Error('WebAppCallbackIdGenerateFailed');\n    }\n    var viewportHeight = false, viewportStableHeight = false, isExpanded = true;\n    function setViewportHeight(data) {\n        if (typeof data !== 'undefined') {\n            isExpanded = !!data.is_expanded;\n            viewportHeight = data.height;\n            if (data.is_state_stable) {\n                viewportStableHeight = data.height;\n            }\n            receiveWebViewEvent('viewportChanged', {\n                isStateStable: !!data.is_state_stable\n            });\n        }\n        var height, stable_height;\n        if (viewportHeight !== false) {\n            height = (viewportHeight - bottomBarHeight) + 'px';\n        }\n        else {\n            height = bottomBarHeight ? 'calc(100vh - ' + bottomBarHeight + 'px)' : '100vh';\n        }\n        if (viewportStableHeight !== false) {\n            stable_height = (viewportStableHeight - bottomBarHeight) + 'px';\n        }\n        else {\n            stable_height = bottomBarHeight ? 'calc(100vh - ' + bottomBarHeight + 'px)' : '100vh';\n        }\n        setCssProperty('viewport-height', height);\n        setCssProperty('viewport-stable-height', stable_height);\n    }\n    var isClosingConfirmationEnabled = false;\n    function setClosingConfirmation(need_confirmation) {\n        if (!versionAtLeast('6.2')) {\n            console.warn('[Telegram.WebApp] Closing confirmation is not supported in version ' + webAppVersion);\n            return;\n        }\n        isClosingConfirmationEnabled = !!need_confirmation;\n        WebView.postEvent('web_app_setup_closing_behavior', false, { need_confirmation: isClosingConfirmationEnabled });\n    }\n    var isVerticalSwipesEnabled = true;\n    function toggleVerticalSwipes(enable_swipes) {\n        if (!versionAtLeast('7.7')) {\n            console.warn('[Telegram.WebApp] Changing swipes behavior is not supported in version ' + webAppVersion);\n            return;\n        }\n        isVerticalSwipesEnabled = !!enable_swipes;\n        WebView.postEvent('web_app_setup_swipe_behavior', false, { allow_vertical_swipe: isVerticalSwipesEnabled });\n    }\n    var headerColorKey = 'bg_color', headerColor = null;\n    function getHeaderColor() {\n        if (headerColorKey == 'secondary_bg_color') {\n            return themeParams.secondary_bg_color;\n        }\n        else if (headerColorKey == 'bg_color') {\n            return themeParams.bg_color;\n        }\n        return headerColor;\n    }\n    function setHeaderColor(color) {\n        if (!versionAtLeast('6.1')) {\n            console.warn('[Telegram.WebApp] Header color is not supported in version ' + webAppVersion);\n            return;\n        }\n        if (!versionAtLeast('6.9')) {\n            if (themeParams.bg_color &&\n                themeParams.bg_color == color) {\n                color = 'bg_color';\n            }\n            else if (themeParams.secondary_bg_color &&\n                themeParams.secondary_bg_color == color) {\n                color = 'secondary_bg_color';\n            }\n        }\n        var head_color = null, color_key = null;\n        if (color == 'bg_color' || color == 'secondary_bg_color') {\n            color_key = color;\n        }\n        else if (versionAtLeast('6.9')) {\n            head_color = parseColorToHex(color);\n            if (!head_color) {\n                console.error('[Telegram.WebApp] Header color format is invalid', color);\n                throw Error('WebAppHeaderColorInvalid');\n            }\n        }\n        if (!versionAtLeast('6.9') &&\n            color_key != 'bg_color' &&\n            color_key != 'secondary_bg_color') {\n            console.error('[Telegram.WebApp] Header color key should be one of Telegram.WebApp.themeParams.bg_color, Telegram.WebApp.themeParams.secondary_bg_color, \\'bg_color\\', \\'secondary_bg_color\\'', color);\n            throw Error('WebAppHeaderColorKeyInvalid');\n        }\n        headerColorKey = color_key;\n        headerColor = head_color;\n        updateHeaderColor();\n    }\n    var appHeaderColorKey = null, appHeaderColor = null;\n    function updateHeaderColor() {\n        if (appHeaderColorKey != headerColorKey ||\n            appHeaderColor != headerColor) {\n            appHeaderColorKey = headerColorKey;\n            appHeaderColor = headerColor;\n            if (appHeaderColor) {\n                WebView.postEvent('web_app_set_header_color', false, { color: headerColor });\n            }\n            else {\n                WebView.postEvent('web_app_set_header_color', false, { color_key: headerColorKey });\n            }\n        }\n    }\n    var backgroundColor = 'bg_color';\n    function getBackgroundColor() {\n        if (backgroundColor == 'secondary_bg_color') {\n            return themeParams.secondary_bg_color;\n        }\n        else if (backgroundColor == 'bg_color') {\n            return themeParams.bg_color;\n        }\n        return backgroundColor;\n    }\n    function setBackgroundColor(color) {\n        if (!versionAtLeast('6.1')) {\n            console.warn('[Telegram.WebApp] Background color is not supported in version ' + webAppVersion);\n            return;\n        }\n        var bg_color;\n        if (color == 'bg_color' || color == 'secondary_bg_color') {\n            bg_color = color;\n        }\n        else {\n            bg_color = parseColorToHex(color);\n            if (!bg_color) {\n                console.error('[Telegram.WebApp] Background color format is invalid', color);\n                throw Error('WebAppBackgroundColorInvalid');\n            }\n        }\n        backgroundColor = bg_color;\n        updateBackgroundColor();\n    }\n    var appBackgroundColor = null;\n    function updateBackgroundColor() {\n        var color = getBackgroundColor();\n        if (appBackgroundColor != color) {\n            appBackgroundColor = color;\n            WebView.postEvent('web_app_set_background_color', false, { color: color });\n        }\n    }\n    var bottomBarColor = 'bottom_bar_bg_color';\n    function getBottomBarColor() {\n        if (bottomBarColor == 'bottom_bar_bg_color') {\n            return themeParams.bottom_bar_bg_color || themeParams.secondary_bg_color || '#ffffff';\n        }\n        else if (bottomBarColor == 'secondary_bg_color') {\n            return themeParams.secondary_bg_color;\n        }\n        else if (bottomBarColor == 'bg_color') {\n            return themeParams.bg_color;\n        }\n        return bottomBarColor;\n    }\n    function setBottomBarColor(color) {\n        if (!versionAtLeast('7.10')) {\n            console.warn('[Telegram.WebApp] Bottom bar color is not supported in version ' + webAppVersion);\n            return;\n        }\n        var bg_color;\n        if (color == 'bg_color' || color == 'secondary_bg_color' || color == 'bottom_bar_bg_color') {\n            bg_color = color;\n        }\n        else {\n            bg_color = parseColorToHex(color);\n            if (!bg_color) {\n                console.error('[Telegram.WebApp] Bottom bar color format is invalid', color);\n                throw Error('WebAppBottomBarColorInvalid');\n            }\n        }\n        bottomBarColor = bg_color;\n        updateBottomBarColor();\n        window.Telegram.WebApp.SecondaryButton.setParams({});\n    }\n    var appBottomBarColor = null;\n    function updateBottomBarColor() {\n        var color = getBottomBarColor();\n        if (appBottomBarColor != color) {\n            appBottomBarColor = color;\n            WebView.postEvent('web_app_set_bottom_bar_color', false, { color: color });\n        }\n        if (initParams.tgWebAppDebug) {\n            updateDebugBottomBar();\n        }\n    }\n    function parseColorToHex(color) {\n        color += '';\n        var match;\n        if (match = /^\\s*#([0-9a-f]{6})\\s*$/i.exec(color)) {\n            return '#' + match[1].toLowerCase();\n        }\n        else if (match = /^\\s*#([0-9a-f])([0-9a-f])([0-9a-f])\\s*$/i.exec(color)) {\n            return ('#' + match[1] + match[1] + match[2] + match[2] + match[3] + match[3]).toLowerCase();\n        }\n        else if (match = /^\\s*rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+\\.{0,1}\\d*))?\\)\\s*$/.exec(color)) {\n            var r = parseInt(match[1]), g = parseInt(match[2]), b = parseInt(match[3]);\n            r = (r < 16 ? '0' : '') + r.toString(16);\n            g = (g < 16 ? '0' : '') + g.toString(16);\n            b = (b < 16 ? '0' : '') + b.toString(16);\n            return '#' + r + g + b;\n        }\n        return false;\n    }\n    function isColorDark(rgb) {\n        rgb = rgb.replace(/[\\s#]/g, '');\n        if (rgb.length == 3) {\n            rgb = rgb[0] + rgb[0] + rgb[1] + rgb[1] + rgb[2] + rgb[2];\n        }\n        var r = parseInt(rgb.substr(0, 2), 16);\n        var g = parseInt(rgb.substr(2, 2), 16);\n        var b = parseInt(rgb.substr(4, 2), 16);\n        var hsp = Math.sqrt(0.299 * (r * r) + 0.587 * (g * g) + 0.114 * (b * b));\n        return hsp < 120;\n    }\n    function versionCompare(v1, v2) {\n        if (typeof v1 !== 'string')\n            v1 = '';\n        if (typeof v2 !== 'string')\n            v2 = '';\n        v1 = v1.replace(/^\\s+|\\s+$/g, '').split('.');\n        v2 = v2.replace(/^\\s+|\\s+$/g, '').split('.');\n        var a = Math.max(v1.length, v2.length), i, p1, p2;\n        for (i = 0; i < a; i++) {\n            p1 = parseInt(v1[i]) || 0;\n            p2 = parseInt(v2[i]) || 0;\n            if (p1 == p2)\n                continue;\n            if (p1 > p2)\n                return 1;\n            return -1;\n        }\n        return 0;\n    }\n    function versionAtLeast(ver) {\n        return versionCompare(webAppVersion, ver) >= 0;\n    }\n    function byteLength(str) {\n        if (window.Blob) {\n            try {\n                return new Blob([str]).size;\n            }\n            catch (e) { }\n        }\n        var s = str.length;\n        for (var i = str.length - 1; i >= 0; i--) {\n            var code = str.charCodeAt(i);\n            if (code > 0x7f && code <= 0x7ff)\n                s++;\n            else if (code > 0x7ff && code <= 0xffff)\n                s += 2;\n            if (code >= 0xdc00 && code <= 0xdfff)\n                i--;\n        }\n        return s;\n    }\n    var BackButton = (function () {\n        var isVisible = false;\n        var backButton = {};\n        Object.defineProperty(backButton, 'isVisible', {\n            set: function (val) { setParams({ is_visible: val }); },\n            get: function () { return isVisible; },\n            enumerable: true\n        });\n        var curButtonState = null;\n        WebView.onEvent('back_button_pressed', onBackButtonPressed);\n        function onBackButtonPressed() {\n            receiveWebViewEvent('backButtonClicked');\n        }\n        function buttonParams() {\n            return { is_visible: isVisible };\n        }\n        function buttonState(btn_params) {\n            if (typeof btn_params === 'undefined') {\n                btn_params = buttonParams();\n            }\n            return JSON.stringify(btn_params);\n        }\n        function buttonCheckVersion() {\n            if (!versionAtLeast('6.1')) {\n                console.warn('[Telegram.WebApp] BackButton is not supported in version ' + webAppVersion);\n                return false;\n            }\n            return true;\n        }\n        function updateButton() {\n            var btn_params = buttonParams();\n            var btn_state = buttonState(btn_params);\n            if (curButtonState === btn_state) {\n                return;\n            }\n            curButtonState = btn_state;\n            WebView.postEvent('web_app_setup_back_button', false, btn_params);\n        }\n        function setParams(params) {\n            if (!buttonCheckVersion()) {\n                return backButton;\n            }\n            if (typeof params.is_visible !== 'undefined') {\n                isVisible = !!params.is_visible;\n            }\n            updateButton();\n            return backButton;\n        }\n        backButton.onClick = function (callback) {\n            if (buttonCheckVersion()) {\n                onWebViewEvent('backButtonClicked', callback);\n            }\n            return backButton;\n        };\n        backButton.offClick = function (callback) {\n            if (buttonCheckVersion()) {\n                offWebViewEvent('backButtonClicked', callback);\n            }\n            return backButton;\n        };\n        backButton.show = function () {\n            return setParams({ is_visible: true });\n        };\n        backButton.hide = function () {\n            return setParams({ is_visible: false });\n        };\n        return backButton;\n    })();\n    var debugBottomBar = null, debugBottomBarBtns = {}, bottomBarHeight = 0;\n    if (initParams.tgWebAppDebug) {\n        debugBottomBar = document.createElement('tg-bottom-bar');\n        var debugBottomBarStyle = {\n            display: 'flex',\n            gap: '7px',\n            font: '600 14px/18px sans-serif',\n            width: '100%',\n            background: getBottomBarColor(),\n            position: 'fixed',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            margin: '0',\n            padding: '7px',\n            textAlign: 'center',\n            boxSizing: 'border-box',\n            zIndex: '10000'\n        };\n        for (var k in debugBottomBarStyle) {\n            debugBottomBar.style[k] = debugBottomBarStyle[k];\n        }\n        document.addEventListener('DOMContentLoaded', function onDomLoaded(event) {\n            document.removeEventListener('DOMContentLoaded', onDomLoaded);\n            document.body.appendChild(debugBottomBar);\n        });\n        var animStyle = document.createElement('style');\n        animStyle.innerHTML = 'tg-bottom-button.shine { position: relative; overflow: hidden; } tg-bottom-button.shine:before { content:\"\"; position: absolute; top: 0; width: 100%; height: 100%; background: linear-gradient(120deg, transparent, rgba(255, 255, 255, .2), transparent); animation: tg-bottom-button-shine 5s ease-in-out infinite; } @-webkit-keyframes tg-bottom-button-shine { 0% {left: -100%;} 12%,100% {left: 100%}} @keyframes tg-bottom-button-shine { 0% {left: -100%;} 12%,100% {left: 100%}}';\n        debugBottomBar.appendChild(animStyle);\n    }\n    function updateDebugBottomBar() {\n        var mainBtn = debugBottomBarBtns.main._bottomButton;\n        var secondaryBtn = debugBottomBarBtns.secondary._bottomButton;\n        if (mainBtn.isVisible || secondaryBtn.isVisible) {\n            debugBottomBar.style.display = 'flex';\n            bottomBarHeight = 58;\n            if (mainBtn.isVisible && secondaryBtn.isVisible) {\n                if (secondaryBtn.position == 'top') {\n                    debugBottomBar.style.flexDirection = 'column-reverse';\n                    bottomBarHeight += 51;\n                }\n                else if (secondaryBtn.position == 'bottom') {\n                    debugBottomBar.style.flexDirection = 'column';\n                    bottomBarHeight += 51;\n                }\n                else if (secondaryBtn.position == 'left') {\n                    debugBottomBar.style.flexDirection = 'row-reverse';\n                }\n                else if (secondaryBtn.position == 'right') {\n                    debugBottomBar.style.flexDirection = 'row';\n                }\n            }\n        }\n        else {\n            debugBottomBar.style.display = 'none';\n            bottomBarHeight = 0;\n        }\n        debugBottomBar.style.background = getBottomBarColor();\n        if (document.documentElement) {\n            document.documentElement.style.boxSizing = 'border-box';\n            document.documentElement.style.paddingBottom = bottomBarHeight + 'px';\n        }\n        setViewportHeight();\n    }\n    var BottomButtonConstructor = function (type) {\n        var isMainButton = (type == 'main');\n        if (isMainButton) {\n            var setupFnName = 'web_app_setup_main_button';\n            var tgEventName = 'main_button_pressed';\n            var webViewEventName = 'mainButtonClicked';\n            var buttonTextDefault = 'Continue';\n            var buttonColorDefault = function () { return themeParams.button_color || '#2481cc'; };\n            var buttonTextColorDefault = function () { return themeParams.button_text_color || '#ffffff'; };\n        }\n        else {\n            var setupFnName = 'web_app_setup_secondary_button';\n            var tgEventName = 'secondary_button_pressed';\n            var webViewEventName = 'secondaryButtonClicked';\n            var buttonTextDefault = 'Cancel';\n            var buttonColorDefault = function () { return getBottomBarColor(); };\n            var buttonTextColorDefault = function () { return themeParams.button_color || '#2481cc'; };\n        }\n        var isVisible = false;\n        var isActive = true;\n        var hasShineEffect = false;\n        var isProgressVisible = false;\n        var buttonType = type;\n        var buttonText = buttonTextDefault;\n        var buttonColor = false;\n        var buttonTextColor = false;\n        var buttonPosition = 'left';\n        var bottomButton = {};\n        Object.defineProperty(bottomButton, 'type', {\n            get: function () { return buttonType; },\n            enumerable: true\n        });\n        Object.defineProperty(bottomButton, 'text', {\n            set: function (val) { bottomButton.setParams({ text: val }); },\n            get: function () { return buttonText; },\n            enumerable: true\n        });\n        Object.defineProperty(bottomButton, 'color', {\n            set: function (val) { bottomButton.setParams({ color: val }); },\n            get: function () { return buttonColor || buttonColorDefault(); },\n            enumerable: true\n        });\n        Object.defineProperty(bottomButton, 'textColor', {\n            set: function (val) { bottomButton.setParams({ text_color: val }); },\n            get: function () { return buttonTextColor || buttonTextColorDefault(); },\n            enumerable: true\n        });\n        Object.defineProperty(bottomButton, 'isVisible', {\n            set: function (val) { bottomButton.setParams({ is_visible: val }); },\n            get: function () { return isVisible; },\n            enumerable: true\n        });\n        Object.defineProperty(bottomButton, 'isProgressVisible', {\n            get: function () { return isProgressVisible; },\n            enumerable: true\n        });\n        Object.defineProperty(bottomButton, 'isActive', {\n            set: function (val) { bottomButton.setParams({ is_active: val }); },\n            get: function () { return isActive; },\n            enumerable: true\n        });\n        Object.defineProperty(bottomButton, 'hasShineEffect', {\n            set: function (val) { bottomButton.setParams({ has_shine_effect: val }); },\n            get: function () { return hasShineEffect; },\n            enumerable: true\n        });\n        if (!isMainButton) {\n            Object.defineProperty(bottomButton, 'position', {\n                set: function (val) { bottomButton.setParams({ position: val }); },\n                get: function () { return buttonPosition; },\n                enumerable: true\n            });\n        }\n        var curButtonState = null;\n        WebView.onEvent(tgEventName, onBottomButtonPressed);\n        var debugBtn = null;\n        if (initParams.tgWebAppDebug) {\n            debugBtn = document.createElement('tg-bottom-button');\n            var debugBtnStyle = {\n                display: 'none',\n                width: '100%',\n                height: '44px',\n                borderRadius: '0',\n                background: 'no-repeat right center',\n                padding: '13px 15px',\n                textAlign: 'center',\n                boxSizing: 'border-box'\n            };\n            for (var k in debugBtnStyle) {\n                debugBtn.style[k] = debugBtnStyle[k];\n            }\n            debugBottomBar.appendChild(debugBtn);\n            debugBtn.addEventListener('click', onBottomButtonPressed, false);\n            debugBtn._bottomButton = bottomButton;\n            debugBottomBarBtns[type] = debugBtn;\n        }\n        function onBottomButtonPressed() {\n            if (isActive) {\n                receiveWebViewEvent(webViewEventName);\n            }\n        }\n        function buttonParams() {\n            var color = bottomButton.color;\n            var text_color = bottomButton.textColor;\n            if (isVisible) {\n                var params = {\n                    is_visible: true,\n                    is_active: isActive,\n                    is_progress_visible: isProgressVisible,\n                    text: buttonText,\n                    color: color,\n                    text_color: text_color,\n                    has_shine_effect: hasShineEffect && isActive && !isProgressVisible\n                };\n                if (!isMainButton) {\n                    params.position = buttonPosition;\n                }\n            }\n            else {\n                var params = {\n                    is_visible: false\n                };\n            }\n            return params;\n        }\n        function buttonState(btn_params) {\n            if (typeof btn_params === 'undefined') {\n                btn_params = buttonParams();\n            }\n            return JSON.stringify(btn_params);\n        }\n        function updateButton() {\n            var btn_params = buttonParams();\n            var btn_state = buttonState(btn_params);\n            if (curButtonState === btn_state) {\n                return;\n            }\n            curButtonState = btn_state;\n            WebView.postEvent(setupFnName, false, btn_params);\n            if (initParams.tgWebAppDebug) {\n                updateDebugButton(btn_params);\n            }\n        }\n        function updateDebugButton(btn_params) {\n            if (btn_params.is_visible) {\n                debugBtn.style.display = 'block';\n                debugBtn.style.opacity = btn_params.is_active ? '1' : '0.8';\n                debugBtn.style.cursor = btn_params.is_active ? 'pointer' : 'auto';\n                debugBtn.disabled = !btn_params.is_active;\n                debugBtn.innerText = btn_params.text;\n                debugBtn.className = btn_params.has_shine_effect ? 'shine' : '';\n                debugBtn.style.backgroundImage = btn_params.is_progress_visible ? \"url('data:image/svg+xml,\" + encodeURIComponent('<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewport=\"0 0 48 48\" width=\"48px\" height=\"48px\"><circle cx=\"50%\" cy=\"50%\" stroke=\"' + btn_params.text_color + '\" stroke-width=\"2.25\" stroke-linecap=\"round\" fill=\"none\" stroke-dashoffset=\"106\" r=\"9\" stroke-dasharray=\"56.52\" rotate=\"-90\"><animate attributeName=\"stroke-dashoffset\" attributeType=\"XML\" dur=\"360s\" from=\"0\" to=\"12500\" repeatCount=\"indefinite\"></animate><animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" dur=\"1s\" from=\"-90 24 24\" to=\"630 24 24\" repeatCount=\"indefinite\"></animateTransform></circle></svg>') + \"')\" : 'none';\n                debugBtn.style.backgroundColor = btn_params.color;\n                debugBtn.style.color = btn_params.text_color;\n            }\n            else {\n                debugBtn.style.display = 'none';\n            }\n            updateDebugBottomBar();\n        }\n        function setParams(params) {\n            if (typeof params.text !== 'undefined') {\n                var text = strTrim(params.text);\n                if (!text.length) {\n                    console.error('[Telegram.WebApp] Bottom button text is required', params.text);\n                    throw Error('WebAppBottomButtonParamInvalid');\n                }\n                if (text.length > 64) {\n                    console.error('[Telegram.WebApp] Bottom button text is too long', text);\n                    throw Error('WebAppBottomButtonParamInvalid');\n                }\n                buttonText = text;\n            }\n            if (typeof params.color !== 'undefined') {\n                if (params.color === false ||\n                    params.color === null) {\n                    buttonColor = false;\n                }\n                else {\n                    var color = parseColorToHex(params.color);\n                    if (!color) {\n                        console.error('[Telegram.WebApp] Bottom button color format is invalid', params.color);\n                        throw Error('WebAppBottomButtonParamInvalid');\n                    }\n                    buttonColor = color;\n                }\n            }\n            if (typeof params.text_color !== 'undefined') {\n                if (params.text_color === false ||\n                    params.text_color === null) {\n                    buttonTextColor = false;\n                }\n                else {\n                    var text_color = parseColorToHex(params.text_color);\n                    if (!text_color) {\n                        console.error('[Telegram.WebApp] Bottom button text color format is invalid', params.text_color);\n                        throw Error('WebAppBottomButtonParamInvalid');\n                    }\n                    buttonTextColor = text_color;\n                }\n            }\n            if (typeof params.is_visible !== 'undefined') {\n                if (params.is_visible &&\n                    !bottomButton.text.length) {\n                    console.error('[Telegram.WebApp] Bottom button text is required');\n                    throw Error('WebAppBottomButtonParamInvalid');\n                }\n                isVisible = !!params.is_visible;\n            }\n            if (typeof params.has_shine_effect !== 'undefined') {\n                hasShineEffect = !!params.has_shine_effect;\n            }\n            if (!isMainButton && typeof params.position !== 'undefined') {\n                if (params.position != 'left' && params.position != 'right' &&\n                    params.position != 'top' && params.position != 'bottom') {\n                    console.error('[Telegram.WebApp] Bottom button posiition is invalid', params.position);\n                    throw Error('WebAppBottomButtonParamInvalid');\n                }\n                buttonPosition = params.position;\n            }\n            if (typeof params.is_active !== 'undefined') {\n                isActive = !!params.is_active;\n            }\n            updateButton();\n            return bottomButton;\n        }\n        bottomButton.setText = function (text) {\n            return bottomButton.setParams({ text: text });\n        };\n        bottomButton.onClick = function (callback) {\n            onWebViewEvent(webViewEventName, callback);\n            return bottomButton;\n        };\n        bottomButton.offClick = function (callback) {\n            offWebViewEvent(webViewEventName, callback);\n            return bottomButton;\n        };\n        bottomButton.show = function () {\n            return bottomButton.setParams({ is_visible: true });\n        };\n        bottomButton.hide = function () {\n            return bottomButton.setParams({ is_visible: false });\n        };\n        bottomButton.enable = function () {\n            return bottomButton.setParams({ is_active: true });\n        };\n        bottomButton.disable = function () {\n            return bottomButton.setParams({ is_active: false });\n        };\n        bottomButton.showProgress = function (leaveActive) {\n            isActive = !!leaveActive;\n            isProgressVisible = true;\n            updateButton();\n            return bottomButton;\n        };\n        bottomButton.hideProgress = function () {\n            if (!bottomButton.isActive) {\n                isActive = true;\n            }\n            isProgressVisible = false;\n            updateButton();\n            return bottomButton;\n        };\n        bottomButton.setParams = setParams;\n        return bottomButton;\n    };\n    var MainButton = BottomButtonConstructor('main');\n    var SecondaryButton = BottomButtonConstructor('secondary');\n    var SettingsButton = (function () {\n        var isVisible = false;\n        var settingsButton = {};\n        Object.defineProperty(settingsButton, 'isVisible', {\n            set: function (val) { setParams({ is_visible: val }); },\n            get: function () { return isVisible; },\n            enumerable: true\n        });\n        var curButtonState = null;\n        WebView.onEvent('settings_button_pressed', onSettingsButtonPressed);\n        function onSettingsButtonPressed() {\n            receiveWebViewEvent('settingsButtonClicked');\n        }\n        function buttonParams() {\n            return { is_visible: isVisible };\n        }\n        function buttonState(btn_params) {\n            if (typeof btn_params === 'undefined') {\n                btn_params = buttonParams();\n            }\n            return JSON.stringify(btn_params);\n        }\n        function buttonCheckVersion() {\n            if (!versionAtLeast('6.10')) {\n                console.warn('[Telegram.WebApp] SettingsButton is not supported in version ' + webAppVersion);\n                return false;\n            }\n            return true;\n        }\n        function updateButton() {\n            var btn_params = buttonParams();\n            var btn_state = buttonState(btn_params);\n            if (curButtonState === btn_state) {\n                return;\n            }\n            curButtonState = btn_state;\n            WebView.postEvent('web_app_setup_settings_button', false, btn_params);\n        }\n        function setParams(params) {\n            if (!buttonCheckVersion()) {\n                return settingsButton;\n            }\n            if (typeof params.is_visible !== 'undefined') {\n                isVisible = !!params.is_visible;\n            }\n            updateButton();\n            return settingsButton;\n        }\n        settingsButton.onClick = function (callback) {\n            if (buttonCheckVersion()) {\n                onWebViewEvent('settingsButtonClicked', callback);\n            }\n            return settingsButton;\n        };\n        settingsButton.offClick = function (callback) {\n            if (buttonCheckVersion()) {\n                offWebViewEvent('settingsButtonClicked', callback);\n            }\n            return settingsButton;\n        };\n        settingsButton.show = function () {\n            return setParams({ is_visible: true });\n        };\n        settingsButton.hide = function () {\n            return setParams({ is_visible: false });\n        };\n        return settingsButton;\n    })();\n    var HapticFeedback = (function () {\n        var hapticFeedback = {};\n        function triggerFeedback(params) {\n            if (!versionAtLeast('6.1')) {\n                console.warn('[Telegram.WebApp] HapticFeedback is not supported in version ' + webAppVersion);\n                return hapticFeedback;\n            }\n            if (params.type == 'impact') {\n                if (params.impact_style != 'light' &&\n                    params.impact_style != 'medium' &&\n                    params.impact_style != 'heavy' &&\n                    params.impact_style != 'rigid' &&\n                    params.impact_style != 'soft') {\n                    console.error('[Telegram.WebApp] Haptic impact style is invalid', params.impact_style);\n                    throw Error('WebAppHapticImpactStyleInvalid');\n                }\n            }\n            else if (params.type == 'notification') {\n                if (params.notification_type != 'error' &&\n                    params.notification_type != 'success' &&\n                    params.notification_type != 'warning') {\n                    console.error('[Telegram.WebApp] Haptic notification type is invalid', params.notification_type);\n                    throw Error('WebAppHapticNotificationTypeInvalid');\n                }\n            }\n            else if (params.type == 'selection_change') {\n                // no params needed\n            }\n            else {\n                console.error('[Telegram.WebApp] Haptic feedback type is invalid', params.type);\n                throw Error('WebAppHapticFeedbackTypeInvalid');\n            }\n            WebView.postEvent('web_app_trigger_haptic_feedback', false, params);\n            return hapticFeedback;\n        }\n        hapticFeedback.impactOccurred = function (style) {\n            return triggerFeedback({ type: 'impact', impact_style: style });\n        };\n        hapticFeedback.notificationOccurred = function (type) {\n            return triggerFeedback({ type: 'notification', notification_type: type });\n        };\n        hapticFeedback.selectionChanged = function () {\n            return triggerFeedback({ type: 'selection_change' });\n        };\n        return hapticFeedback;\n    })();\n    var CloudStorage = (function () {\n        var cloudStorage = {};\n        function invokeStorageMethod(method, params, callback) {\n            if (!versionAtLeast('6.9')) {\n                console.error('[Telegram.WebApp] CloudStorage is not supported in version ' + webAppVersion);\n                throw Error('WebAppMethodUnsupported');\n            }\n            invokeCustomMethod(method, params, callback);\n            return cloudStorage;\n        }\n        cloudStorage.setItem = function (key, value, callback) {\n            return invokeStorageMethod('saveStorageValue', { key: key, value: value }, callback);\n        };\n        cloudStorage.getItem = function (key, callback) {\n            return cloudStorage.getItems([key], callback ? function (err, res) {\n                if (err)\n                    callback(err);\n                else\n                    callback(null, res[key]);\n            } : null);\n        };\n        cloudStorage.getItems = function (keys, callback) {\n            return invokeStorageMethod('getStorageValues', { keys: keys }, callback);\n        };\n        cloudStorage.removeItem = function (key, callback) {\n            return cloudStorage.removeItems([key], callback);\n        };\n        cloudStorage.removeItems = function (keys, callback) {\n            return invokeStorageMethod('deleteStorageValues', { keys: keys }, callback);\n        };\n        cloudStorage.getKeys = function (callback) {\n            return invokeStorageMethod('getStorageKeys', {}, callback);\n        };\n        return cloudStorage;\n    })();\n    var BiometricManager = (function () {\n        var isInited = false;\n        var isBiometricAvailable = false;\n        var biometricType = 'unknown';\n        var isAccessRequested = false;\n        var isAccessGranted = false;\n        var isBiometricTokenSaved = false;\n        var deviceId = '';\n        var biometricManager = {};\n        Object.defineProperty(biometricManager, 'isInited', {\n            get: function () { return isInited; },\n            enumerable: true\n        });\n        Object.defineProperty(biometricManager, 'isBiometricAvailable', {\n            get: function () { return isInited && isBiometricAvailable; },\n            enumerable: true\n        });\n        Object.defineProperty(biometricManager, 'biometricType', {\n            get: function () { return biometricType || 'unknown'; },\n            enumerable: true\n        });\n        Object.defineProperty(biometricManager, 'isAccessRequested', {\n            get: function () { return isAccessRequested; },\n            enumerable: true\n        });\n        Object.defineProperty(biometricManager, 'isAccessGranted', {\n            get: function () { return isAccessRequested && isAccessGranted; },\n            enumerable: true\n        });\n        Object.defineProperty(biometricManager, 'isBiometricTokenSaved', {\n            get: function () { return isBiometricTokenSaved; },\n            enumerable: true\n        });\n        Object.defineProperty(biometricManager, 'deviceId', {\n            get: function () { return deviceId || ''; },\n            enumerable: true\n        });\n        var initRequestState = { callbacks: [] };\n        var accessRequestState = false;\n        var authRequestState = false;\n        var tokenRequestState = false;\n        WebView.onEvent('biometry_info_received', onBiometryInfoReceived);\n        WebView.onEvent('biometry_auth_requested', onBiometryAuthRequested);\n        WebView.onEvent('biometry_token_updated', onBiometryTokenUpdated);\n        function onBiometryInfoReceived(eventType, eventData) {\n            isInited = true;\n            if (eventData.available) {\n                isBiometricAvailable = true;\n                biometricType = eventData.type || 'unknown';\n                if (eventData.access_requested) {\n                    isAccessRequested = true;\n                    isAccessGranted = !!eventData.access_granted;\n                    isBiometricTokenSaved = !!eventData.token_saved;\n                }\n                else {\n                    isAccessRequested = false;\n                    isAccessGranted = false;\n                    isBiometricTokenSaved = false;\n                }\n            }\n            else {\n                isBiometricAvailable = false;\n                biometricType = 'unknown';\n                isAccessRequested = false;\n                isAccessGranted = false;\n                isBiometricTokenSaved = false;\n            }\n            deviceId = eventData.device_id || '';\n            if (initRequestState.callbacks.length > 0) {\n                for (var i = 0; i < initRequestState.callbacks.length; i++) {\n                    var callback = initRequestState.callbacks[i];\n                    callback();\n                }\n            }\n            if (accessRequestState) {\n                var state = accessRequestState;\n                accessRequestState = false;\n                if (state.callback) {\n                    state.callback(isAccessGranted);\n                }\n            }\n            receiveWebViewEvent('biometricManagerUpdated');\n        }\n        function onBiometryAuthRequested(eventType, eventData) {\n            var isAuthenticated = (eventData.status == 'authorized'), biometricToken = eventData.token || '';\n            if (authRequestState) {\n                var state = authRequestState;\n                authRequestState = false;\n                if (state.callback) {\n                    state.callback(isAuthenticated, isAuthenticated ? biometricToken : null);\n                }\n            }\n            receiveWebViewEvent('biometricAuthRequested', isAuthenticated ? {\n                isAuthenticated: true,\n                biometricToken: biometricToken\n            } : {\n                isAuthenticated: false\n            });\n        }\n        function onBiometryTokenUpdated(eventType, eventData) {\n            var applied = false;\n            if (isBiometricAvailable &&\n                isAccessRequested) {\n                if (eventData.status == 'updated') {\n                    isBiometricTokenSaved = true;\n                    applied = true;\n                }\n                else if (eventData.status == 'removed') {\n                    isBiometricTokenSaved = false;\n                    applied = true;\n                }\n            }\n            if (tokenRequestState) {\n                var state = tokenRequestState;\n                tokenRequestState = false;\n                if (state.callback) {\n                    state.callback(applied);\n                }\n            }\n            receiveWebViewEvent('biometricTokenUpdated', {\n                isUpdated: applied\n            });\n        }\n        function checkVersion() {\n            if (!versionAtLeast('7.2')) {\n                console.warn('[Telegram.WebApp] BiometricManager is not supported in version ' + webAppVersion);\n                return false;\n            }\n            return true;\n        }\n        function checkInit() {\n            if (!isInited) {\n                console.error('[Telegram.WebApp] BiometricManager should be inited before using.');\n                throw Error('WebAppBiometricManagerNotInited');\n            }\n            return true;\n        }\n        biometricManager.init = function (callback) {\n            if (!checkVersion()) {\n                return biometricManager;\n            }\n            if (isInited) {\n                return biometricManager;\n            }\n            if (callback) {\n                initRequestState.callbacks.push(callback);\n            }\n            WebView.postEvent('web_app_biometry_get_info', false);\n            return biometricManager;\n        };\n        biometricManager.requestAccess = function (params, callback) {\n            if (!checkVersion()) {\n                return biometricManager;\n            }\n            checkInit();\n            if (!isBiometricAvailable) {\n                console.error('[Telegram.WebApp] Biometrics is not available on this device.');\n                throw Error('WebAppBiometricManagerBiometricsNotAvailable');\n            }\n            if (accessRequestState) {\n                console.error('[Telegram.WebApp] Access is already requested');\n                throw Error('WebAppBiometricManagerAccessRequested');\n            }\n            var popup_params = {};\n            if (typeof params.reason !== 'undefined') {\n                var reason = strTrim(params.reason);\n                if (reason.length > 128) {\n                    console.error('[Telegram.WebApp] Biometric reason is too long', reason);\n                    throw Error('WebAppBiometricRequestAccessParamInvalid');\n                }\n                if (reason.length > 0) {\n                    popup_params.reason = reason;\n                }\n            }\n            accessRequestState = {\n                callback: callback\n            };\n            WebView.postEvent('web_app_biometry_request_access', false, popup_params);\n            return biometricManager;\n        };\n        biometricManager.authenticate = function (params, callback) {\n            if (!checkVersion()) {\n                return biometricManager;\n            }\n            checkInit();\n            if (!isBiometricAvailable) {\n                console.error('[Telegram.WebApp] Biometrics is not available on this device.');\n                throw Error('WebAppBiometricManagerBiometricsNotAvailable');\n            }\n            if (!isAccessGranted) {\n                console.error('[Telegram.WebApp] Biometric access was not granted by the user.');\n                throw Error('WebAppBiometricManagerBiometricAccessNotGranted');\n            }\n            if (authRequestState) {\n                console.error('[Telegram.WebApp] Authentication request is already in progress.');\n                throw Error('WebAppBiometricManagerAuthenticationRequested');\n            }\n            var popup_params = {};\n            if (typeof params.reason !== 'undefined') {\n                var reason = strTrim(params.reason);\n                if (reason.length > 128) {\n                    console.error('[Telegram.WebApp] Biometric reason is too long', reason);\n                    throw Error('WebAppBiometricRequestAccessParamInvalid');\n                }\n                if (reason.length > 0) {\n                    popup_params.reason = reason;\n                }\n            }\n            authRequestState = {\n                callback: callback\n            };\n            WebView.postEvent('web_app_biometry_request_auth', false, popup_params);\n            return biometricManager;\n        };\n        biometricManager.updateBiometricToken = function (token, callback) {\n            if (!checkVersion()) {\n                return biometricManager;\n            }\n            token = token || '';\n            if (token.length > 1024) {\n                console.error('[Telegram.WebApp] Token is too long', token);\n                throw Error('WebAppBiometricManagerTokenInvalid');\n            }\n            checkInit();\n            if (!isBiometricAvailable) {\n                console.error('[Telegram.WebApp] Biometrics is not available on this device.');\n                throw Error('WebAppBiometricManagerBiometricsNotAvailable');\n            }\n            if (!isAccessGranted) {\n                console.error('[Telegram.WebApp] Biometric access was not granted by the user.');\n                throw Error('WebAppBiometricManagerBiometricAccessNotGranted');\n            }\n            if (tokenRequestState) {\n                console.error('[Telegram.WebApp] Token request is already in progress.');\n                throw Error('WebAppBiometricManagerTokenUpdateRequested');\n            }\n            tokenRequestState = {\n                callback: callback\n            };\n            WebView.postEvent('web_app_biometry_update_token', false, { token: token });\n            return biometricManager;\n        };\n        biometricManager.openSettings = function () {\n            if (!checkVersion()) {\n                return biometricManager;\n            }\n            checkInit();\n            if (!isBiometricAvailable) {\n                console.error('[Telegram.WebApp] Biometrics is not available on this device.');\n                throw Error('WebAppBiometricManagerBiometricsNotAvailable');\n            }\n            if (!isAccessRequested) {\n                console.error('[Telegram.WebApp] Biometric access was not requested yet.');\n                throw Error('WebAppBiometricManagerBiometricsAccessNotRequested');\n            }\n            if (isAccessGranted) {\n                console.warn('[Telegram.WebApp] Biometric access was granted by the user, no need to go to settings.');\n                return biometricManager;\n            }\n            WebView.postEvent('web_app_biometry_open_settings', false);\n            return biometricManager;\n        };\n        return biometricManager;\n    })();\n    var webAppInvoices = {};\n    function onInvoiceClosed(eventType, eventData) {\n        if (eventData.slug && webAppInvoices[eventData.slug]) {\n            var invoiceData = webAppInvoices[eventData.slug];\n            delete webAppInvoices[eventData.slug];\n            if (invoiceData.callback) {\n                invoiceData.callback(eventData.status);\n            }\n            receiveWebViewEvent('invoiceClosed', {\n                url: invoiceData.url,\n                status: eventData.status\n            });\n        }\n    }\n    var webAppPopupOpened = false;\n    function onPopupClosed(eventType, eventData) {\n        if (webAppPopupOpened) {\n            var popupData = webAppPopupOpened;\n            webAppPopupOpened = false;\n            var button_id = null;\n            if (typeof eventData.button_id !== 'undefined') {\n                button_id = eventData.button_id;\n            }\n            if (popupData.callback) {\n                popupData.callback(button_id);\n            }\n            receiveWebViewEvent('popupClosed', {\n                button_id: button_id\n            });\n        }\n    }\n    var webAppScanQrPopupOpened = false;\n    function onQrTextReceived(eventType, eventData) {\n        if (webAppScanQrPopupOpened) {\n            var popupData = webAppScanQrPopupOpened;\n            var data = null;\n            if (typeof eventData.data !== 'undefined') {\n                data = eventData.data;\n            }\n            if (popupData.callback) {\n                if (popupData.callback(data)) {\n                    webAppScanQrPopupOpened = false;\n                    WebView.postEvent('web_app_close_scan_qr_popup', false);\n                }\n            }\n            receiveWebViewEvent('qrTextReceived', {\n                data: data\n            });\n        }\n    }\n    function onScanQrPopupClosed(eventType, eventData) {\n        webAppScanQrPopupOpened = false;\n        receiveWebViewEvent('scanQrPopupClosed');\n    }\n    function onClipboardTextReceived(eventType, eventData) {\n        if (eventData.req_id && webAppCallbacks[eventData.req_id]) {\n            var requestData = webAppCallbacks[eventData.req_id];\n            delete webAppCallbacks[eventData.req_id];\n            var data = null;\n            if (typeof eventData.data !== 'undefined') {\n                data = eventData.data;\n            }\n            if (requestData.callback) {\n                requestData.callback(data);\n            }\n            receiveWebViewEvent('clipboardTextReceived', {\n                data: data\n            });\n        }\n    }\n    var WebAppWriteAccessRequested = false;\n    function onWriteAccessRequested(eventType, eventData) {\n        if (WebAppWriteAccessRequested) {\n            var requestData = WebAppWriteAccessRequested;\n            WebAppWriteAccessRequested = false;\n            if (requestData.callback) {\n                requestData.callback(eventData.status == 'allowed');\n            }\n            receiveWebViewEvent('writeAccessRequested', {\n                status: eventData.status\n            });\n        }\n    }\n    function getRequestedContact(callback, timeout) {\n        var reqTo, fallbackTo, reqDelay = 0;\n        var reqInvoke = function () {\n            invokeCustomMethod('getRequestedContact', {}, function (err, res) {\n                if (res && res.length) {\n                    clearTimeout(fallbackTo);\n                    callback(res);\n                }\n                else {\n                    reqDelay += 50;\n                    reqTo = setTimeout(reqInvoke, reqDelay);\n                }\n            });\n        };\n        var fallbackInvoke = function () {\n            clearTimeout(reqTo);\n            callback('');\n        };\n        fallbackTo = setTimeout(fallbackInvoke, timeout);\n        reqInvoke();\n    }\n    var WebAppContactRequested = false;\n    function onPhoneRequested(eventType, eventData) {\n        if (WebAppContactRequested) {\n            var requestData = WebAppContactRequested;\n            WebAppContactRequested = false;\n            var requestSent = eventData.status == 'sent';\n            var webViewEvent = {\n                status: eventData.status\n            };\n            if (requestSent) {\n                getRequestedContact(function (res) {\n                    if (res && res.length) {\n                        webViewEvent.response = res;\n                        webViewEvent.responseUnsafe = Utils.urlParseQueryString(res);\n                        for (var key in webViewEvent.responseUnsafe) {\n                            var val = webViewEvent.responseUnsafe[key];\n                            try {\n                                if (val.substr(0, 1) == '{' && val.substr(-1) == '}' ||\n                                    val.substr(0, 1) == '[' && val.substr(-1) == ']') {\n                                    webViewEvent.responseUnsafe[key] = JSON.parse(val);\n                                }\n                            }\n                            catch (e) { }\n                        }\n                    }\n                    if (requestData.callback) {\n                        requestData.callback(requestSent, webViewEvent);\n                    }\n                    receiveWebViewEvent('contactRequested', webViewEvent);\n                }, 3000);\n            }\n            else {\n                if (requestData.callback) {\n                    requestData.callback(requestSent, webViewEvent);\n                }\n                receiveWebViewEvent('contactRequested', webViewEvent);\n            }\n        }\n    }\n    function onCustomMethodInvoked(eventType, eventData) {\n        if (eventData.req_id && webAppCallbacks[eventData.req_id]) {\n            var requestData = webAppCallbacks[eventData.req_id];\n            delete webAppCallbacks[eventData.req_id];\n            var res = null, err = null;\n            if (typeof eventData.result !== 'undefined') {\n                res = eventData.result;\n            }\n            if (typeof eventData.error !== 'undefined') {\n                err = eventData.error;\n            }\n            if (requestData.callback) {\n                requestData.callback(err, res);\n            }\n        }\n    }\n    function invokeCustomMethod(method, params, callback) {\n        if (!versionAtLeast('6.9')) {\n            console.error('[Telegram.WebApp] Method invokeCustomMethod is not supported in version ' + webAppVersion);\n            throw Error('WebAppMethodUnsupported');\n        }\n        var req_id = generateCallbackId(16);\n        var req_params = { req_id: req_id, method: method, params: params || {} };\n        webAppCallbacks[req_id] = {\n            callback: callback\n        };\n        WebView.postEvent('web_app_invoke_custom_method', false, req_params);\n    }\n    ;\n    if (!window.Telegram) {\n        window.Telegram = {};\n    }\n    Object.defineProperty(WebApp, 'initData', {\n        get: function () { return webAppInitData; },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'initDataUnsafe', {\n        get: function () { return webAppInitDataUnsafe; },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'version', {\n        get: function () { return webAppVersion; },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'platform', {\n        get: function () { return webAppPlatform; },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'colorScheme', {\n        get: function () { return colorScheme; },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'themeParams', {\n        get: function () { return themeParams; },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'isExpanded', {\n        get: function () { return isExpanded; },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'viewportHeight', {\n        get: function () { return (viewportHeight === false ? window.innerHeight : viewportHeight) - bottomBarHeight; },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'viewportStableHeight', {\n        get: function () { return (viewportStableHeight === false ? window.innerHeight : viewportStableHeight) - bottomBarHeight; },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'isClosingConfirmationEnabled', {\n        set: function (val) { setClosingConfirmation(val); },\n        get: function () { return isClosingConfirmationEnabled; },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'isVerticalSwipesEnabled', {\n        set: function (val) { toggleVerticalSwipes(val); },\n        get: function () { return isVerticalSwipesEnabled; },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'headerColor', {\n        set: function (val) { setHeaderColor(val); },\n        get: function () { return getHeaderColor(); },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'backgroundColor', {\n        set: function (val) { setBackgroundColor(val); },\n        get: function () { return getBackgroundColor(); },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'bottomBarColor', {\n        set: function (val) { setBottomBarColor(val); },\n        get: function () { return getBottomBarColor(); },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'BackButton', {\n        value: BackButton,\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'MainButton', {\n        value: MainButton,\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'SecondaryButton', {\n        value: SecondaryButton,\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'SettingsButton', {\n        value: SettingsButton,\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'HapticFeedback', {\n        value: HapticFeedback,\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'CloudStorage', {\n        value: CloudStorage,\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'BiometricManager', {\n        value: BiometricManager,\n        enumerable: true\n    });\n    WebApp.setHeaderColor = function (color_key) {\n        WebApp.headerColor = color_key;\n    };\n    WebApp.setBackgroundColor = function (color) {\n        WebApp.backgroundColor = color;\n    };\n    WebApp.setBottomBarColor = function (color) {\n        WebApp.bottomBarColor = color;\n    };\n    WebApp.enableClosingConfirmation = function () {\n        WebApp.isClosingConfirmationEnabled = true;\n    };\n    WebApp.disableClosingConfirmation = function () {\n        WebApp.isClosingConfirmationEnabled = false;\n    };\n    WebApp.enableVerticalSwipes = function () {\n        WebApp.isVerticalSwipesEnabled = true;\n    };\n    WebApp.disableVerticalSwipes = function () {\n        WebApp.isVerticalSwipesEnabled = false;\n    };\n    WebApp.isVersionAtLeast = function (ver) {\n        return versionAtLeast(ver);\n    };\n    WebApp.onEvent = function (eventType, callback) {\n        onWebViewEvent(eventType, callback);\n    };\n    WebApp.offEvent = function (eventType, callback) {\n        offWebViewEvent(eventType, callback);\n    };\n    WebApp.sendData = function (data) {\n        if (!data || !data.length) {\n            console.error('[Telegram.WebApp] Data is required', data);\n            throw Error('WebAppDataInvalid');\n        }\n        if (byteLength(data) > 4096) {\n            console.error('[Telegram.WebApp] Data is too long', data);\n            throw Error('WebAppDataInvalid');\n        }\n        WebView.postEvent('web_app_data_send', false, { data: data });\n    };\n    WebApp.switchInlineQuery = function (query, choose_chat_types) {\n        if (!versionAtLeast('6.6')) {\n            console.error('[Telegram.WebApp] Method switchInlineQuery is not supported in version ' + webAppVersion);\n            throw Error('WebAppMethodUnsupported');\n        }\n        if (!initParams.tgWebAppBotInline) {\n            console.error('[Telegram.WebApp] Inline mode is disabled for this bot. Read more about inline mode: https://core.telegram.org/bots/inline');\n            throw Error('WebAppInlineModeDisabled');\n        }\n        query = query || '';\n        if (query.length > 256) {\n            console.error('[Telegram.WebApp] Inline query is too long', query);\n            throw Error('WebAppInlineQueryInvalid');\n        }\n        var chat_types = [];\n        if (choose_chat_types) {\n            if (!Array.isArray(choose_chat_types)) {\n                console.error('[Telegram.WebApp] Choose chat types should be an array', choose_chat_types);\n                throw Error('WebAppInlineChooseChatTypesInvalid');\n            }\n            var good_types = { users: 1, bots: 1, groups: 1, channels: 1 };\n            for (var i = 0; i < choose_chat_types.length; i++) {\n                var chat_type = choose_chat_types[i];\n                if (!good_types[chat_type]) {\n                    console.error('[Telegram.WebApp] Choose chat type is invalid', chat_type);\n                    throw Error('WebAppInlineChooseChatTypeInvalid');\n                }\n                if (good_types[chat_type] != 2) {\n                    good_types[chat_type] = 2;\n                    chat_types.push(chat_type);\n                }\n            }\n        }\n        WebView.postEvent('web_app_switch_inline_query', false, { query: query, chat_types: chat_types });\n    };\n    WebApp.openLink = function (url, options) {\n        var a = document.createElement('A');\n        a.href = url;\n        if (a.protocol != 'http:' &&\n            a.protocol != 'https:') {\n            console.error('[Telegram.WebApp] Url protocol is not supported', url);\n            throw Error('WebAppTgUrlInvalid');\n        }\n        var url = a.href;\n        options = options || {};\n        if (versionAtLeast('6.1')) {\n            var req_params = { url: url };\n            if (versionAtLeast('6.4') && options.try_instant_view) {\n                req_params.try_instant_view = true;\n            }\n            if (versionAtLeast('7.6') && options.try_browser) {\n                req_params.try_browser = options.try_browser;\n            }\n            WebView.postEvent('web_app_open_link', false, req_params);\n        }\n        else {\n            window.open(url, '_blank');\n        }\n    };\n    WebApp.openTelegramLink = function (url) {\n        var a = document.createElement('A');\n        a.href = url;\n        if (a.protocol != 'http:' &&\n            a.protocol != 'https:') {\n            console.error('[Telegram.WebApp] Url protocol is not supported', url);\n            throw Error('WebAppTgUrlInvalid');\n        }\n        if (a.hostname != 't.me') {\n            console.error('[Telegram.WebApp] Url host is not supported', url);\n            throw Error('WebAppTgUrlInvalid');\n        }\n        var path_full = a.pathname + a.search;\n        if (isIframe || versionAtLeast('6.1')) {\n            WebView.postEvent('web_app_open_tg_link', false, { path_full: path_full });\n        }\n        else {\n            location.href = 'https://t.me' + path_full;\n        }\n    };\n    WebApp.openInvoice = function (url, callback) {\n        var a = document.createElement('A'), match, slug;\n        a.href = url;\n        if (a.protocol != 'http:' &&\n            a.protocol != 'https:' ||\n            a.hostname != 't.me' ||\n            !(match = a.pathname.match(/^\\/(\\$|invoice\\/)([A-Za-z0-9\\-_=]+)$/)) ||\n            !(slug = match[2])) {\n            console.error('[Telegram.WebApp] Invoice url is invalid', url);\n            throw Error('WebAppInvoiceUrlInvalid');\n        }\n        if (!versionAtLeast('6.1')) {\n            console.error('[Telegram.WebApp] Method openInvoice is not supported in version ' + webAppVersion);\n            throw Error('WebAppMethodUnsupported');\n        }\n        if (webAppInvoices[slug]) {\n            console.error('[Telegram.WebApp] Invoice is already opened');\n            throw Error('WebAppInvoiceOpened');\n        }\n        webAppInvoices[slug] = {\n            url: url,\n            callback: callback\n        };\n        WebView.postEvent('web_app_open_invoice', false, { slug: slug });\n    };\n    WebApp.showPopup = function (params, callback) {\n        if (!versionAtLeast('6.2')) {\n            console.error('[Telegram.WebApp] Method showPopup is not supported in version ' + webAppVersion);\n            throw Error('WebAppMethodUnsupported');\n        }\n        if (webAppPopupOpened) {\n            console.error('[Telegram.WebApp] Popup is already opened');\n            throw Error('WebAppPopupOpened');\n        }\n        var title = '';\n        var message = '';\n        var buttons = [];\n        var popup_buttons = {};\n        var popup_params = {};\n        if (typeof params.title !== 'undefined') {\n            title = strTrim(params.title);\n            if (title.length > 64) {\n                console.error('[Telegram.WebApp] Popup title is too long', title);\n                throw Error('WebAppPopupParamInvalid');\n            }\n            if (title.length > 0) {\n                popup_params.title = title;\n            }\n        }\n        if (typeof params.message !== 'undefined') {\n            message = strTrim(params.message);\n        }\n        if (!message.length) {\n            console.error('[Telegram.WebApp] Popup message is required', params.message);\n            throw Error('WebAppPopupParamInvalid');\n        }\n        if (message.length > 256) {\n            console.error('[Telegram.WebApp] Popup message is too long', message);\n            throw Error('WebAppPopupParamInvalid');\n        }\n        popup_params.message = message;\n        if (typeof params.buttons !== 'undefined') {\n            if (!Array.isArray(params.buttons)) {\n                console.error('[Telegram.WebApp] Popup buttons should be an array', params.buttons);\n                throw Error('WebAppPopupParamInvalid');\n            }\n            for (var i = 0; i < params.buttons.length; i++) {\n                var button = params.buttons[i];\n                var btn = {};\n                var id = '';\n                if (typeof button.id !== 'undefined') {\n                    id = button.id.toString();\n                    if (id.length > 64) {\n                        console.error('[Telegram.WebApp] Popup button id is too long', id);\n                        throw Error('WebAppPopupParamInvalid');\n                    }\n                }\n                btn.id = id;\n                var button_type = button.type;\n                if (typeof button_type === 'undefined') {\n                    button_type = 'default';\n                }\n                btn.type = button_type;\n                if (button_type == 'ok' ||\n                    button_type == 'close' ||\n                    button_type == 'cancel') {\n                    // no params needed\n                }\n                else if (button_type == 'default' ||\n                    button_type == 'destructive') {\n                    var text = '';\n                    if (typeof button.text !== 'undefined') {\n                        text = strTrim(button.text);\n                    }\n                    if (!text.length) {\n                        console.error('[Telegram.WebApp] Popup button text is required for type ' + button_type, button.text);\n                        throw Error('WebAppPopupParamInvalid');\n                    }\n                    if (text.length > 64) {\n                        console.error('[Telegram.WebApp] Popup button text is too long', text);\n                        throw Error('WebAppPopupParamInvalid');\n                    }\n                    btn.text = text;\n                }\n                else {\n                    console.error('[Telegram.WebApp] Popup button type is invalid', button_type);\n                    throw Error('WebAppPopupParamInvalid');\n                }\n                buttons.push(btn);\n            }\n        }\n        else {\n            buttons.push({ id: '', type: 'close' });\n        }\n        if (buttons.length < 1) {\n            console.error('[Telegram.WebApp] Popup should have at least one button');\n            throw Error('WebAppPopupParamInvalid');\n        }\n        if (buttons.length > 3) {\n            console.error('[Telegram.WebApp] Popup should not have more than 3 buttons');\n            throw Error('WebAppPopupParamInvalid');\n        }\n        popup_params.buttons = buttons;\n        webAppPopupOpened = {\n            callback: callback\n        };\n        WebView.postEvent('web_app_open_popup', false, popup_params);\n    };\n    WebApp.showAlert = function (message, callback) {\n        WebApp.showPopup({\n            message: message\n        }, callback ? function () { callback(); } : null);\n    };\n    WebApp.showConfirm = function (message, callback) {\n        WebApp.showPopup({\n            message: message,\n            buttons: [\n                { type: 'ok', id: 'ok' },\n                { type: 'cancel' }\n            ]\n        }, callback ? function (button_id) {\n            callback(button_id == 'ok');\n        } : null);\n    };\n    WebApp.showScanQrPopup = function (params, callback) {\n        if (!versionAtLeast('6.4')) {\n            console.error('[Telegram.WebApp] Method showScanQrPopup is not supported in version ' + webAppVersion);\n            throw Error('WebAppMethodUnsupported');\n        }\n        if (webAppScanQrPopupOpened) {\n            console.error('[Telegram.WebApp] Popup is already opened');\n            throw Error('WebAppScanQrPopupOpened');\n        }\n        var text = '';\n        var popup_params = {};\n        if (typeof params.text !== 'undefined') {\n            text = strTrim(params.text);\n            if (text.length > 64) {\n                console.error('[Telegram.WebApp] Scan QR popup text is too long', text);\n                throw Error('WebAppScanQrPopupParamInvalid');\n            }\n            if (text.length > 0) {\n                popup_params.text = text;\n            }\n        }\n        webAppScanQrPopupOpened = {\n            callback: callback\n        };\n        WebView.postEvent('web_app_open_scan_qr_popup', false, popup_params);\n    };\n    WebApp.closeScanQrPopup = function () {\n        if (!versionAtLeast('6.4')) {\n            console.error('[Telegram.WebApp] Method closeScanQrPopup is not supported in version ' + webAppVersion);\n            throw Error('WebAppMethodUnsupported');\n        }\n        webAppScanQrPopupOpened = false;\n        WebView.postEvent('web_app_close_scan_qr_popup', false);\n    };\n    WebApp.readTextFromClipboard = function (callback) {\n        if (!versionAtLeast('6.4')) {\n            console.error('[Telegram.WebApp] Method readTextFromClipboard is not supported in version ' + webAppVersion);\n            throw Error('WebAppMethodUnsupported');\n        }\n        var req_id = generateCallbackId(16);\n        var req_params = { req_id: req_id };\n        webAppCallbacks[req_id] = {\n            callback: callback\n        };\n        WebView.postEvent('web_app_read_text_from_clipboard', false, req_params);\n    };\n    WebApp.requestWriteAccess = function (callback) {\n        if (!versionAtLeast('6.9')) {\n            console.error('[Telegram.WebApp] Method requestWriteAccess is not supported in version ' + webAppVersion);\n            throw Error('WebAppMethodUnsupported');\n        }\n        if (WebAppWriteAccessRequested) {\n            console.error('[Telegram.WebApp] Write access is already requested');\n            throw Error('WebAppWriteAccessRequested');\n        }\n        WebAppWriteAccessRequested = {\n            callback: callback\n        };\n        WebView.postEvent('web_app_request_write_access');\n    };\n    WebApp.requestContact = function (callback) {\n        if (!versionAtLeast('6.9')) {\n            console.error('[Telegram.WebApp] Method requestContact is not supported in version ' + webAppVersion);\n            throw Error('WebAppMethodUnsupported');\n        }\n        if (WebAppContactRequested) {\n            console.error('[Telegram.WebApp] Contact is already requested');\n            throw Error('WebAppContactRequested');\n        }\n        WebAppContactRequested = {\n            callback: callback\n        };\n        WebView.postEvent('web_app_request_phone');\n    };\n    WebApp.shareToStory = function (media_url, params) {\n        params = params || {};\n        if (!versionAtLeast('7.8')) {\n            console.error('[Telegram.WebApp] Method shareToStory is not supported in version ' + webAppVersion);\n            throw Error('WebAppMethodUnsupported');\n        }\n        var a = document.createElement('A');\n        a.href = media_url;\n        if (a.protocol != 'http:' &&\n            a.protocol != 'https:') {\n            console.error('[Telegram.WebApp] Media url protocol is not supported', url);\n            throw Error('WebAppMediaUrlInvalid');\n        }\n        var share_params = {};\n        share_params.media_url = a.href;\n        if (typeof params.text !== 'undefined') {\n            var text = strTrim(params.text);\n            if (text.length > 2048) {\n                console.error('[Telegram.WebApp] Text is too long', text);\n                throw Error('WebAppShareToStoryParamInvalid');\n            }\n            if (text.length > 0) {\n                share_params.text = text;\n            }\n        }\n        if (typeof params.widget_link !== 'undefined') {\n            params.widget_link = params.widget_link || {};\n            a.href = params.widget_link.url;\n            if (a.protocol != 'http:' &&\n                a.protocol != 'https:') {\n                console.error('[Telegram.WebApp] Link protocol is not supported', url);\n                throw Error('WebAppShareToStoryParamInvalid');\n            }\n            var widget_link = {\n                url: a.href\n            };\n            if (typeof params.widget_link.name !== 'undefined') {\n                var link_name = strTrim(params.widget_link.name);\n                if (link_name.length > 48) {\n                    console.error('[Telegram.WebApp] Link name is too long', link_name);\n                    throw Error('WebAppShareToStoryParamInvalid');\n                }\n                if (link_name.length > 0) {\n                    widget_link.name = link_name;\n                }\n            }\n            share_params.widget_link = widget_link;\n        }\n        WebView.postEvent('web_app_share_to_story', false, share_params);\n    };\n    WebApp.invokeCustomMethod = function (method, params, callback) {\n        invokeCustomMethod(method, params, callback);\n    };\n    WebApp.ready = function () {\n        WebView.postEvent('web_app_ready');\n    };\n    WebApp.expand = function () {\n        WebView.postEvent('web_app_expand');\n    };\n    WebApp.close = function (options) {\n        options = options || {};\n        var req_params = {};\n        if (versionAtLeast('7.6') && options.return_back) {\n            req_params.return_back = true;\n        }\n        WebView.postEvent('web_app_close', false, req_params);\n    };\n    window.Telegram.WebApp = WebApp;\n    updateHeaderColor();\n    updateBackgroundColor();\n    updateBottomBarColor();\n    setViewportHeight();\n    if (initParams.tgWebAppShowSettings) {\n        SettingsButton.show();\n    }\n    window.addEventListener('resize', onWindowResize);\n    if (isIframe) {\n        document.addEventListener('click', linkHandler);\n    }\n    WebView.onEvent('theme_changed', onThemeChanged);\n    WebView.onEvent('viewport_changed', onViewportChanged);\n    WebView.onEvent('invoice_closed', onInvoiceClosed);\n    WebView.onEvent('popup_closed', onPopupClosed);\n    WebView.onEvent('qr_text_received', onQrTextReceived);\n    WebView.onEvent('scan_qr_popup_closed', onScanQrPopupClosed);\n    WebView.onEvent('clipboard_text_received', onClipboardTextReceived);\n    WebView.onEvent('write_access_requested', onWriteAccessRequested);\n    WebView.onEvent('phone_requested', onPhoneRequested);\n    WebView.onEvent('custom_method_invoked', onCustomMethodInvoked);\n    WebView.postEvent('web_app_request_theme');\n    WebView.postEvent('web_app_request_viewport');\n})();\n//# sourceMappingURL=telegram-web-apps.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@twa-dev/sdk/dist/telegram-web-apps.js\n");

/***/ })

};
;